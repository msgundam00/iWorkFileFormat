// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSTArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TST {

namespace {

const ::google::protobuf::Descriptor* CellID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellID_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableSelection_reflection_ = NULL;
const ::google::protobuf::Descriptor* TileRowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileRowInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_reflection_ = NULL;
const ::google::protobuf::Descriptor* TileStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TileStorage_Tile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileStorage_Tile_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopUpMenuModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopUpMenuModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopUpMenuModel_CellValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopUpMenuModel_CellValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PopUpMenuModel_CellValueType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TableDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableDataList_ListEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableDataList_ListEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TableDataList_ListType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TableRBTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableRBTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableRBTree_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableRBTree_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeaderStorageBucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeaderStorageBucket_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeaderStorageBucket_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeaderStorageBucket_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeaderStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeaderStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditingStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditingStateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPTableInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPTableInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableStyleNetworkArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableStyleNetworkArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableModelArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableModelArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DurationWrapperArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DurationWrapperArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeRegionMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeRegionMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellMapArchive_CellMapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellMapArchive_CellMapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleStyleMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleStyleMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleStyleMapArchive_DoubleStyleMapEntryArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleStyleMapArchive_DoubleStyleMapEntryArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleTableMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleTableMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleTableMapArchive_StyleTableMapEntryArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleTableMapArchive_StyleTableMapEntryArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterRuleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterRuleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaPredicateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaPredicateArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FormulaPredicateArchive_FormulaPredicateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FormulaPredicateArchive_QualifierType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConditionalStyleSetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionalStyleSetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConditionalStyleSetArchive_ConditionalStyleRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionalStyleSetArchive_ConditionalStyleRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterSetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterSetArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FilterSetArchive_FilterSetType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TokenAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressionNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressionNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* BooleanNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BooleanNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumberNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumberNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdentifierNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdentifierNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperatorNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperatorNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostfixOperatorNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostfixOperatorNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrefixOperatorNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrefixOperatorNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionEndNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionEndNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DateNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DurationNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DurationNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArgumentPlaceholderNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArgumentPlaceholderNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmptyExpressionNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyExpressionNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayoutHintArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayoutHintArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompletionTokenAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompletionTokenAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* HiddenStateFormulaOwnerArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HiddenStateFormulaOwnerArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RichTextPayloadArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RichTextPayloadArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaEqualsTokenAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaEqualsTokenAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellRegion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CellType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CellValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SelectionTypeArchive_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FillDirectionArchive_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MergeActionArchive_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HideShowActionArchive_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSTArchives_2eproto() {
  protobuf_AddDesc_TSTArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSTArchives.proto");
  GOOGLE_CHECK(file != NULL);
  CellID_descriptor_ = file->message_type(0);
  static const int CellID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellID, packeddata_),
  };
  CellID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellID_descriptor_,
      CellID::default_instance_,
      CellID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellID));
  TableSize_descriptor_ = file->message_type(1);
  static const int TableSize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSize, packeddata_),
  };
  TableSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableSize_descriptor_,
      TableSize::default_instance_,
      TableSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableSize));
  CellRange_descriptor_ = file->message_type(2);
  static const int CellRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRange, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRange, size_),
  };
  CellRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellRange_descriptor_,
      CellRange::default_instance_,
      CellRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellRange));
  TableSelection_descriptor_ = file->message_type(3);
  static const int TableSelection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSelection, cellrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSelection, extendedcellrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSelection, extendedcellrangevalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSelection, selection_type_),
  };
  TableSelection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableSelection_descriptor_,
      TableSelection::default_instance_,
      TableSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSelection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSelection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableSelection));
  TileRowInfo_descriptor_ = file->message_type(4);
  static const int TileRowInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileRowInfo, storage_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileRowInfo, tilerowindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileRowInfo, cellcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileRowInfo, cellstoragebuffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileRowInfo, celloffsets_),
  };
  TileRowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TileRowInfo_descriptor_,
      TileRowInfo::default_instance_,
      TileRowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileRowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileRowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TileRowInfo));
  Tile_descriptor_ = file->message_type(5);
  static const int Tile_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, maxcolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, maxrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, numcells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, numrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, storage_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, rowinfos_),
  };
  Tile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_descriptor_,
      Tile::default_instance_,
      Tile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile));
  TileStorage_descriptor_ = file->message_type(6);
  static const int TileStorage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStorage, tiles_),
  };
  TileStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TileStorage_descriptor_,
      TileStorage::default_instance_,
      TileStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TileStorage));
  TileStorage_Tile_descriptor_ = TileStorage_descriptor_->nested_type(0);
  static const int TileStorage_Tile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStorage_Tile, tileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStorage_Tile, tile_),
  };
  TileStorage_Tile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TileStorage_Tile_descriptor_,
      TileStorage_Tile::default_instance_,
      TileStorage_Tile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStorage_Tile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileStorage_Tile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TileStorage_Tile));
  PopUpMenuModel_descriptor_ = file->message_type(7);
  static const int PopUpMenuModel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel, tsce_item_),
  };
  PopUpMenuModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopUpMenuModel_descriptor_,
      PopUpMenuModel::default_instance_,
      PopUpMenuModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopUpMenuModel));
  PopUpMenuModel_CellValue_descriptor_ = PopUpMenuModel_descriptor_->nested_type(0);
  static const int PopUpMenuModel_CellValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel_CellValue, cell_value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel_CellValue, boolean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel_CellValue, date_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel_CellValue, number_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel_CellValue, string_value_),
  };
  PopUpMenuModel_CellValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopUpMenuModel_CellValue_descriptor_,
      PopUpMenuModel_CellValue::default_instance_,
      PopUpMenuModel_CellValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel_CellValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopUpMenuModel_CellValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopUpMenuModel_CellValue));
  PopUpMenuModel_CellValueType_descriptor_ = PopUpMenuModel_descriptor_->enum_type(0);
  TableDataList_descriptor_ = file->message_type(8);
  static const int TableDataList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList, listtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList, nextlistid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList, entries_),
  };
  TableDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableDataList_descriptor_,
      TableDataList::default_instance_,
      TableDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableDataList));
  TableDataList_ListEntry_descriptor_ = TableDataList_descriptor_->nested_type(0);
  static const int TableDataList_ListEntry_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, refcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, formula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, custom_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, richtextpayload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, comment_storage_),
  };
  TableDataList_ListEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableDataList_ListEntry_descriptor_,
      TableDataList_ListEntry::default_instance_,
      TableDataList_ListEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataList_ListEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableDataList_ListEntry));
  TableDataList_ListType_descriptor_ = TableDataList_descriptor_->enum_type(0);
  TableRBTree_descriptor_ = file->message_type(9);
  static const int TableRBTree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRBTree, nodes_),
  };
  TableRBTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableRBTree_descriptor_,
      TableRBTree::default_instance_,
      TableRBTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRBTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRBTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableRBTree));
  TableRBTree_Node_descriptor_ = TableRBTree_descriptor_->nested_type(0);
  static const int TableRBTree_Node_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRBTree_Node, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRBTree_Node, value_),
  };
  TableRBTree_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableRBTree_Node_descriptor_,
      TableRBTree_Node::default_instance_,
      TableRBTree_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRBTree_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableRBTree_Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableRBTree_Node));
  HeaderStorageBucket_descriptor_ = file->message_type(10);
  static const int HeaderStorageBucket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket, buckethashfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket, headers_),
  };
  HeaderStorageBucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeaderStorageBucket_descriptor_,
      HeaderStorageBucket::default_instance_,
      HeaderStorageBucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeaderStorageBucket));
  HeaderStorageBucket_Header_descriptor_ = HeaderStorageBucket_descriptor_->nested_type(0);
  static const int HeaderStorageBucket_Header_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket_Header, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket_Header, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket_Header, hidingstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket_Header, numberofcells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket_Header, cell_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket_Header, text_style_),
  };
  HeaderStorageBucket_Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeaderStorageBucket_Header_descriptor_,
      HeaderStorageBucket_Header::default_instance_,
      HeaderStorageBucket_Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket_Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorageBucket_Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeaderStorageBucket_Header));
  HeaderStorage_descriptor_ = file->message_type(11);
  static const int HeaderStorage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorage, buckethashfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorage, buckets_),
  };
  HeaderStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeaderStorage_descriptor_,
      HeaderStorage::default_instance_,
      HeaderStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeaderStorage));
  DataStore_descriptor_ = file->message_type(12);
  static const int DataStore_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, rowheaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, columnheaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, tiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, stringtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, styletable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, formulatable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, formulaerrortable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, formattable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, multiplechoicelistformattable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, merge_region_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, customformattable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, nextrowstripid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, nextcolumnstripid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, rowtiletree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, columntiletree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, storage_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, richtextpayloadtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, conditionalstyletable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, commentstoragetable_),
  };
  DataStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataStore_descriptor_,
      DataStore::default_instance_,
      DataStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataStore));
  TableInfoArchive_descriptor_ = file->message_type(13);
  static const int TableInfoArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoArchive, tablemodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoArchive, editingstate_),
  };
  TableInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableInfoArchive_descriptor_,
      TableInfoArchive::default_instance_,
      TableInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableInfoArchive));
  EditingStateArchive_descriptor_ = file->message_type(14);
  static const int EditingStateArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, editingstorage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, editingcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, lasteditingcellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, editingcellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, deprecated_setup_textundoredotransaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, cell_was_edited_in_current_session_),
  };
  EditingStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditingStateArchive_descriptor_,
      EditingStateArchive::default_instance_,
      EditingStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditingStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditingStateArchive));
  WPTableInfoArchive_descriptor_ = file->message_type(15);
  static const int WPTableInfoArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPTableInfoArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPTableInfoArchive, storage_),
  };
  WPTableInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPTableInfoArchive_descriptor_,
      WPTableInfoArchive::default_instance_,
      WPTableInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPTableInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPTableInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPTableInfoArchive));
  TableStyleNetworkArchive_descriptor_ = file->message_type(16);
  static const int TableStyleNetworkArchive_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, table_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, body_text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, header_row_text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, header_column_text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, footer_row_text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, body_cell_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, header_row_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, header_column_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, footer_row_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, table_name_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, table_name_shape_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, preset_index_),
  };
  TableStyleNetworkArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableStyleNetworkArchive_descriptor_,
      TableStyleNetworkArchive::default_instance_,
      TableStyleNetworkArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleNetworkArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableStyleNetworkArchive));
  TableModelArchive_descriptor_ = file->message_type(17);
  static const int TableModelArchive_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, from_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, table_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, body_text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, header_row_text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, header_column_text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, footer_row_text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, body_cell_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, header_row_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, header_column_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, footer_row_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, table_name_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, table_name_shape_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, data_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, table_name_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, table_name_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, table_name_border_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_header_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_header_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_footer_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, header_rows_frozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, header_columns_frozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_hidden_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_hidden_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_user_hidden_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_user_hidden_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, number_of_filtered_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, default_row_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, default_column_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, origin_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, preset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, repeating_header_rows_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, repeating_header_columns_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, style_apply_clears_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, hidden_state_formula_owner_for_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, hidden_state_formula_owner_for_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, filter_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, conditional_style_formula_owner_id_),
  };
  TableModelArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableModelArchive_descriptor_,
      TableModelArchive::default_instance_,
      TableModelArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableModelArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableModelArchive));
  DurationWrapperArchive_descriptor_ = file->message_type(18);
  static const int DurationWrapperArchive_offsets_[1] = {
  };
  DurationWrapperArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DurationWrapperArchive_descriptor_,
      DurationWrapperArchive::default_instance_,
      DurationWrapperArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationWrapperArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationWrapperArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DurationWrapperArchive));
  Cell_descriptor_ = file->message_type(19);
  static const int Cell_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, numbervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, stringvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, boolvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, cell_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, text_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, formula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, formulaerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, current_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, number_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, currency_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, duration_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, date_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, control_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, custom_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, base_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, multiple_choice_list_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, explicit_format_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, richtextpayload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, conditional_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, multiple_choice_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, comment_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, conditional_style_applied_rule_),
  };
  Cell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cell_descriptor_,
      Cell::default_instance_,
      Cell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cell));
  MergeRegionMapArchive_descriptor_ = file->message_type(20);
  static const int MergeRegionMapArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionMapArchive, cell_range_),
  };
  MergeRegionMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MergeRegionMapArchive_descriptor_,
      MergeRegionMapArchive::default_instance_,
      MergeRegionMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MergeRegionMapArchive));
  CellMapArchive_descriptor_ = file->message_type(21);
  static const int CellMapArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive, cellmapentry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive, may_modify_formulas_in_cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive, may_modify_values_referenced_by_formulas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive, applies_to_hidden_),
  };
  CellMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellMapArchive_descriptor_,
      CellMapArchive::default_instance_,
      CellMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellMapArchive));
  CellMapArchive_CellMapEntry_descriptor_ = CellMapArchive_descriptor_->nested_type(0);
  static const int CellMapArchive_CellMapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive_CellMapEntry, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive_CellMapEntry, cell_),
  };
  CellMapArchive_CellMapEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellMapArchive_CellMapEntry_descriptor_,
      CellMapArchive_CellMapEntry::default_instance_,
      CellMapArchive_CellMapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive_CellMapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMapArchive_CellMapEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellMapArchive_CellMapEntry));
  DoubleStyleMapArchive_descriptor_ = file->message_type(22);
  static const int DoubleStyleMapArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive, cell_map_entry_),
  };
  DoubleStyleMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleStyleMapArchive_descriptor_,
      DoubleStyleMapArchive::default_instance_,
      DoubleStyleMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleStyleMapArchive));
  DoubleStyleMapArchive_DoubleStyleMapEntryArchive_descriptor_ = DoubleStyleMapArchive_descriptor_->nested_type(0);
  static const int DoubleStyleMapArchive_DoubleStyleMapEntryArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, old_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, new_style_),
  };
  DoubleStyleMapArchive_DoubleStyleMapEntryArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleStyleMapArchive_DoubleStyleMapEntryArchive_descriptor_,
      DoubleStyleMapArchive_DoubleStyleMapEntryArchive::default_instance_,
      DoubleStyleMapArchive_DoubleStyleMapEntryArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleStyleMapArchive_DoubleStyleMapEntryArchive));
  StyleTableMapArchive_descriptor_ = file->message_type(23);
  static const int StyleTableMapArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive, map_entry_),
  };
  StyleTableMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleTableMapArchive_descriptor_,
      StyleTableMapArchive::default_instance_,
      StyleTableMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleTableMapArchive));
  StyleTableMapArchive_StyleTableMapEntryArchive_descriptor_ = StyleTableMapArchive_descriptor_->nested_type(0);
  static const int StyleTableMapArchive_StyleTableMapEntryArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, old_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, new_style_),
  };
  StyleTableMapArchive_StyleTableMapEntryArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleTableMapArchive_StyleTableMapEntryArchive_descriptor_,
      StyleTableMapArchive_StyleTableMapEntryArchive::default_instance_,
      StyleTableMapArchive_StyleTableMapEntryArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleTableMapArchive_StyleTableMapEntryArchive));
  SelectionArchive_descriptor_ = file->message_type(24);
  static const int SelectionArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, tablemodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, selection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, anchor_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, cell_ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, base_ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, cursor_cell_),
  };
  SelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectionArchive_descriptor_,
      SelectionArchive::default_instance_,
      SelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectionArchive));
  FilterRuleArchive_descriptor_ = file->message_type(25);
  static const int FilterRuleArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterRuleArchive, predicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterRuleArchive, disabled_),
  };
  FilterRuleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterRuleArchive_descriptor_,
      FilterRuleArchive::default_instance_,
      FilterRuleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterRuleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterRuleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterRuleArchive));
  TableStyleArchive_descriptor_ = file->message_type(26);
  static const int TableStyleArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleArchive, table_properties_),
  };
  TableStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableStyleArchive_descriptor_,
      TableStyleArchive::default_instance_,
      TableStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableStyleArchive));
  CellStyleArchive_descriptor_ = file->message_type(27);
  static const int CellStyleArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStyleArchive, cell_properties_),
  };
  CellStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellStyleArchive_descriptor_,
      CellStyleArchive::default_instance_,
      CellStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellStyleArchive));
  FormulaPredicateArchive_descriptor_ = file->message_type(28);
  static const int FormulaPredicateArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, formula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, predicate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, qualifier1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, qualifier2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, param_index1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, param_index2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, param_index0_),
  };
  FormulaPredicateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaPredicateArchive_descriptor_,
      FormulaPredicateArchive::default_instance_,
      FormulaPredicateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaPredicateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaPredicateArchive));
  FormulaPredicateArchive_FormulaPredicateType_descriptor_ = FormulaPredicateArchive_descriptor_->enum_type(0);
  FormulaPredicateArchive_QualifierType_descriptor_ = FormulaPredicateArchive_descriptor_->enum_type(1);
  ConditionalStyleSetArchive_descriptor_ = file->message_type(29);
  static const int ConditionalStyleSetArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive, rulecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive, cellid_),
  };
  ConditionalStyleSetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConditionalStyleSetArchive_descriptor_,
      ConditionalStyleSetArchive::default_instance_,
      ConditionalStyleSetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConditionalStyleSetArchive));
  ConditionalStyleSetArchive_ConditionalStyleRule_descriptor_ = ConditionalStyleSetArchive_descriptor_->nested_type(0);
  static const int ConditionalStyleSetArchive_ConditionalStyleRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, predicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, cell_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, text_style_),
  };
  ConditionalStyleSetArchive_ConditionalStyleRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConditionalStyleSetArchive_ConditionalStyleRule_descriptor_,
      ConditionalStyleSetArchive_ConditionalStyleRule::default_instance_,
      ConditionalStyleSetArchive_ConditionalStyleRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConditionalStyleSetArchive_ConditionalStyleRule));
  FilterSetArchive_descriptor_ = file->message_type(30);
  static const int FilterSetArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterSetArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterSetArchive, is_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterSetArchive, filter_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterSetArchive, needs_formula_rewrite_for_import_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterSetArchive, filter_offsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterSetArchive, filter_enabled_),
  };
  FilterSetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterSetArchive_descriptor_,
      FilterSetArchive::default_instance_,
      FilterSetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterSetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterSetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterSetArchive));
  FilterSetArchive_FilterSetType_descriptor_ = FilterSetArchive_descriptor_->enum_type(0);
  TokenAttachmentArchive_descriptor_ = file->message_type(31);
  static const int TokenAttachmentArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenAttachmentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenAttachmentArchive, expressionnode_),
  };
  TokenAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenAttachmentArchive_descriptor_,
      TokenAttachmentArchive::default_instance_,
      TokenAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenAttachmentArchive));
  FormulaArchive_descriptor_ = file->message_type(32);
  static const int FormulaArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, expressiontree_),
  };
  FormulaArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaArchive_descriptor_,
      FormulaArchive::default_instance_,
      FormulaArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaArchive));
  ExpressionNodeArchive_descriptor_ = file->message_type(33);
  static const int ExpressionNodeArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionNodeArchive, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionNodeArchive, first_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionNodeArchive, last_index_),
  };
  ExpressionNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressionNodeArchive_descriptor_,
      ExpressionNodeArchive::default_instance_,
      ExpressionNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressionNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressionNodeArchive));
  BooleanNodeArchive_descriptor_ = file->message_type(34);
  static const int BooleanNodeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanNodeArchive, value_),
  };
  BooleanNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BooleanNodeArchive_descriptor_,
      BooleanNodeArchive::default_instance_,
      BooleanNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BooleanNodeArchive));
  NumberNodeArchive_descriptor_ = file->message_type(35);
  static const int NumberNodeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberNodeArchive, number_),
  };
  NumberNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumberNodeArchive_descriptor_,
      NumberNodeArchive::default_instance_,
      NumberNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumberNodeArchive));
  StringNodeArchive_descriptor_ = file->message_type(36);
  static const int StringNodeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringNodeArchive, value_),
  };
  StringNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringNodeArchive_descriptor_,
      StringNodeArchive::default_instance_,
      StringNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringNodeArchive));
  IdentifierNodeArchive_descriptor_ = file->message_type(37);
  static const int IdentifierNodeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentifierNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentifierNodeArchive, identifier_),
  };
  IdentifierNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdentifierNodeArchive_descriptor_,
      IdentifierNodeArchive::default_instance_,
      IdentifierNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentifierNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentifierNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdentifierNodeArchive));
  ArrayNodeArchive_descriptor_ = file->message_type(38);
  static const int ArrayNodeArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayNodeArchive, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayNodeArchive, rows_),
  };
  ArrayNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayNodeArchive_descriptor_,
      ArrayNodeArchive::default_instance_,
      ArrayNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayNodeArchive));
  ListNodeArchive_descriptor_ = file->message_type(39);
  static const int ListNodeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodeArchive, super_),
  };
  ListNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListNodeArchive_descriptor_,
      ListNodeArchive::default_instance_,
      ListNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListNodeArchive));
  OperatorNodeArchive_descriptor_ = file->message_type(40);
  static const int OperatorNodeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorNodeArchive, operatorchar_),
  };
  OperatorNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperatorNodeArchive_descriptor_,
      OperatorNodeArchive::default_instance_,
      OperatorNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperatorNodeArchive));
  PostfixOperatorNodeArchive_descriptor_ = file->message_type(41);
  static const int PostfixOperatorNodeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostfixOperatorNodeArchive, super_),
  };
  PostfixOperatorNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostfixOperatorNodeArchive_descriptor_,
      PostfixOperatorNodeArchive::default_instance_,
      PostfixOperatorNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostfixOperatorNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostfixOperatorNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostfixOperatorNodeArchive));
  PrefixOperatorNodeArchive_descriptor_ = file->message_type(42);
  static const int PrefixOperatorNodeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrefixOperatorNodeArchive, super_),
  };
  PrefixOperatorNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrefixOperatorNodeArchive_descriptor_,
      PrefixOperatorNodeArchive::default_instance_,
      PrefixOperatorNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrefixOperatorNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrefixOperatorNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrefixOperatorNodeArchive));
  FunctionNodeArchive_descriptor_ = file->message_type(43);
  static const int FunctionNodeArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionNodeArchive, functionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionNodeArchive, invalidfunctionname_),
  };
  FunctionNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionNodeArchive_descriptor_,
      FunctionNodeArchive::default_instance_,
      FunctionNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionNodeArchive));
  FunctionEndNodeArchive_descriptor_ = file->message_type(44);
  static const int FunctionEndNodeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionEndNodeArchive, super_),
  };
  FunctionEndNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionEndNodeArchive_descriptor_,
      FunctionEndNodeArchive::default_instance_,
      FunctionEndNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionEndNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionEndNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionEndNodeArchive));
  DateNodeArchive_descriptor_ = file->message_type(45);
  static const int DateNodeArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateNodeArchive, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateNodeArchive, format_),
  };
  DateNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DateNodeArchive_descriptor_,
      DateNodeArchive::default_instance_,
      DateNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DateNodeArchive));
  ReferenceNodeArchive_descriptor_ = file->message_type(46);
  static const int ReferenceNodeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceNodeArchive, rangereference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceNodeArchive, stickybits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceNodeArchive, hosttableid_),
  };
  ReferenceNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceNodeArchive_descriptor_,
      ReferenceNodeArchive::default_instance_,
      ReferenceNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceNodeArchive));
  DurationNodeArchive_descriptor_ = file->message_type(47);
  static const int DurationNodeArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationNodeArchive, timeinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationNodeArchive, smallest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationNodeArchive, largest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationNodeArchive, style_),
  };
  DurationNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DurationNodeArchive_descriptor_,
      DurationNodeArchive::default_instance_,
      DurationNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DurationNodeArchive));
  ArgumentPlaceholderNodeArchive_descriptor_ = file->message_type(48);
  static const int ArgumentPlaceholderNodeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, functionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, argumentindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, mode_),
  };
  ArgumentPlaceholderNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArgumentPlaceholderNodeArchive_descriptor_,
      ArgumentPlaceholderNodeArchive::default_instance_,
      ArgumentPlaceholderNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArgumentPlaceholderNodeArchive));
  EmptyExpressionNodeArchive_descriptor_ = file->message_type(49);
  static const int EmptyExpressionNodeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyExpressionNodeArchive, super_),
  };
  EmptyExpressionNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyExpressionNodeArchive_descriptor_,
      EmptyExpressionNodeArchive::default_instance_,
      EmptyExpressionNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyExpressionNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyExpressionNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyExpressionNodeArchive));
  LayoutHintArchive_descriptor_ = file->message_type(50);
  static const int LayoutHintArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, cellrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, hintid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, maximumsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, partitionposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, effectivesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, partitioningpass_),
  };
  LayoutHintArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayoutHintArchive_descriptor_,
      LayoutHintArchive::default_instance_,
      LayoutHintArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutHintArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayoutHintArchive));
  CompletionTokenAttachmentArchive_descriptor_ = file->message_type(51);
  static const int CompletionTokenAttachmentArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletionTokenAttachmentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletionTokenAttachmentArchive, completiontext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletionTokenAttachmentArchive, caretposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletionTokenAttachmentArchive, prefixstart_),
  };
  CompletionTokenAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompletionTokenAttachmentArchive_descriptor_,
      CompletionTokenAttachmentArchive::default_instance_,
      CompletionTokenAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletionTokenAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompletionTokenAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompletionTokenAttachmentArchive));
  HiddenStateFormulaOwnerArchive_descriptor_ = file->message_type(52);
  static const int HiddenStateFormulaOwnerArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, threshold_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, needs_to_update_filter_set_for_import_),
  };
  HiddenStateFormulaOwnerArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HiddenStateFormulaOwnerArchive_descriptor_,
      HiddenStateFormulaOwnerArchive::default_instance_,
      HiddenStateFormulaOwnerArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HiddenStateFormulaOwnerArchive));
  RichTextPayloadArchive_descriptor_ = file->message_type(53);
  static const int RichTextPayloadArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextPayloadArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextPayloadArchive, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextPayloadArchive, cellid_),
  };
  RichTextPayloadArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RichTextPayloadArchive_descriptor_,
      RichTextPayloadArchive::default_instance_,
      RichTextPayloadArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextPayloadArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichTextPayloadArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RichTextPayloadArchive));
  FormulaEqualsTokenAttachmentArchive_descriptor_ = file->message_type(54);
  static const int FormulaEqualsTokenAttachmentArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEqualsTokenAttachmentArchive, super_),
  };
  FormulaEqualsTokenAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaEqualsTokenAttachmentArchive_descriptor_,
      FormulaEqualsTokenAttachmentArchive::default_instance_,
      FormulaEqualsTokenAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEqualsTokenAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEqualsTokenAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaEqualsTokenAttachmentArchive));
  CellRegion_descriptor_ = file->message_type(55);
  static const int CellRegion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRegion, cell_ranges_),
  };
  CellRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellRegion_descriptor_,
      CellRegion::default_instance_,
      CellRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellRegion));
  CellType_descriptor_ = file->enum_type(0);
  CellValueType_descriptor_ = file->enum_type(1);
  SelectionTypeArchive_descriptor_ = file->enum_type(2);
  FillDirectionArchive_descriptor_ = file->enum_type(3);
  MergeActionArchive_descriptor_ = file->enum_type(4);
  HideShowActionArchive_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSTArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellID_descriptor_, &CellID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableSize_descriptor_, &TableSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellRange_descriptor_, &CellRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableSelection_descriptor_, &TableSelection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TileRowInfo_descriptor_, &TileRowInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_descriptor_, &Tile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TileStorage_descriptor_, &TileStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TileStorage_Tile_descriptor_, &TileStorage_Tile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopUpMenuModel_descriptor_, &PopUpMenuModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopUpMenuModel_CellValue_descriptor_, &PopUpMenuModel_CellValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableDataList_descriptor_, &TableDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableDataList_ListEntry_descriptor_, &TableDataList_ListEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableRBTree_descriptor_, &TableRBTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableRBTree_Node_descriptor_, &TableRBTree_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeaderStorageBucket_descriptor_, &HeaderStorageBucket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeaderStorageBucket_Header_descriptor_, &HeaderStorageBucket_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeaderStorage_descriptor_, &HeaderStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataStore_descriptor_, &DataStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableInfoArchive_descriptor_, &TableInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditingStateArchive_descriptor_, &EditingStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPTableInfoArchive_descriptor_, &WPTableInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableStyleNetworkArchive_descriptor_, &TableStyleNetworkArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableModelArchive_descriptor_, &TableModelArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DurationWrapperArchive_descriptor_, &DurationWrapperArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cell_descriptor_, &Cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MergeRegionMapArchive_descriptor_, &MergeRegionMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellMapArchive_descriptor_, &CellMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellMapArchive_CellMapEntry_descriptor_, &CellMapArchive_CellMapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleStyleMapArchive_descriptor_, &DoubleStyleMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleStyleMapArchive_DoubleStyleMapEntryArchive_descriptor_, &DoubleStyleMapArchive_DoubleStyleMapEntryArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleTableMapArchive_descriptor_, &StyleTableMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleTableMapArchive_StyleTableMapEntryArchive_descriptor_, &StyleTableMapArchive_StyleTableMapEntryArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectionArchive_descriptor_, &SelectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterRuleArchive_descriptor_, &FilterRuleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableStyleArchive_descriptor_, &TableStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellStyleArchive_descriptor_, &CellStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaPredicateArchive_descriptor_, &FormulaPredicateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConditionalStyleSetArchive_descriptor_, &ConditionalStyleSetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConditionalStyleSetArchive_ConditionalStyleRule_descriptor_, &ConditionalStyleSetArchive_ConditionalStyleRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterSetArchive_descriptor_, &FilterSetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenAttachmentArchive_descriptor_, &TokenAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaArchive_descriptor_, &FormulaArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressionNodeArchive_descriptor_, &ExpressionNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BooleanNodeArchive_descriptor_, &BooleanNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumberNodeArchive_descriptor_, &NumberNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringNodeArchive_descriptor_, &StringNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdentifierNodeArchive_descriptor_, &IdentifierNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayNodeArchive_descriptor_, &ArrayNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListNodeArchive_descriptor_, &ListNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperatorNodeArchive_descriptor_, &OperatorNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostfixOperatorNodeArchive_descriptor_, &PostfixOperatorNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrefixOperatorNodeArchive_descriptor_, &PrefixOperatorNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionNodeArchive_descriptor_, &FunctionNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionEndNodeArchive_descriptor_, &FunctionEndNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DateNodeArchive_descriptor_, &DateNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceNodeArchive_descriptor_, &ReferenceNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DurationNodeArchive_descriptor_, &DurationNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArgumentPlaceholderNodeArchive_descriptor_, &ArgumentPlaceholderNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyExpressionNodeArchive_descriptor_, &EmptyExpressionNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayoutHintArchive_descriptor_, &LayoutHintArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompletionTokenAttachmentArchive_descriptor_, &CompletionTokenAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HiddenStateFormulaOwnerArchive_descriptor_, &HiddenStateFormulaOwnerArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RichTextPayloadArchive_descriptor_, &RichTextPayloadArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaEqualsTokenAttachmentArchive_descriptor_, &FormulaEqualsTokenAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellRegion_descriptor_, &CellRegion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSTArchives_2eproto() {
  delete CellID::default_instance_;
  delete CellID_reflection_;
  delete TableSize::default_instance_;
  delete TableSize_reflection_;
  delete CellRange::default_instance_;
  delete CellRange_reflection_;
  delete TableSelection::default_instance_;
  delete TableSelection_reflection_;
  delete TileRowInfo::default_instance_;
  delete TileRowInfo_reflection_;
  delete Tile::default_instance_;
  delete Tile_reflection_;
  delete TileStorage::default_instance_;
  delete TileStorage_reflection_;
  delete TileStorage_Tile::default_instance_;
  delete TileStorage_Tile_reflection_;
  delete PopUpMenuModel::default_instance_;
  delete PopUpMenuModel_reflection_;
  delete PopUpMenuModel_CellValue::default_instance_;
  delete PopUpMenuModel_CellValue_reflection_;
  delete TableDataList::default_instance_;
  delete TableDataList_reflection_;
  delete TableDataList_ListEntry::default_instance_;
  delete TableDataList_ListEntry_reflection_;
  delete TableRBTree::default_instance_;
  delete TableRBTree_reflection_;
  delete TableRBTree_Node::default_instance_;
  delete TableRBTree_Node_reflection_;
  delete HeaderStorageBucket::default_instance_;
  delete HeaderStorageBucket_reflection_;
  delete HeaderStorageBucket_Header::default_instance_;
  delete HeaderStorageBucket_Header_reflection_;
  delete HeaderStorage::default_instance_;
  delete HeaderStorage_reflection_;
  delete DataStore::default_instance_;
  delete DataStore_reflection_;
  delete TableInfoArchive::default_instance_;
  delete TableInfoArchive_reflection_;
  delete EditingStateArchive::default_instance_;
  delete EditingStateArchive_reflection_;
  delete WPTableInfoArchive::default_instance_;
  delete WPTableInfoArchive_reflection_;
  delete TableStyleNetworkArchive::default_instance_;
  delete TableStyleNetworkArchive_reflection_;
  delete TableModelArchive::default_instance_;
  delete TableModelArchive_reflection_;
  delete DurationWrapperArchive::default_instance_;
  delete DurationWrapperArchive_reflection_;
  delete Cell::default_instance_;
  delete Cell_reflection_;
  delete MergeRegionMapArchive::default_instance_;
  delete MergeRegionMapArchive_reflection_;
  delete CellMapArchive::default_instance_;
  delete CellMapArchive_reflection_;
  delete CellMapArchive_CellMapEntry::default_instance_;
  delete CellMapArchive_CellMapEntry_reflection_;
  delete DoubleStyleMapArchive::default_instance_;
  delete DoubleStyleMapArchive_reflection_;
  delete DoubleStyleMapArchive_DoubleStyleMapEntryArchive::default_instance_;
  delete DoubleStyleMapArchive_DoubleStyleMapEntryArchive_reflection_;
  delete StyleTableMapArchive::default_instance_;
  delete StyleTableMapArchive_reflection_;
  delete StyleTableMapArchive_StyleTableMapEntryArchive::default_instance_;
  delete StyleTableMapArchive_StyleTableMapEntryArchive_reflection_;
  delete SelectionArchive::default_instance_;
  delete SelectionArchive_reflection_;
  delete FilterRuleArchive::default_instance_;
  delete FilterRuleArchive_reflection_;
  delete TableStyleArchive::default_instance_;
  delete TableStyleArchive_reflection_;
  delete CellStyleArchive::default_instance_;
  delete CellStyleArchive_reflection_;
  delete FormulaPredicateArchive::default_instance_;
  delete FormulaPredicateArchive_reflection_;
  delete ConditionalStyleSetArchive::default_instance_;
  delete ConditionalStyleSetArchive_reflection_;
  delete ConditionalStyleSetArchive_ConditionalStyleRule::default_instance_;
  delete ConditionalStyleSetArchive_ConditionalStyleRule_reflection_;
  delete FilterSetArchive::default_instance_;
  delete FilterSetArchive_reflection_;
  delete TokenAttachmentArchive::default_instance_;
  delete TokenAttachmentArchive_reflection_;
  delete FormulaArchive::default_instance_;
  delete FormulaArchive_reflection_;
  delete ExpressionNodeArchive::default_instance_;
  delete ExpressionNodeArchive_reflection_;
  delete BooleanNodeArchive::default_instance_;
  delete BooleanNodeArchive_reflection_;
  delete NumberNodeArchive::default_instance_;
  delete NumberNodeArchive_reflection_;
  delete StringNodeArchive::default_instance_;
  delete StringNodeArchive_reflection_;
  delete IdentifierNodeArchive::default_instance_;
  delete IdentifierNodeArchive_reflection_;
  delete ArrayNodeArchive::default_instance_;
  delete ArrayNodeArchive_reflection_;
  delete ListNodeArchive::default_instance_;
  delete ListNodeArchive_reflection_;
  delete OperatorNodeArchive::default_instance_;
  delete OperatorNodeArchive_reflection_;
  delete PostfixOperatorNodeArchive::default_instance_;
  delete PostfixOperatorNodeArchive_reflection_;
  delete PrefixOperatorNodeArchive::default_instance_;
  delete PrefixOperatorNodeArchive_reflection_;
  delete FunctionNodeArchive::default_instance_;
  delete FunctionNodeArchive_reflection_;
  delete FunctionEndNodeArchive::default_instance_;
  delete FunctionEndNodeArchive_reflection_;
  delete DateNodeArchive::default_instance_;
  delete DateNodeArchive_reflection_;
  delete ReferenceNodeArchive::default_instance_;
  delete ReferenceNodeArchive_reflection_;
  delete DurationNodeArchive::default_instance_;
  delete DurationNodeArchive_reflection_;
  delete ArgumentPlaceholderNodeArchive::default_instance_;
  delete ArgumentPlaceholderNodeArchive_reflection_;
  delete EmptyExpressionNodeArchive::default_instance_;
  delete EmptyExpressionNodeArchive_reflection_;
  delete LayoutHintArchive::default_instance_;
  delete LayoutHintArchive_reflection_;
  delete CompletionTokenAttachmentArchive::default_instance_;
  delete CompletionTokenAttachmentArchive_reflection_;
  delete HiddenStateFormulaOwnerArchive::default_instance_;
  delete HiddenStateFormulaOwnerArchive_reflection_;
  delete RichTextPayloadArchive::default_instance_;
  delete RichTextPayloadArchive_reflection_;
  delete FormulaEqualsTokenAttachmentArchive::default_instance_;
  delete FormulaEqualsTokenAttachmentArchive_reflection_;
  delete CellRegion::default_instance_;
  delete CellRegion_reflection_;
}

void protobuf_AddDesc_TSTArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSCE::protobuf_AddDesc_TSCEArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::TST::protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TSTArchives.proto\022\003TST\032\021TSPMessages.pr"
    "oto\032\021TSDArchives.proto\032\021TSKArchives.prot"
    "o\032\021TSSArchives.proto\032\022TSCEArchives.proto"
    "\032\022TSWPArchives.proto\032\037TSTStylePropertyAr"
    "chiving.proto\"\034\n\006CellID\022\022\n\npackedData\030\001 "
    "\002(\007\"\037\n\tTableSize\022\022\n\npackedData\030\001 \002(\007\"F\n\t"
    "CellRange\022\033\n\006origin\030\001 \002(\0132\013.TST.CellID\022\034"
    "\n\004size\030\002 \002(\0132\016.TST.TableSize\"\261\001\n\016TableSe"
    "lection\022!\n\tcellRange\030\001 \002(\0132\016.TST.CellRan"
    "ge\022)\n\021extendedCellRange\030\002 \002(\0132\016.TST.Cell"
    "Range\022\036\n\026extendedCellRangeValid\030\003 \002(\010\0221\n"
    "\016selection_type\030\004 \002(\0162\031.TST.SelectionTyp"
    "eArchive\"\177\n\013TileRowInfo\022\027\n\017storage_versi"
    "on\030\005 \001(\r\022\024\n\014tileRowIndex\030\001 \002(\r\022\021\n\tcellCo"
    "unt\030\002 \002(\r\022\031\n\021cellStorageBuffer\030\003 \002(\014\022\023\n\013"
    "cellOffsets\030\004 \002(\014\"\211\001\n\004Tile\022\021\n\tmaxColumn\030"
    "\001 \002(\r\022\016\n\006maxRow\030\002 \002(\r\022\020\n\010numCells\030\003 \002(\r\022"
    "\017\n\007numrows\030\004 \002(\r\022\027\n\017storage_version\030\006 \001("
    "\r\022\"\n\010rowInfos\030\005 \003(\0132\020.TST.TileRowInfo\"i\n"
    "\013TileStorage\022$\n\005tiles\030\001 \003(\0132\025.TST.TileSt"
    "orage.Tile\0324\n\004Tile\022\016\n\006tileid\030\001 \002(\r\022\034\n\004ti"
    "le\030\002 \002(\0132\016.TSP.Reference\"\346\003\n\016PopUpMenuMo"
    "del\022/\n\004item\030\001 \003(\0132\035.TST.PopUpMenuModel.C"
    "ellValueB\002\030\001\022)\n\ttsce_item\030\002 \003(\0132\026.TSCE.C"
    "ellValueArchive\032\225\002\n\tCellValue\022:\n\017cell_va"
    "lue_type\030\001 \002(\0162!.TST.PopUpMenuModel.Cell"
    "ValueType\0224\n\rboolean_value\030\002 \001(\0132\035.TSCE."
    "BooleanCellValueArchive\022.\n\ndate_value\030\003 "
    "\001(\0132\032.TSCE.DateCellValueArchive\0222\n\014numbe"
    "r_value\030\004 \001(\0132\034.TSCE.NumberCellValueArch"
    "ive\0222\n\014string_value\030\005 \001(\0132\034.TSCE.StringC"
    "ellValueArchive\"`\n\rCellValueType\022\014\n\010NIL_"
    "TYPE\020\001\022\020\n\014BOOLEAN_TYPE\020\002\022\r\n\tDATE_TYPE\020\003\022"
    "\017\n\013NUMBER_TYPE\020\004\022\017\n\013STRING_TYPE\020\005\"\234\005\n\rTa"
    "bleDataList\022-\n\010listType\030\001 \001(\0162\033.TST.Tabl"
    "eDataList.ListType\022\022\n\nnextListID\030\002 \002(\r\022-"
    "\n\007entries\030\003 \003(\0132\034.TST.TableDataList.List"
    "Entry\032\321\002\n\tListEntry\022\013\n\003key\030\001 \002(\r\022\020\n\010refc"
    "ount\030\002 \002(\r\022\016\n\006string\030\003 \001(\t\022!\n\treference\030"
    "\004 \001(\0132\016.TSP.Reference\022%\n\007formula\030\005 \001(\0132\024"
    ".TSCE.FormulaArchive\022(\n\006format\030\006 \001(\0132\030.T"
    "SK.FormatStructArchive\022\036\n\006region\030\007 \001(\0132\016"
    ".TST.CellRange\022/\n\rcustom_format\030\010 \001(\0132\030."
    "TSK.CustomFormatArchive\022\'\n\017richTextPaylo"
    "ad\030\t \001(\0132\016.TSP.Reference\022\'\n\017comment_stor"
    "age\030\n \001(\0132\016.TSP.Reference\"\304\001\n\010ListType\022\n"
    "\n\006STRING\020\001\022\n\n\006FORMAT\020\002\022\013\n\007FORMULA\020\003\022\t\n\005S"
    "TYLE\020\004\022\021\n\rFORMULA_ERROR\020\005\022\021\n\rCUSTOM_FORM"
    "AT\020\006\022\037\n\033MULTIPLE_CHOICE_LIST_FORMAT\020\007\022\025\n"
    "\021RICH_TEXT_PAYLOAD\020\010\022\025\n\021CONDITIONAL_STYL"
    "E\020\t\022\023\n\017COMMENT_STORAGE\020\n\"W\n\013TableRBTree\022"
    "$\n\005nodes\030\001 \003(\0132\025.TST.TableRBTree.Node\032\"\n"
    "\004Node\022\013\n\003key\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"\377\001\n\023He"
    "aderStorageBucket\022\032\n\022bucketHashFunction\030"
    "\001 \002(\r\0220\n\007headers\030\002 \003(\0132\037.TST.HeaderStora"
    "geBucket.Header\032\231\001\n\006Header\022\r\n\005index\030\001 \002("
    "\r\022\014\n\004size\030\002 \002(\002\022\023\n\013hidingState\030\003 \002(\r\022\025\n\r"
    "numberOfCells\030\004 \002(\r\022\"\n\ncell_style\030\005 \001(\0132"
    "\016.TSP.Reference\022\"\n\ntext_style\030\006 \001(\0132\016.TS"
    "P.Reference\"L\n\rHeaderStorage\022\032\n\022bucketHa"
    "shFunction\030\001 \002(\r\022\037\n\007buckets\030\002 \003(\0132\016.TSP."
    "Reference\"\355\005\n\tDataStore\022&\n\nrowHeaders\030\001 "
    "\002(\0132\022.TST.HeaderStorage\022%\n\rcolumnHeaders"
    "\030\002 \002(\0132\016.TSP.Reference\022\037\n\005tiles\030\003 \002(\0132\020."
    "TST.TileStorage\022#\n\013stringTable\030\004 \002(\0132\016.T"
    "SP.Reference\022\"\n\nstyleTable\030\005 \002(\0132\016.TSP.R"
    "eference\022$\n\014formulaTable\030\006 \002(\0132\016.TSP.Ref"
    "erence\022)\n\021formulaErrorTable\030\014 \001(\0132\016.TSP."
    "Reference\022#\n\013formatTable\030\013 \002(\0132\016.TSP.Ref"
    "erence\0225\n\035multipleChoiceListFormatTable\030"
    "\020 \001(\0132\016.TSP.Reference\022(\n\020merge_region_ma"
    "p\030\r \001(\0132\016.TSP.Reference\022)\n\021customFormatT"
    "able\030\017 \001(\0132\016.TSP.Reference\022\026\n\016nextRowStr"
    "ipID\030\007 \002(\r\022\031\n\021nextColumnStripID\030\010 \002(\r\022%\n"
    "\013rowTileTree\030\t \002(\0132\020.TST.TableRBTree\022(\n\016"
    "columnTileTree\030\n \002(\0132\020.TST.TableRBTree\022\027"
    "\n\017storage_version\030\016 \001(\r\022,\n\024richTextPaylo"
    "adTable\030\021 \001(\0132\016.TSP.Reference\022-\n\025conditi"
    "onalstyletable\030\022 \001(\0132\016.TSP.Reference\022+\n\023"
    "commentStorageTable\030\023 \001(\0132\016.TSP.Referenc"
    "e\"\201\001\n\020TableInfoArchive\022#\n\005super\030\001 \002(\0132\024."
    "TSD.DrawableArchive\022\"\n\ntableModel\030\002 \002(\0132"
    "\016.TSP.Reference\022$\n\014editingState\030\003 \001(\0132\016."
    "TSP.Reference\"\310\002\n\023EditingStateArchive\022&\n"
    "\016editingStorage\030\001 \001(\0132\016.TSP.Reference\022\036\n"
    "\013editingCell\030\002 \002(\0132\t.TST.Cell\022(\n\tselecti"
    "on\030\003 \001(\0132\025.TST.SelectionArchive\022&\n\021laste"
    "ditingcellid\030\004 \001(\0132\013.TST.CellID\022\"\n\rediti"
    "ngcellid\030\005 \001(\0132\013.TST.CellID\022G\n(deprecate"
    "d_setup_textUndoRedoTransaction\030\006 \001(\0132\025."
    "TSWP.UndoTransaction\022*\n\"cell_was_edited_"
    "in_current_session\030\007 \001(\010\"[\n\022WPTableInfoA"
    "rchive\022$\n\005super\030\001 \002(\0132\025.TST.TableInfoArc"
    "hive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Reference\"\222\004"
    "\n\030TableStyleNetworkArchive\022#\n\013table_styl"
    "e\030\t \002(\0132\016.TSP.Reference\022\'\n\017body_text_sty"
    "le\030\001 \002(\0132\016.TSP.Reference\022-\n\025header_row_t"
    "ext_style\030\002 \002(\0132\016.TSP.Reference\0220\n\030heade"
    "r_column_text_style\030\003 \002(\0132\016.TSP.Referenc"
    "e\022-\n\025footer_row_text_style\030\004 \002(\0132\016.TSP.R"
    "eference\022\'\n\017body_cell_style\030\005 \002(\0132\016.TSP."
    "Reference\022(\n\020header_row_style\030\006 \002(\0132\016.TS"
    "P.Reference\022+\n\023header_column_style\030\007 \002(\013"
    "2\016.TSP.Reference\022(\n\020footer_row_style\030\010 \002"
    "(\0132\016.TSP.Reference\022(\n\020table_name_style\030\n"
    " \001(\0132\016.TSP.Reference\022.\n\026table_name_shape"
    "_style\030\013 \001(\0132\016.TSP.Reference\022\024\n\014preset_i"
    "ndex\030\014 \001(\r\"\230\014\n\021TableModelArchive\022\020\n\010tabl"
    "e_id\030\001 \002(\t\022\025\n\rfrom_table_id\030+ \001(\t\022#\n\013tab"
    "le_style\030\003 \002(\0132\016.TSP.Reference\022\'\n\017body_t"
    "ext_style\030\030 \002(\0132\016.TSP.Reference\022-\n\025heade"
    "r_row_text_style\030\031 \002(\0132\016.TSP.Reference\0220"
    "\n\030header_column_text_style\030\032 \002(\0132\016.TSP.R"
    "eference\022-\n\025footer_row_text_style\030\033 \002(\0132"
    "\016.TSP.Reference\022\'\n\017body_cell_style\030\022 \002(\013"
    "2\016.TSP.Reference\022(\n\020header_row_style\030\023 \002"
    "(\0132\016.TSP.Reference\022+\n\023header_column_styl"
    "e\030\024 \002(\0132\016.TSP.Reference\022(\n\020footer_row_st"
    "yle\030\025 \002(\0132\016.TSP.Reference\022(\n\020table_name_"
    "style\030\036 \001(\0132\016.TSP.Reference\022.\n\026table_nam"
    "e_shape_style\030$ \001(\0132\016.TSP.Reference\022\"\n\nd"
    "ata_store\030\004 \002(\0132\016.TST.DataStore\022 \n\010provi"
    "der\030\005 \001(\0132\016.TSP.Reference\022\026\n\016number_of_r"
    "ows\030\006 \002(\r\022\031\n\021number_of_columns\030\007 \002(\r\022\022\n\n"
    "table_name\030\010 \002(\t\022\032\n\022table_name_enabled\030\026"
    " \001(\010\022\031\n\021table_name_height\030! \001(\001\022!\n\031table"
    "_name_border_enabled\030% \001(\010\022\035\n\025number_of_"
    "header_rows\030\t \001(\r\022 \n\030number_of_header_co"
    "lumns\030\n \001(\r\022\035\n\025number_of_footer_rows\030\013 \001"
    "(\r\022\032\n\022header_rows_frozen\030\014 \001(\010\022\035\n\025header"
    "_columns_frozen\030\r \001(\010\022\035\n\025number_of_hidde"
    "n_rows\030\016 \001(\r\022 \n\030number_of_hidden_columns"
    "\030\017 \001(\r\022\"\n\032number_of_user_hidden_rows\030) \001"
    "(\r\022%\n\035number_of_user_hidden_columns\030* \001("
    "\r\022\037\n\027number_of_filtered_rows\030( \001(\r\022\032\n\022de"
    "fault_row_height\030\020 \002(\001\022\034\n\024default_column"
    "_width\030\021 \002(\001\022&\n\rorigin_offset\030\027 \001(\0132\013.TS"
    "T.CellIDB\002\030\001\022\024\n\014preset_index\030\034 \002(\r\022%\n\035re"
    "peating_header_rows_enabled\030\035 \001(\010\022(\n rep"
    "eating_header_columns_enabled\030  \001(\010\022\036\n\026s"
    "tyle_apply_clears_all\030\037 \001(\010\022>\n&hidden_st"
    "ate_formula_owner_for_columns\030\" \001(\0132\016.TS"
    "P.Reference\022;\n#hidden_state_formula_owne"
    "r_for_rows\030# \001(\0132\016.TSP.Reference\022\"\n\nfilt"
    "er_set\030& \001(\0132\016.TSP.Reference\022\?\n\"conditio"
    "nal_style_formula_owner_id\030\' \001(\0132\023.TSCE."
    "CFUUIDArchive\"\030\n\026DurationWrapperArchive\""
    "\272\007\n\004Cell\022%\n\tvalueType\030\002 \002(\0162\022.TST.CellVa"
    "lueType\022\023\n\013numberValue\030\005 \001(\001\022\023\n\013stringVa"
    "lue\030\006 \001(\t\022\021\n\tboolValue\030\007 \001(\010\022\"\n\ncell_sty"
    "le\030\003 \001(\0132\016.TSP.Reference\022\"\n\ntext_style\030\004"
    " \001(\0132\016.TSP.Reference\022%\n\007formula\030\010 \001(\0132\024."
    "TSCE.FormulaArchive\022$\n\014formulaError\030\n \001("
    "\0132\016.TSP.Reference\0220\n\016current_format\030\t \001("
    "\0132\030.TSK.FormatStructArchive\022/\n\rnumber_fo"
    "rmat\030\013 \001(\0132\030.TSK.FormatStructArchive\0221\n\017"
    "currency_format\030\014 \001(\0132\030.TSK.FormatStruct"
    "Archive\0221\n\017duration_format\030\r \001(\0132\030.TSK.F"
    "ormatStructArchive\022-\n\013date_format\030\016 \001(\0132"
    "\030.TSK.FormatStructArchive\0220\n\016control_for"
    "mat\030\017 \001(\0132\030.TSK.FormatStructArchive\022/\n\rc"
    "ustom_format\030\020 \001(\0132\030.TSK.FormatStructArc"
    "hive\022-\n\013base_format\030\021 \001(\0132\030.TSK.FormatSt"
    "ructArchive\022=\n\033multiple_choice_list_form"
    "at\030\022 \001(\0132\030.TSK.FormatStructArchive\022\035\n\025ex"
    "plicit_format_flags\030\023 \001(\r\022\'\n\017richTextPay"
    "load\030\024 \001(\0132\016.TSP.Reference\022)\n\021conditiona"
    "l_style\030\025 \001(\0132\016.TSP.Reference\022,\n\024multipl"
    "e_choice_list\030\026 \001(\0132\016.TSP.Reference\022\'\n\017c"
    "omment_storage\030\027 \001(\0132\016.TSP.Reference\022&\n\036"
    "conditional_style_applied_rule\030\030 \001(\r\";\n\025"
    "MergeRegionMapArchive\022\"\n\ncell_range\030\001 \003("
    "\0132\016.TST.CellRange\"\265\002\n\016CellMapArchive\022\020\n\010"
    "capacity\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\0226\n\014cellMap"
    "Entry\030\003 \003(\0132 .TST.CellMapArchive.CellMap"
    "Entry\022*\n\034may_modify_formulas_in_cells\030\004 "
    "\001(\010:\004true\0226\n(may_modify_values_reference"
    "d_by_formulas\030\005 \001(\010:\004true\022 \n\021applies_to_"
    "hidden\030\006 \001(\010:\005false\032D\n\014CellMapEntry\022\033\n\006c"
    "ellID\030\001 \002(\0132\013.TST.CellID\022\027\n\004cell\030\002 \001(\0132\t"
    ".TST.Cell\"\212\002\n\025DoubleStyleMapArchive\022\020\n\010c"
    "apacity\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022M\n\016cell_map"
    "_entry\030\003 \003(\01325.TST.DoubleStyleMapArchive"
    ".DoubleStyleMapEntryArchive\032\200\001\n\032DoubleSt"
    "yleMapEntryArchive\022\034\n\007cell_id\030\001 \002(\0132\013.TS"
    "T.CellID\022!\n\told_style\030\002 \002(\0132\016.TSP.Refere"
    "nce\022!\n\tnew_style\030\003 \002(\0132\016.TSP.Reference\"\357"
    "\001\n\024StyleTableMapArchive\022\020\n\010capacity\030\001 \002("
    "\r\022\r\n\005count\030\002 \002(\r\022F\n\tmap_entry\030\003 \003(\01323.TS"
    "T.StyleTableMapArchive.StyleTableMapEntr"
    "yArchive\032n\n\031StyleTableMapEntryArchive\022\013\n"
    "\003key\030\001 \002(\r\022!\n\told_style\030\002 \002(\0132\016.TSP.Refe"
    "rence\022!\n\tnew_style\030\003 \002(\0132\016.TSP.Reference"
    "\"\373\001\n\020SelectionArchive\022&\n\ntableModel\030\001 \001("
    "\0132\016.TSP.ReferenceB\002\030\001\0221\n\016selection_type\030"
    "\004 \002(\0162\031.TST.SelectionTypeArchive\022 \n\013anch"
    "or_cell\030\005 \001(\0132\013.TST.CellID\022#\n\013cell_range"
    "s\030\006 \003(\0132\016.TST.CellRange\022#\n\013base_ranges\030\007"
    " \003(\0132\016.TST.CellRange\022 \n\013cursor_cell\030\010 \001("
    "\0132\013.TST.CellID\"V\n\021FilterRuleArchive\022/\n\tp"
    "redicate\030\001 \002(\0132\034.TST.FormulaPredicateArc"
    "hive\022\020\n\010disabled\030\002 \001(\010\"\214\001\n\021TableStyleArc"
    "hive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022\031"
    "\n\016override_count\030\n \001(\r:\0010\022:\n\020table_prope"
    "rties\030\013 \001(\0132 .TST.TableStylePropertiesAr"
    "chive\"\211\001\n\020CellStyleArchive\022 \n\005super\030\001 \002("
    "\0132\021.TSS.StyleArchive\022\031\n\016override_count\030\n"
    " \001(\r:\0010\0228\n\017cell_properties\030\013 \001(\0132\037.TST.C"
    "ellStylePropertiesArchive\"\342\013\n\027FormulaPre"
    "dicateArchive\022%\n\007formula\030\001 \002(\0132\024.TSCE.Fo"
    "rmulaArchive\022I\n\016predicate_type\030\002 \002(\01621.T"
    "ST.FormulaPredicateArchive.FormulaPredic"
    "ateType\022>\n\nqualifier1\030\003 \002(\0162*.TST.Formul"
    "aPredicateArchive.QualifierType\022>\n\nquali"
    "fier2\030\004 \002(\0162*.TST.FormulaPredicateArchiv"
    "e.QualifierType\022\024\n\014param_index1\030\005 \002(\005\022\024\n"
    "\014param_index2\030\006 \002(\005\022\024\n\014param_index0\030\007 \002("
    "\005\"\211\010\n\024FormulaPredicateType\022\014\n\010PredNone\020\000"
    "\022\022\n\016TextStartsWith\020\001\022\020\n\014TextEndsWith\020\002\022\020"
    "\n\014TextContains\020\003\022\026\n\022TextDoesNotContain\020\004"
    "\022\016\n\nValueEqual\020\005\022\021\n\rValueNotEqual\020\006\022\024\n\020V"
    "alueGreaterThan\020\007\022\033\n\027ValueGreaterThanOrE"
    "qual\020\010\022\021\n\rValueLessThan\020\t\022\030\n\024ValueLessTh"
    "anOrEqual\020\n\022\025\n\021ValueAboveAverage\020\013\022\025\n\021Va"
    "lueBelowAverage\020\014\022\020\n\014ValueBetween\020\r\022\013\n\007F"
    "ormula\020\016\022\016\n\nDuplicates\020\017\022\013\n\007Uniques\020\020\022\017\n"
    "\013DateIsToday\020\021\022\023\n\017DateIsYesterday\020\022\022\022\n\016D"
    "ateIsTomorrow\020\023\022\021\n\rDateIsTheDate\020\024\022\025\n\021Da"
    "teBeforeTheDate\020\025\022\024\n\020DateAfterTheDate\020\026\022"
    "\024\n\020DateIsInTheRange\020\027\022\021\n\rDateInTheNext\020\030"
    "\022\021\n\rDateInTheLast\020\031\022\021\n\rDateIsExactly\020\032\022\026"
    "\n\022DateBeforeRelative\020\033\022\025\n\021DateAfterRelat"
    "ive\020\034\022\027\n\023DateBetweenRelative\020\035\022\014\n\010ValueT"
    "op\020\036\022\017\n\013ValueBottom\020\037\022\023\n\017ValueNotBetween"
    "\020 \022\016\n\nDateInThis\020!\022\013\n\007IsBlank\020\"\022\016\n\nIsNot"
    "Blank\020#\022\n\n\006TextIs\020$\022\r\n\tTextIsNot\020%\022\021\n\rDu"
    "rationEqual\020&\022\024\n\020DurationNotEqual\020\'\022\027\n\023D"
    "urationGreaterThan\020(\022\036\n\032DurationGreaterT"
    "hanOrEqual\020)\022\024\n\020DurationLessThan\020*\022\033\n\027Du"
    "rationLessThanOrEqual\020+\022\023\n\017DurationBetwe"
    "en\020,\022\026\n\022DurationNotBetween\020-\022\030\n\024Duration"
    "AboveAverage\020.\022\030\n\024DurationBelowAverage\020/"
    "\022\017\n\013DurationTop\0200\022\022\n\016DurationBottom\0201\"\206\001"
    "\n\rQualifierType\022\014\n\010QualNone\020\000\022\010\n\004Days\020\002\022"
    "\t\n\005Weeks\020\003\022\n\n\006Months\020\004\022\t\n\005Years\020\005\022\007\n\003Ago"
    "\020\006\022\013\n\007FromNow\020\007\022\014\n\010Quarters\020\010\022\013\n\007Percent"
    "\020\t\022\n\n\006Values\020\n\"\243\002\n\032ConditionalStyleSetAr"
    "chive\022\021\n\truleCount\030\001 \002(\r\022C\n\005rules\030\002 \003(\0132"
    "4.TST.ConditionalStyleSetArchive.Conditi"
    "onalStyleRule\022\033\n\006cellID\030\003 \001(\0132\013.TST.Cell"
    "ID\032\217\001\n\024ConditionalStyleRule\022/\n\tpredicate"
    "\030\001 \002(\0132\034.TST.FormulaPredicateArchive\022\"\n\n"
    "cell_style\030\002 \002(\0132\016.TSP.Reference\022\"\n\ntext"
    "_style\030\003 \002(\0132\016.TSP.Reference\"\322\002\n\020FilterS"
    "etArchive\022J\n\004type\030\001 \001(\0162#.TST.FilterSetA"
    "rchive.FilterSetType:\027FilterSetArchiveTy"
    "peAll\022\030\n\nis_enabled\030\002 \001(\010:\004true\022,\n\014filte"
    "r_rules\030\003 \003(\0132\026.TST.FilterRuleArchive\022/\n"
    " needs_formula_rewrite_for_import\030\004 \001(\010:"
    "\005false\022\026\n\016filter_offsets\030\005 \003(\r\022\026\n\016filter"
    "_enabled\030\006 \003(\010\"I\n\rFilterSetType\022\033\n\027Filte"
    "rSetArchiveTypeAll\020\000\022\033\n\027FilterSetArchive"
    "TypeAny\020\001\"l\n\026TokenAttachmentArchive\022*\n\005s"
    "uper\030\001 \002(\0132\033.TSWP.UIGraphicalAttachment\022"
    "&\n\016expressionNode\030\002 \001(\0132\016.TSP.Reference\""
    "8\n\016FormulaArchive\022&\n\016expressionTree\030\001 \001("
    "\0132\016.TSP.Reference\"h\n\025ExpressionNodeArchi"
    "ve\022 \n\010children\030\001 \003(\0132\016.TSP.Reference\022\026\n\013"
    "first_index\030\002 \001(\004:\0010\022\025\n\nlast_index\030\003 \001(\004"
    ":\0010\"N\n\022BooleanNodeArchive\022)\n\005super\030\001 \002(\013"
    "2\032.TST.ExpressionNodeArchive\022\r\n\005value\030\002 "
    "\002(\010\"N\n\021NumberNodeArchive\022)\n\005super\030\001 \002(\0132"
    "\032.TST.ExpressionNodeArchive\022\016\n\006number\030\002 "
    "\002(\001\"M\n\021StringNodeArchive\022)\n\005super\030\001 \002(\0132"
    "\032.TST.ExpressionNodeArchive\022\r\n\005value\030\002 \002"
    "(\t\"V\n\025IdentifierNodeArchive\022)\n\005super\030\001 \002"
    "(\0132\032.TST.ExpressionNodeArchive\022\022\n\nidenti"
    "fier\030\002 \001(\t\"\\\n\020ArrayNodeArchive\022)\n\005super\030"
    "\001 \002(\0132\032.TST.ExpressionNodeArchive\022\017\n\007col"
    "umns\030\002 \001(\r\022\014\n\004rows\030\003 \001(\r\"<\n\017ListNodeArch"
    "ive\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionNodeA"
    "rchive\"V\n\023OperatorNodeArchive\022)\n\005super\030\001"
    " \002(\0132\032.TST.ExpressionNodeArchive\022\024\n\014oper"
    "atorChar\030\002 \002(\r\"E\n\032PostfixOperatorNodeArc"
    "hive\022\'\n\005super\030\001 \002(\0132\030.TST.OperatorNodeAr"
    "chive\"D\n\031PrefixOperatorNodeArchive\022\'\n\005su"
    "per\030\001 \002(\0132\030.TST.OperatorNodeArchive\"t\n\023F"
    "unctionNodeArchive\022)\n\005super\030\001 \002(\0132\032.TST."
    "ExpressionNodeArchive\022\025\n\rfunctionIndex\030\002"
    " \002(\r\022\033\n\023invalidFunctionName\030\003 \001(\t\"C\n\026Fun"
    "ctionEndNodeArchive\022)\n\005super\030\001 \002(\0132\032.TST"
    ".ExpressionNodeArchive\"[\n\017DateNodeArchiv"
    "e\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionNodeArc"
    "hive\022\r\n\005value\030\002 \002(\t\022\016\n\006format\030\003 \001(\t\"\237\001\n\024"
    "ReferenceNodeArchive\022)\n\005super\030\001 \002(\0132\032.TS"
    "T.ExpressionNodeArchive\0223\n\016rangeReferenc"
    "e\030\002 \002(\0132\033.TSCE.RangeReferenceArchive\022\022\n\n"
    "stickyBits\030\003 \002(\r\022\023\n\013hostTableID\030\004 \001(\t\"\210\001"
    "\n\023DurationNodeArchive\022)\n\005super\030\001 \002(\0132\032.T"
    "ST.ExpressionNodeArchive\022\024\n\014timeinterval"
    "\030\002 \002(\001\022\020\n\010smallest\030\003 \002(\r\022\017\n\007largest\030\004 \002("
    "\r\022\r\n\005style\030\005 \002(\r\"\207\001\n\036ArgumentPlaceholder"
    "NodeArchive\022)\n\005super\030\001 \002(\0132\032.TST.Express"
    "ionNodeArchive\022\025\n\rfunctionIndex\030\002 \002(\r\022\025\n"
    "\rargumentIndex\030\003 \002(\r\022\014\n\004mode\030\004 \001(\r\"G\n\032Em"
    "ptyExpressionNodeArchive\022)\n\005super\030\001 \002(\0132"
    "\032.TST.ExpressionNodeArchive\"\357\001\n\021LayoutHi"
    "ntArchive\022\017\n\007isValid\030\001 \002(\010\022!\n\tcellRange\030"
    "\002 \002(\0132\016.TST.CellRange\022\033\n\006hintID\030\003 \002(\0132\013."
    "TST.CellID\022\036\n\013maximumSize\030\004 \002(\0132\t.TSP.Si"
    "ze\022\031\n\021partitionPosition\030\005 \002(\r\022\022\n\nhorizon"
    "tal\030\006 \002(\010\022 \n\reffectiveSize\030\007 \001(\0132\t.TSP.S"
    "ize\022\030\n\020partitioningPass\030\010 \001(\r\"\222\001\n Comple"
    "tionTokenAttachmentArchive\022*\n\005super\030\001 \002("
    "\0132\033.TST.TokenAttachmentArchive\022\026\n\016comple"
    "tionText\030\002 \001(\t\022\025\n\rcaretPosition\030\003 \001(\r\022\023\n"
    "\013prefixStart\030\004 \001(\r\"\256\001\n\036HiddenStateFormul"
    "aOwnerArchive\022%\n\010owner_id\030\001 \001(\0132\023.TSCE.C"
    "FUUIDArchive\022/\n\017threshold_value\030\002 \003(\0132\026."
    "TSCE.CellValueArchive\0224\n%needs_to_update"
    "_filter_set_for_import\030\003 \001(\010:\005false\"q\n\026R"
    "ichTextPayloadArchive\022\037\n\007storage\030\001 \002(\0132\016"
    ".TSP.Reference\022\031\n\005range\030\002 \001(\0132\n.TSP.Rang"
    "e\022\033\n\006cellid\030\003 \002(\0132\013.TST.CellID\"Q\n#Formul"
    "aEqualsTokenAttachmentArchive\022*\n\005super\030\001"
    " \002(\0132\033.TSWP.UIGraphicalAttachment\"1\n\nCel"
    "lRegion\022#\n\013cell_ranges\030\001 \003(\0132\016.TST.CellR"
    "ange*\327\001\n\010CellType\022\023\n\017genericCellType\020\000\022\020"
    "\n\014spanCellType\020\001\022\022\n\016numberCellType\020\002\022\020\n\014"
    "textCellType\020\003\022\023\n\017formulaCellType\020\004\022\020\n\014d"
    "ateCellType\020\005\022\020\n\014boolCellType\020\006\022\024\n\020durat"
    "ionCellType\020\007\022\030\n\024formulaErrorCellType\020\010\022"
    "\025\n\021automaticCellType\020\t*\353\001\n\rCellValueType"
    "\022\026\n\022emptyCellValueType\020\000\022\027\n\023numberCellVa"
    "lueType\020\001\022\027\n\023stringCellValueType\020\002\022\031\n\025pr"
    "ovidedCellValueType\020\003\022\025\n\021dateCellValueTy"
    "pe\020\004\022\025\n\021boolCellValueType\020\005\022\031\n\025durationC"
    "ellValueType\020\006\022\026\n\022errorCellValueType\020\007\022\024"
    "\n\020richTextCellType\020\010*\256\001\n\024SelectionTypeAr"
    "chive\022\025\n\021cellSelectionType\020\000\022\024\n\020rowSelec"
    "tionType\020\001\022\027\n\023columnSelectionType\020\002\022\034\n\030c"
    "ellEditingSelectionType\020\003\022\032\n\026tableNameSe"
    "lectionType\020\004\022\026\n\022tableSelectionType\020\005*y\n"
    "\024FillDirectionArchive\022\027\n\023kTSTFillDownArc"
    "hive\020\001\022\025\n\021kTSTFillUpArchive\020\002\022\030\n\024kTSTFil"
    "lRightArchive\020\003\022\027\n\023kTSTFillLeftArchive\020\004"
    "*B\n\022MergeActionArchive\022\024\n\020mergeActionMer"
    "ge\020\000\022\026\n\022mergeActionUnmerge\020\001*G\n\025HideShow"
    "ActionArchive\022\026\n\022hideShowActionHide\020\000\022\026\n"
    "\022hideShowActionShow\020\001", 13981);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSTArchives.proto", &protobuf_RegisterTypes);
  CellID::default_instance_ = new CellID();
  TableSize::default_instance_ = new TableSize();
  CellRange::default_instance_ = new CellRange();
  TableSelection::default_instance_ = new TableSelection();
  TileRowInfo::default_instance_ = new TileRowInfo();
  Tile::default_instance_ = new Tile();
  TileStorage::default_instance_ = new TileStorage();
  TileStorage_Tile::default_instance_ = new TileStorage_Tile();
  PopUpMenuModel::default_instance_ = new PopUpMenuModel();
  PopUpMenuModel_CellValue::default_instance_ = new PopUpMenuModel_CellValue();
  TableDataList::default_instance_ = new TableDataList();
  TableDataList_ListEntry::default_instance_ = new TableDataList_ListEntry();
  TableRBTree::default_instance_ = new TableRBTree();
  TableRBTree_Node::default_instance_ = new TableRBTree_Node();
  HeaderStorageBucket::default_instance_ = new HeaderStorageBucket();
  HeaderStorageBucket_Header::default_instance_ = new HeaderStorageBucket_Header();
  HeaderStorage::default_instance_ = new HeaderStorage();
  DataStore::default_instance_ = new DataStore();
  TableInfoArchive::default_instance_ = new TableInfoArchive();
  EditingStateArchive::default_instance_ = new EditingStateArchive();
  WPTableInfoArchive::default_instance_ = new WPTableInfoArchive();
  TableStyleNetworkArchive::default_instance_ = new TableStyleNetworkArchive();
  TableModelArchive::default_instance_ = new TableModelArchive();
  DurationWrapperArchive::default_instance_ = new DurationWrapperArchive();
  Cell::default_instance_ = new Cell();
  MergeRegionMapArchive::default_instance_ = new MergeRegionMapArchive();
  CellMapArchive::default_instance_ = new CellMapArchive();
  CellMapArchive_CellMapEntry::default_instance_ = new CellMapArchive_CellMapEntry();
  DoubleStyleMapArchive::default_instance_ = new DoubleStyleMapArchive();
  DoubleStyleMapArchive_DoubleStyleMapEntryArchive::default_instance_ = new DoubleStyleMapArchive_DoubleStyleMapEntryArchive();
  StyleTableMapArchive::default_instance_ = new StyleTableMapArchive();
  StyleTableMapArchive_StyleTableMapEntryArchive::default_instance_ = new StyleTableMapArchive_StyleTableMapEntryArchive();
  SelectionArchive::default_instance_ = new SelectionArchive();
  FilterRuleArchive::default_instance_ = new FilterRuleArchive();
  TableStyleArchive::default_instance_ = new TableStyleArchive();
  CellStyleArchive::default_instance_ = new CellStyleArchive();
  FormulaPredicateArchive::default_instance_ = new FormulaPredicateArchive();
  ConditionalStyleSetArchive::default_instance_ = new ConditionalStyleSetArchive();
  ConditionalStyleSetArchive_ConditionalStyleRule::default_instance_ = new ConditionalStyleSetArchive_ConditionalStyleRule();
  FilterSetArchive::default_instance_ = new FilterSetArchive();
  TokenAttachmentArchive::default_instance_ = new TokenAttachmentArchive();
  FormulaArchive::default_instance_ = new FormulaArchive();
  ExpressionNodeArchive::default_instance_ = new ExpressionNodeArchive();
  BooleanNodeArchive::default_instance_ = new BooleanNodeArchive();
  NumberNodeArchive::default_instance_ = new NumberNodeArchive();
  StringNodeArchive::default_instance_ = new StringNodeArchive();
  IdentifierNodeArchive::default_instance_ = new IdentifierNodeArchive();
  ArrayNodeArchive::default_instance_ = new ArrayNodeArchive();
  ListNodeArchive::default_instance_ = new ListNodeArchive();
  OperatorNodeArchive::default_instance_ = new OperatorNodeArchive();
  PostfixOperatorNodeArchive::default_instance_ = new PostfixOperatorNodeArchive();
  PrefixOperatorNodeArchive::default_instance_ = new PrefixOperatorNodeArchive();
  FunctionNodeArchive::default_instance_ = new FunctionNodeArchive();
  FunctionEndNodeArchive::default_instance_ = new FunctionEndNodeArchive();
  DateNodeArchive::default_instance_ = new DateNodeArchive();
  ReferenceNodeArchive::default_instance_ = new ReferenceNodeArchive();
  DurationNodeArchive::default_instance_ = new DurationNodeArchive();
  ArgumentPlaceholderNodeArchive::default_instance_ = new ArgumentPlaceholderNodeArchive();
  EmptyExpressionNodeArchive::default_instance_ = new EmptyExpressionNodeArchive();
  LayoutHintArchive::default_instance_ = new LayoutHintArchive();
  CompletionTokenAttachmentArchive::default_instance_ = new CompletionTokenAttachmentArchive();
  HiddenStateFormulaOwnerArchive::default_instance_ = new HiddenStateFormulaOwnerArchive();
  RichTextPayloadArchive::default_instance_ = new RichTextPayloadArchive();
  FormulaEqualsTokenAttachmentArchive::default_instance_ = new FormulaEqualsTokenAttachmentArchive();
  CellRegion::default_instance_ = new CellRegion();
  CellID::default_instance_->InitAsDefaultInstance();
  TableSize::default_instance_->InitAsDefaultInstance();
  CellRange::default_instance_->InitAsDefaultInstance();
  TableSelection::default_instance_->InitAsDefaultInstance();
  TileRowInfo::default_instance_->InitAsDefaultInstance();
  Tile::default_instance_->InitAsDefaultInstance();
  TileStorage::default_instance_->InitAsDefaultInstance();
  TileStorage_Tile::default_instance_->InitAsDefaultInstance();
  PopUpMenuModel::default_instance_->InitAsDefaultInstance();
  PopUpMenuModel_CellValue::default_instance_->InitAsDefaultInstance();
  TableDataList::default_instance_->InitAsDefaultInstance();
  TableDataList_ListEntry::default_instance_->InitAsDefaultInstance();
  TableRBTree::default_instance_->InitAsDefaultInstance();
  TableRBTree_Node::default_instance_->InitAsDefaultInstance();
  HeaderStorageBucket::default_instance_->InitAsDefaultInstance();
  HeaderStorageBucket_Header::default_instance_->InitAsDefaultInstance();
  HeaderStorage::default_instance_->InitAsDefaultInstance();
  DataStore::default_instance_->InitAsDefaultInstance();
  TableInfoArchive::default_instance_->InitAsDefaultInstance();
  EditingStateArchive::default_instance_->InitAsDefaultInstance();
  WPTableInfoArchive::default_instance_->InitAsDefaultInstance();
  TableStyleNetworkArchive::default_instance_->InitAsDefaultInstance();
  TableModelArchive::default_instance_->InitAsDefaultInstance();
  DurationWrapperArchive::default_instance_->InitAsDefaultInstance();
  Cell::default_instance_->InitAsDefaultInstance();
  MergeRegionMapArchive::default_instance_->InitAsDefaultInstance();
  CellMapArchive::default_instance_->InitAsDefaultInstance();
  CellMapArchive_CellMapEntry::default_instance_->InitAsDefaultInstance();
  DoubleStyleMapArchive::default_instance_->InitAsDefaultInstance();
  DoubleStyleMapArchive_DoubleStyleMapEntryArchive::default_instance_->InitAsDefaultInstance();
  StyleTableMapArchive::default_instance_->InitAsDefaultInstance();
  StyleTableMapArchive_StyleTableMapEntryArchive::default_instance_->InitAsDefaultInstance();
  SelectionArchive::default_instance_->InitAsDefaultInstance();
  FilterRuleArchive::default_instance_->InitAsDefaultInstance();
  TableStyleArchive::default_instance_->InitAsDefaultInstance();
  CellStyleArchive::default_instance_->InitAsDefaultInstance();
  FormulaPredicateArchive::default_instance_->InitAsDefaultInstance();
  ConditionalStyleSetArchive::default_instance_->InitAsDefaultInstance();
  ConditionalStyleSetArchive_ConditionalStyleRule::default_instance_->InitAsDefaultInstance();
  FilterSetArchive::default_instance_->InitAsDefaultInstance();
  TokenAttachmentArchive::default_instance_->InitAsDefaultInstance();
  FormulaArchive::default_instance_->InitAsDefaultInstance();
  ExpressionNodeArchive::default_instance_->InitAsDefaultInstance();
  BooleanNodeArchive::default_instance_->InitAsDefaultInstance();
  NumberNodeArchive::default_instance_->InitAsDefaultInstance();
  StringNodeArchive::default_instance_->InitAsDefaultInstance();
  IdentifierNodeArchive::default_instance_->InitAsDefaultInstance();
  ArrayNodeArchive::default_instance_->InitAsDefaultInstance();
  ListNodeArchive::default_instance_->InitAsDefaultInstance();
  OperatorNodeArchive::default_instance_->InitAsDefaultInstance();
  PostfixOperatorNodeArchive::default_instance_->InitAsDefaultInstance();
  PrefixOperatorNodeArchive::default_instance_->InitAsDefaultInstance();
  FunctionNodeArchive::default_instance_->InitAsDefaultInstance();
  FunctionEndNodeArchive::default_instance_->InitAsDefaultInstance();
  DateNodeArchive::default_instance_->InitAsDefaultInstance();
  ReferenceNodeArchive::default_instance_->InitAsDefaultInstance();
  DurationNodeArchive::default_instance_->InitAsDefaultInstance();
  ArgumentPlaceholderNodeArchive::default_instance_->InitAsDefaultInstance();
  EmptyExpressionNodeArchive::default_instance_->InitAsDefaultInstance();
  LayoutHintArchive::default_instance_->InitAsDefaultInstance();
  CompletionTokenAttachmentArchive::default_instance_->InitAsDefaultInstance();
  HiddenStateFormulaOwnerArchive::default_instance_->InitAsDefaultInstance();
  RichTextPayloadArchive::default_instance_->InitAsDefaultInstance();
  FormulaEqualsTokenAttachmentArchive::default_instance_->InitAsDefaultInstance();
  CellRegion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSTArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSTArchives_2eproto {
  StaticDescriptorInitializer_TSTArchives_2eproto() {
    protobuf_AddDesc_TSTArchives_2eproto();
  }
} static_descriptor_initializer_TSTArchives_2eproto_;

const ::google::protobuf::EnumDescriptor* CellType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellType_descriptor_;
}
bool CellType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CellValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellValueType_descriptor_;
}
bool CellValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SelectionTypeArchive_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectionTypeArchive_descriptor_;
}
bool SelectionTypeArchive_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FillDirectionArchive_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillDirectionArchive_descriptor_;
}
bool FillDirectionArchive_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MergeActionArchive_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeActionArchive_descriptor_;
}
bool MergeActionArchive_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HideShowActionArchive_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HideShowActionArchive_descriptor_;
}
bool HideShowActionArchive_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CellID::kPackedDataFieldNumber;
#endif  // !_MSC_VER

CellID::CellID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellID::InitAsDefaultInstance() {
}

CellID::CellID(const CellID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellID::SharedCtor() {
  _cached_size_ = 0;
  packeddata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellID::~CellID() {
  SharedDtor();
}

void CellID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellID_descriptor_;
}

const CellID& CellID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

CellID* CellID::default_instance_ = NULL;

CellID* CellID::New() const {
  return new CellID;
}

void CellID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packeddata_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 packedData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &packeddata_)));
          set_has_packeddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 packedData = 1;
  if (has_packeddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->packeddata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 packedData = 1;
  if (has_packeddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->packeddata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 packedData = 1;
    if (has_packeddata()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellID::MergeFrom(const CellID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packeddata()) {
      set_packeddata(from.packeddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellID::CopyFrom(const CellID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CellID::Swap(CellID* other) {
  if (other != this) {
    std::swap(packeddata_, other->packeddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellID_descriptor_;
  metadata.reflection = CellID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableSize::kPackedDataFieldNumber;
#endif  // !_MSC_VER

TableSize::TableSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableSize::InitAsDefaultInstance() {
}

TableSize::TableSize(const TableSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableSize::SharedCtor() {
  _cached_size_ = 0;
  packeddata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableSize::~TableSize() {
  SharedDtor();
}

void TableSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableSize_descriptor_;
}

const TableSize& TableSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableSize* TableSize::default_instance_ = NULL;

TableSize* TableSize::New() const {
  return new TableSize;
}

void TableSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packeddata_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 packedData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &packeddata_)));
          set_has_packeddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 packedData = 1;
  if (has_packeddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->packeddata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 packedData = 1;
  if (has_packeddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->packeddata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 packedData = 1;
    if (has_packeddata()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableSize::MergeFrom(const TableSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packeddata()) {
      set_packeddata(from.packeddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableSize::CopyFrom(const TableSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TableSize::Swap(TableSize* other) {
  if (other != this) {
    std::swap(packeddata_, other->packeddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableSize_descriptor_;
  metadata.reflection = TableSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellRange::kOriginFieldNumber;
const int CellRange::kSizeFieldNumber;
#endif  // !_MSC_VER

CellRange::CellRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellRange::InitAsDefaultInstance() {
  origin_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  size_ = const_cast< ::TST::TableSize*>(&::TST::TableSize::default_instance());
}

CellRange::CellRange(const CellRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellRange::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellRange::~CellRange() {
  SharedDtor();
}

void CellRange::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete size_;
  }
}

void CellRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellRange_descriptor_;
}

const CellRange& CellRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

CellRange* CellRange::default_instance_ = NULL;

CellRange* CellRange::New() const {
  return new CellRange;
}

void CellRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::TST::CellID::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::TST::TableSize::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellID origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }
      
      // required .TST.TableSize size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellID origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }
  
  // required .TST.TableSize size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellID origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }
  
  // required .TST.TableSize size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellRange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellID origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }
    
    // required .TST.TableSize size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellRange::MergeFrom(const CellRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::TST::CellID::MergeFrom(from.origin());
    }
    if (from.has_size()) {
      mutable_size()->::TST::TableSize::MergeFrom(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRange::CopyFrom(const CellRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  return true;
}

void CellRange::Swap(CellRange* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellRange_descriptor_;
  metadata.reflection = CellRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableSelection::kCellRangeFieldNumber;
const int TableSelection::kExtendedCellRangeFieldNumber;
const int TableSelection::kExtendedCellRangeValidFieldNumber;
const int TableSelection::kSelectionTypeFieldNumber;
#endif  // !_MSC_VER

TableSelection::TableSelection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableSelection::InitAsDefaultInstance() {
  cellrange_ = const_cast< ::TST::CellRange*>(&::TST::CellRange::default_instance());
  extendedcellrange_ = const_cast< ::TST::CellRange*>(&::TST::CellRange::default_instance());
}

TableSelection::TableSelection(const TableSelection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableSelection::SharedCtor() {
  _cached_size_ = 0;
  cellrange_ = NULL;
  extendedcellrange_ = NULL;
  extendedcellrangevalid_ = false;
  selection_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableSelection::~TableSelection() {
  SharedDtor();
}

void TableSelection::SharedDtor() {
  if (this != default_instance_) {
    delete cellrange_;
    delete extendedcellrange_;
  }
}

void TableSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableSelection_descriptor_;
}

const TableSelection& TableSelection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableSelection* TableSelection::default_instance_ = NULL;

TableSelection* TableSelection::New() const {
  return new TableSelection;
}

void TableSelection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cellrange()) {
      if (cellrange_ != NULL) cellrange_->::TST::CellRange::Clear();
    }
    if (has_extendedcellrange()) {
      if (extendedcellrange_ != NULL) extendedcellrange_->::TST::CellRange::Clear();
    }
    extendedcellrangevalid_ = false;
    selection_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellRange cellRange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extendedCellRange;
        break;
      }
      
      // required .TST.CellRange extendedCellRange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extendedCellRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extendedcellrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_extendedCellRangeValid;
        break;
      }
      
      // required bool extendedCellRangeValid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extendedCellRangeValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extendedcellrangevalid_)));
          set_has_extendedcellrangevalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_type;
        break;
      }
      
      // required .TST.SelectionTypeArchive selection_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TST::SelectionTypeArchive_IsValid(value)) {
            set_selection_type(static_cast< TST::SelectionTypeArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellRange cellRange = 1;
  if (has_cellrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cellrange(), output);
  }
  
  // required .TST.CellRange extendedCellRange = 2;
  if (has_extendedcellrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extendedcellrange(), output);
  }
  
  // required bool extendedCellRangeValid = 3;
  if (has_extendedcellrangevalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->extendedcellrangevalid(), output);
  }
  
  // required .TST.SelectionTypeArchive selection_type = 4;
  if (has_selection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->selection_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableSelection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellRange cellRange = 1;
  if (has_cellrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cellrange(), target);
  }
  
  // required .TST.CellRange extendedCellRange = 2;
  if (has_extendedcellrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extendedcellrange(), target);
  }
  
  // required bool extendedCellRangeValid = 3;
  if (has_extendedcellrangevalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->extendedcellrangevalid(), target);
  }
  
  // required .TST.SelectionTypeArchive selection_type = 4;
  if (has_selection_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->selection_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableSelection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellRange cellRange = 1;
    if (has_cellrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellrange());
    }
    
    // required .TST.CellRange extendedCellRange = 2;
    if (has_extendedcellrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extendedcellrange());
    }
    
    // required bool extendedCellRangeValid = 3;
    if (has_extendedcellrangevalid()) {
      total_size += 1 + 1;
    }
    
    // required .TST.SelectionTypeArchive selection_type = 4;
    if (has_selection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableSelection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableSelection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableSelection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableSelection::MergeFrom(const TableSelection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellrange()) {
      mutable_cellrange()->::TST::CellRange::MergeFrom(from.cellrange());
    }
    if (from.has_extendedcellrange()) {
      mutable_extendedcellrange()->::TST::CellRange::MergeFrom(from.extendedcellrange());
    }
    if (from.has_extendedcellrangevalid()) {
      set_extendedcellrangevalid(from.extendedcellrangevalid());
    }
    if (from.has_selection_type()) {
      set_selection_type(from.selection_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableSelection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableSelection::CopyFrom(const TableSelection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSelection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_cellrange()) {
    if (!this->cellrange().IsInitialized()) return false;
  }
  if (has_extendedcellrange()) {
    if (!this->extendedcellrange().IsInitialized()) return false;
  }
  return true;
}

void TableSelection::Swap(TableSelection* other) {
  if (other != this) {
    std::swap(cellrange_, other->cellrange_);
    std::swap(extendedcellrange_, other->extendedcellrange_);
    std::swap(extendedcellrangevalid_, other->extendedcellrangevalid_);
    std::swap(selection_type_, other->selection_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableSelection_descriptor_;
  metadata.reflection = TableSelection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TileRowInfo::kStorageVersionFieldNumber;
const int TileRowInfo::kTileRowIndexFieldNumber;
const int TileRowInfo::kCellCountFieldNumber;
const int TileRowInfo::kCellStorageBufferFieldNumber;
const int TileRowInfo::kCellOffsetsFieldNumber;
#endif  // !_MSC_VER

TileRowInfo::TileRowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TileRowInfo::InitAsDefaultInstance() {
}

TileRowInfo::TileRowInfo(const TileRowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TileRowInfo::SharedCtor() {
  _cached_size_ = 0;
  storage_version_ = 0u;
  tilerowindex_ = 0u;
  cellcount_ = 0u;
  cellstoragebuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  celloffsets_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileRowInfo::~TileRowInfo() {
  SharedDtor();
}

void TileRowInfo::SharedDtor() {
  if (cellstoragebuffer_ != &::google::protobuf::internal::kEmptyString) {
    delete cellstoragebuffer_;
  }
  if (celloffsets_ != &::google::protobuf::internal::kEmptyString) {
    delete celloffsets_;
  }
  if (this != default_instance_) {
  }
}

void TileRowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileRowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileRowInfo_descriptor_;
}

const TileRowInfo& TileRowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TileRowInfo* TileRowInfo::default_instance_ = NULL;

TileRowInfo* TileRowInfo::New() const {
  return new TileRowInfo;
}

void TileRowInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storage_version_ = 0u;
    tilerowindex_ = 0u;
    cellcount_ = 0u;
    if (has_cellstoragebuffer()) {
      if (cellstoragebuffer_ != &::google::protobuf::internal::kEmptyString) {
        cellstoragebuffer_->clear();
      }
    }
    if (has_celloffsets()) {
      if (celloffsets_ != &::google::protobuf::internal::kEmptyString) {
        celloffsets_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TileRowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tileRowIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tilerowindex_)));
          set_has_tilerowindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellCount;
        break;
      }
      
      // required uint32 cellCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellcount_)));
          set_has_cellcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cellStorageBuffer;
        break;
      }
      
      // required bytes cellStorageBuffer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cellStorageBuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cellstoragebuffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cellOffsets;
        break;
      }
      
      // required bytes cellOffsets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cellOffsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_celloffsets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_storage_version;
        break;
      }
      
      // optional uint32 storage_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_version_)));
          set_has_storage_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TileRowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tileRowIndex = 1;
  if (has_tilerowindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tilerowindex(), output);
  }
  
  // required uint32 cellCount = 2;
  if (has_cellcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellcount(), output);
  }
  
  // required bytes cellStorageBuffer = 3;
  if (has_cellstoragebuffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cellstoragebuffer(), output);
  }
  
  // required bytes cellOffsets = 4;
  if (has_celloffsets()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->celloffsets(), output);
  }
  
  // optional uint32 storage_version = 5;
  if (has_storage_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->storage_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TileRowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tileRowIndex = 1;
  if (has_tilerowindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tilerowindex(), target);
  }
  
  // required uint32 cellCount = 2;
  if (has_cellcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellcount(), target);
  }
  
  // required bytes cellStorageBuffer = 3;
  if (has_cellstoragebuffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cellstoragebuffer(), target);
  }
  
  // required bytes cellOffsets = 4;
  if (has_celloffsets()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->celloffsets(), target);
  }
  
  // optional uint32 storage_version = 5;
  if (has_storage_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->storage_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TileRowInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 storage_version = 5;
    if (has_storage_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_version());
    }
    
    // required uint32 tileRowIndex = 1;
    if (has_tilerowindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tilerowindex());
    }
    
    // required uint32 cellCount = 2;
    if (has_cellcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellcount());
    }
    
    // required bytes cellStorageBuffer = 3;
    if (has_cellstoragebuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cellstoragebuffer());
    }
    
    // required bytes cellOffsets = 4;
    if (has_celloffsets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->celloffsets());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileRowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TileRowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TileRowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileRowInfo::MergeFrom(const TileRowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_version()) {
      set_storage_version(from.storage_version());
    }
    if (from.has_tilerowindex()) {
      set_tilerowindex(from.tilerowindex());
    }
    if (from.has_cellcount()) {
      set_cellcount(from.cellcount());
    }
    if (from.has_cellstoragebuffer()) {
      set_cellstoragebuffer(from.cellstoragebuffer());
    }
    if (from.has_celloffsets()) {
      set_celloffsets(from.celloffsets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TileRowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileRowInfo::CopyFrom(const TileRowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileRowInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  
  return true;
}

void TileRowInfo::Swap(TileRowInfo* other) {
  if (other != this) {
    std::swap(storage_version_, other->storage_version_);
    std::swap(tilerowindex_, other->tilerowindex_);
    std::swap(cellcount_, other->cellcount_);
    std::swap(cellstoragebuffer_, other->cellstoragebuffer_);
    std::swap(celloffsets_, other->celloffsets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TileRowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileRowInfo_descriptor_;
  metadata.reflection = TileRowInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tile::kMaxColumnFieldNumber;
const int Tile::kMaxRowFieldNumber;
const int Tile::kNumCellsFieldNumber;
const int Tile::kNumrowsFieldNumber;
const int Tile::kStorageVersionFieldNumber;
const int Tile::kRowInfosFieldNumber;
#endif  // !_MSC_VER

Tile::Tile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tile::InitAsDefaultInstance() {
}

Tile::Tile(const Tile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tile::SharedCtor() {
  _cached_size_ = 0;
  maxcolumn_ = 0u;
  maxrow_ = 0u;
  numcells_ = 0u;
  numrows_ = 0u;
  storage_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile::~Tile() {
  SharedDtor();
}

void Tile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_descriptor_;
}

const Tile& Tile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

Tile* Tile::default_instance_ = NULL;

Tile* Tile::New() const {
  return new Tile;
}

void Tile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxcolumn_ = 0u;
    maxrow_ = 0u;
    numcells_ = 0u;
    numrows_ = 0u;
    storage_version_ = 0u;
  }
  rowinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxColumn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcolumn_)));
          set_has_maxcolumn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxRow;
        break;
      }
      
      // required uint32 maxRow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxRow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxrow_)));
          set_has_maxrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numCells;
        break;
      }
      
      // required uint32 numCells = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numCells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numcells_)));
          set_has_numcells();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_numrows;
        break;
      }
      
      // required uint32 numrows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numrows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numrows_)));
          set_has_numrows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rowInfos;
        break;
      }
      
      // repeated .TST.TileRowInfo rowInfos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rowInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rowinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rowInfos;
        if (input->ExpectTag(48)) goto parse_storage_version;
        break;
      }
      
      // optional uint32 storage_version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_version_)));
          set_has_storage_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 maxColumn = 1;
  if (has_maxcolumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxcolumn(), output);
  }
  
  // required uint32 maxRow = 2;
  if (has_maxrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxrow(), output);
  }
  
  // required uint32 numCells = 3;
  if (has_numcells()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numcells(), output);
  }
  
  // required uint32 numrows = 4;
  if (has_numrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numrows(), output);
  }
  
  // repeated .TST.TileRowInfo rowInfos = 5;
  for (int i = 0; i < this->rowinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rowinfos(i), output);
  }
  
  // optional uint32 storage_version = 6;
  if (has_storage_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->storage_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 maxColumn = 1;
  if (has_maxcolumn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxcolumn(), target);
  }
  
  // required uint32 maxRow = 2;
  if (has_maxrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxrow(), target);
  }
  
  // required uint32 numCells = 3;
  if (has_numcells()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->numcells(), target);
  }
  
  // required uint32 numrows = 4;
  if (has_numrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numrows(), target);
  }
  
  // repeated .TST.TileRowInfo rowInfos = 5;
  for (int i = 0; i < this->rowinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rowinfos(i), target);
  }
  
  // optional uint32 storage_version = 6;
  if (has_storage_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->storage_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxColumn = 1;
    if (has_maxcolumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcolumn());
    }
    
    // required uint32 maxRow = 2;
    if (has_maxrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxrow());
    }
    
    // required uint32 numCells = 3;
    if (has_numcells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numcells());
    }
    
    // required uint32 numrows = 4;
    if (has_numrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numrows());
    }
    
    // optional uint32 storage_version = 6;
    if (has_storage_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_version());
    }
    
  }
  // repeated .TST.TileRowInfo rowInfos = 5;
  total_size += 1 * this->rowinfos_size();
  for (int i = 0; i < this->rowinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rowinfos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
  GOOGLE_CHECK_NE(&from, this);
  rowinfos_.MergeFrom(from.rowinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxcolumn()) {
      set_maxcolumn(from.maxcolumn());
    }
    if (from.has_maxrow()) {
      set_maxrow(from.maxrow());
    }
    if (from.has_numcells()) {
      set_numcells(from.numcells());
    }
    if (from.has_numrows()) {
      set_numrows(from.numrows());
    }
    if (from.has_storage_version()) {
      set_storage_version(from.storage_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < rowinfos_size(); i++) {
    if (!this->rowinfos(i).IsInitialized()) return false;
  }
  return true;
}

void Tile::Swap(Tile* other) {
  if (other != this) {
    std::swap(maxcolumn_, other->maxcolumn_);
    std::swap(maxrow_, other->maxrow_);
    std::swap(numcells_, other->numcells_);
    std::swap(numrows_, other->numrows_);
    std::swap(storage_version_, other->storage_version_);
    rowinfos_.Swap(&other->rowinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_descriptor_;
  metadata.reflection = Tile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TileStorage_Tile::kTileidFieldNumber;
const int TileStorage_Tile::kTileFieldNumber;
#endif  // !_MSC_VER

TileStorage_Tile::TileStorage_Tile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TileStorage_Tile::InitAsDefaultInstance() {
  tile_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TileStorage_Tile::TileStorage_Tile(const TileStorage_Tile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TileStorage_Tile::SharedCtor() {
  _cached_size_ = 0;
  tileid_ = 0u;
  tile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileStorage_Tile::~TileStorage_Tile() {
  SharedDtor();
}

void TileStorage_Tile::SharedDtor() {
  if (this != default_instance_) {
    delete tile_;
  }
}

void TileStorage_Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileStorage_Tile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileStorage_Tile_descriptor_;
}

const TileStorage_Tile& TileStorage_Tile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TileStorage_Tile* TileStorage_Tile::default_instance_ = NULL;

TileStorage_Tile* TileStorage_Tile::New() const {
  return new TileStorage_Tile;
}

void TileStorage_Tile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tileid_ = 0u;
    if (has_tile()) {
      if (tile_ != NULL) tile_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TileStorage_Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tileid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tileid_)));
          set_has_tileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tile;
        break;
      }
      
      // required .TSP.Reference tile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TileStorage_Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tileid = 1;
  if (has_tileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tileid(), output);
  }
  
  // required .TSP.Reference tile = 2;
  if (has_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tile(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TileStorage_Tile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tileid = 1;
  if (has_tileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tileid(), target);
  }
  
  // required .TSP.Reference tile = 2;
  if (has_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tile(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TileStorage_Tile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tileid = 1;
    if (has_tileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tileid());
    }
    
    // required .TSP.Reference tile = 2;
    if (has_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tile());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileStorage_Tile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TileStorage_Tile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TileStorage_Tile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileStorage_Tile::MergeFrom(const TileStorage_Tile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tileid()) {
      set_tileid(from.tileid());
    }
    if (from.has_tile()) {
      mutable_tile()->::TSP::Reference::MergeFrom(from.tile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TileStorage_Tile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileStorage_Tile::CopyFrom(const TileStorage_Tile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileStorage_Tile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_tile()) {
    if (!this->tile().IsInitialized()) return false;
  }
  return true;
}

void TileStorage_Tile::Swap(TileStorage_Tile* other) {
  if (other != this) {
    std::swap(tileid_, other->tileid_);
    std::swap(tile_, other->tile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TileStorage_Tile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileStorage_Tile_descriptor_;
  metadata.reflection = TileStorage_Tile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TileStorage::kTilesFieldNumber;
#endif  // !_MSC_VER

TileStorage::TileStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TileStorage::InitAsDefaultInstance() {
}

TileStorage::TileStorage(const TileStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TileStorage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileStorage::~TileStorage() {
  SharedDtor();
}

void TileStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TileStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileStorage_descriptor_;
}

const TileStorage& TileStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TileStorage* TileStorage::default_instance_ = NULL;

TileStorage* TileStorage::New() const {
  return new TileStorage;
}

void TileStorage::Clear() {
  tiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TileStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TST.TileStorage.Tile tiles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TileStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TST.TileStorage.Tile tiles = 1;
  for (int i = 0; i < this->tiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tiles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TileStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TST.TileStorage.Tile tiles = 1;
  for (int i = 0; i < this->tiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tiles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TileStorage::ByteSize() const {
  int total_size = 0;
  
  // repeated .TST.TileStorage.Tile tiles = 1;
  total_size += 1 * this->tiles_size();
  for (int i = 0; i < this->tiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tiles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TileStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TileStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileStorage::MergeFrom(const TileStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  tiles_.MergeFrom(from.tiles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TileStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileStorage::CopyFrom(const TileStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileStorage::IsInitialized() const {
  
  for (int i = 0; i < tiles_size(); i++) {
    if (!this->tiles(i).IsInitialized()) return false;
  }
  return true;
}

void TileStorage::Swap(TileStorage* other) {
  if (other != this) {
    tiles_.Swap(&other->tiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TileStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileStorage_descriptor_;
  metadata.reflection = TileStorage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PopUpMenuModel_CellValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopUpMenuModel_CellValueType_descriptor_;
}
bool PopUpMenuModel_CellValueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PopUpMenuModel_CellValueType PopUpMenuModel::NIL_TYPE;
const PopUpMenuModel_CellValueType PopUpMenuModel::BOOLEAN_TYPE;
const PopUpMenuModel_CellValueType PopUpMenuModel::DATE_TYPE;
const PopUpMenuModel_CellValueType PopUpMenuModel::NUMBER_TYPE;
const PopUpMenuModel_CellValueType PopUpMenuModel::STRING_TYPE;
const PopUpMenuModel_CellValueType PopUpMenuModel::CellValueType_MIN;
const PopUpMenuModel_CellValueType PopUpMenuModel::CellValueType_MAX;
const int PopUpMenuModel::CellValueType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PopUpMenuModel_CellValue::kCellValueTypeFieldNumber;
const int PopUpMenuModel_CellValue::kBooleanValueFieldNumber;
const int PopUpMenuModel_CellValue::kDateValueFieldNumber;
const int PopUpMenuModel_CellValue::kNumberValueFieldNumber;
const int PopUpMenuModel_CellValue::kStringValueFieldNumber;
#endif  // !_MSC_VER

PopUpMenuModel_CellValue::PopUpMenuModel_CellValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PopUpMenuModel_CellValue::InitAsDefaultInstance() {
  boolean_value_ = const_cast< ::TSCE::BooleanCellValueArchive*>(&::TSCE::BooleanCellValueArchive::default_instance());
  date_value_ = const_cast< ::TSCE::DateCellValueArchive*>(&::TSCE::DateCellValueArchive::default_instance());
  number_value_ = const_cast< ::TSCE::NumberCellValueArchive*>(&::TSCE::NumberCellValueArchive::default_instance());
  string_value_ = const_cast< ::TSCE::StringCellValueArchive*>(&::TSCE::StringCellValueArchive::default_instance());
}

PopUpMenuModel_CellValue::PopUpMenuModel_CellValue(const PopUpMenuModel_CellValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PopUpMenuModel_CellValue::SharedCtor() {
  _cached_size_ = 0;
  cell_value_type_ = 1;
  boolean_value_ = NULL;
  date_value_ = NULL;
  number_value_ = NULL;
  string_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopUpMenuModel_CellValue::~PopUpMenuModel_CellValue() {
  SharedDtor();
}

void PopUpMenuModel_CellValue::SharedDtor() {
  if (this != default_instance_) {
    delete boolean_value_;
    delete date_value_;
    delete number_value_;
    delete string_value_;
  }
}

void PopUpMenuModel_CellValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopUpMenuModel_CellValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopUpMenuModel_CellValue_descriptor_;
}

const PopUpMenuModel_CellValue& PopUpMenuModel_CellValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

PopUpMenuModel_CellValue* PopUpMenuModel_CellValue::default_instance_ = NULL;

PopUpMenuModel_CellValue* PopUpMenuModel_CellValue::New() const {
  return new PopUpMenuModel_CellValue;
}

void PopUpMenuModel_CellValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_value_type_ = 1;
    if (has_boolean_value()) {
      if (boolean_value_ != NULL) boolean_value_->::TSCE::BooleanCellValueArchive::Clear();
    }
    if (has_date_value()) {
      if (date_value_ != NULL) date_value_->::TSCE::DateCellValueArchive::Clear();
    }
    if (has_number_value()) {
      if (number_value_ != NULL) number_value_->::TSCE::NumberCellValueArchive::Clear();
    }
    if (has_string_value()) {
      if (string_value_ != NULL) string_value_->::TSCE::StringCellValueArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopUpMenuModel_CellValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::PopUpMenuModel_CellValueType_IsValid(value)) {
            set_cell_value_type(static_cast< ::TST::PopUpMenuModel_CellValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boolean_value;
        break;
      }
      
      // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boolean_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boolean_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_date_value;
        break;
      }
      
      // optional .TSCE.DateCellValueArchive date_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_number_value;
        break;
      }
      
      // optional .TSCE.NumberCellValueArchive number_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_number_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_value;
        break;
      }
      
      // optional .TSCE.StringCellValueArchive string_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PopUpMenuModel_CellValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
  if (has_cell_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cell_value_type(), output);
  }
  
  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boolean_value(), output);
  }
  
  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (has_date_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->date_value(), output);
  }
  
  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (has_number_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->number_value(), output);
  }
  
  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->string_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PopUpMenuModel_CellValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
  if (has_cell_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cell_value_type(), target);
  }
  
  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boolean_value(), target);
  }
  
  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (has_date_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->date_value(), target);
  }
  
  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (has_number_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->number_value(), target);
  }
  
  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (has_string_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->string_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PopUpMenuModel_CellValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
    if (has_cell_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cell_value_type());
    }
    
    // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
    if (has_boolean_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boolean_value());
    }
    
    // optional .TSCE.DateCellValueArchive date_value = 3;
    if (has_date_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_value());
    }
    
    // optional .TSCE.NumberCellValueArchive number_value = 4;
    if (has_number_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->number_value());
    }
    
    // optional .TSCE.StringCellValueArchive string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopUpMenuModel_CellValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopUpMenuModel_CellValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopUpMenuModel_CellValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopUpMenuModel_CellValue::MergeFrom(const PopUpMenuModel_CellValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_value_type()) {
      set_cell_value_type(from.cell_value_type());
    }
    if (from.has_boolean_value()) {
      mutable_boolean_value()->::TSCE::BooleanCellValueArchive::MergeFrom(from.boolean_value());
    }
    if (from.has_date_value()) {
      mutable_date_value()->::TSCE::DateCellValueArchive::MergeFrom(from.date_value());
    }
    if (from.has_number_value()) {
      mutable_number_value()->::TSCE::NumberCellValueArchive::MergeFrom(from.number_value());
    }
    if (from.has_string_value()) {
      mutable_string_value()->::TSCE::StringCellValueArchive::MergeFrom(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopUpMenuModel_CellValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopUpMenuModel_CellValue::CopyFrom(const PopUpMenuModel_CellValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopUpMenuModel_CellValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_boolean_value()) {
    if (!this->boolean_value().IsInitialized()) return false;
  }
  if (has_date_value()) {
    if (!this->date_value().IsInitialized()) return false;
  }
  if (has_number_value()) {
    if (!this->number_value().IsInitialized()) return false;
  }
  if (has_string_value()) {
    if (!this->string_value().IsInitialized()) return false;
  }
  return true;
}

void PopUpMenuModel_CellValue::Swap(PopUpMenuModel_CellValue* other) {
  if (other != this) {
    std::swap(cell_value_type_, other->cell_value_type_);
    std::swap(boolean_value_, other->boolean_value_);
    std::swap(date_value_, other->date_value_);
    std::swap(number_value_, other->number_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopUpMenuModel_CellValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopUpMenuModel_CellValue_descriptor_;
  metadata.reflection = PopUpMenuModel_CellValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PopUpMenuModel::kItemFieldNumber;
const int PopUpMenuModel::kTsceItemFieldNumber;
#endif  // !_MSC_VER

PopUpMenuModel::PopUpMenuModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PopUpMenuModel::InitAsDefaultInstance() {
}

PopUpMenuModel::PopUpMenuModel(const PopUpMenuModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PopUpMenuModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopUpMenuModel::~PopUpMenuModel() {
  SharedDtor();
}

void PopUpMenuModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PopUpMenuModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopUpMenuModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopUpMenuModel_descriptor_;
}

const PopUpMenuModel& PopUpMenuModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

PopUpMenuModel* PopUpMenuModel::default_instance_ = NULL;

PopUpMenuModel* PopUpMenuModel::New() const {
  return new PopUpMenuModel;
}

void PopUpMenuModel::Clear() {
  item_.Clear();
  tsce_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopUpMenuModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(18)) goto parse_tsce_item;
        break;
      }
      
      // repeated .TSCE.CellValueArchive tsce_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tsce_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tsce_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tsce_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PopUpMenuModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }
  
  // repeated .TSCE.CellValueArchive tsce_item = 2;
  for (int i = 0; i < this->tsce_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tsce_item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PopUpMenuModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }
  
  // repeated .TSCE.CellValueArchive tsce_item = 2;
  for (int i = 0; i < this->tsce_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tsce_item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PopUpMenuModel::ByteSize() const {
  int total_size = 0;
  
  // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  // repeated .TSCE.CellValueArchive tsce_item = 2;
  total_size += 1 * this->tsce_item_size();
  for (int i = 0; i < this->tsce_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tsce_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopUpMenuModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopUpMenuModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopUpMenuModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopUpMenuModel::MergeFrom(const PopUpMenuModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  tsce_item_.MergeFrom(from.tsce_item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopUpMenuModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopUpMenuModel::CopyFrom(const PopUpMenuModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopUpMenuModel::IsInitialized() const {
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < tsce_item_size(); i++) {
    if (!this->tsce_item(i).IsInitialized()) return false;
  }
  return true;
}

void PopUpMenuModel::Swap(PopUpMenuModel* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    tsce_item_.Swap(&other->tsce_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopUpMenuModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopUpMenuModel_descriptor_;
  metadata.reflection = PopUpMenuModel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TableDataList_ListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableDataList_ListType_descriptor_;
}
bool TableDataList_ListType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TableDataList_ListType TableDataList::STRING;
const TableDataList_ListType TableDataList::FORMAT;
const TableDataList_ListType TableDataList::FORMULA;
const TableDataList_ListType TableDataList::STYLE;
const TableDataList_ListType TableDataList::FORMULA_ERROR;
const TableDataList_ListType TableDataList::CUSTOM_FORMAT;
const TableDataList_ListType TableDataList::MULTIPLE_CHOICE_LIST_FORMAT;
const TableDataList_ListType TableDataList::RICH_TEXT_PAYLOAD;
const TableDataList_ListType TableDataList::CONDITIONAL_STYLE;
const TableDataList_ListType TableDataList::COMMENT_STORAGE;
const TableDataList_ListType TableDataList::ListType_MIN;
const TableDataList_ListType TableDataList::ListType_MAX;
const int TableDataList::ListType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TableDataList_ListEntry::kKeyFieldNumber;
const int TableDataList_ListEntry::kRefcountFieldNumber;
const int TableDataList_ListEntry::kStringFieldNumber;
const int TableDataList_ListEntry::kReferenceFieldNumber;
const int TableDataList_ListEntry::kFormulaFieldNumber;
const int TableDataList_ListEntry::kFormatFieldNumber;
const int TableDataList_ListEntry::kRegionFieldNumber;
const int TableDataList_ListEntry::kCustomFormatFieldNumber;
const int TableDataList_ListEntry::kRichTextPayloadFieldNumber;
const int TableDataList_ListEntry::kCommentStorageFieldNumber;
#endif  // !_MSC_VER

TableDataList_ListEntry::TableDataList_ListEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableDataList_ListEntry::InitAsDefaultInstance() {
  reference_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  formula_ = const_cast< ::TSCE::FormulaArchive*>(&::TSCE::FormulaArchive::default_instance());
  format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  region_ = const_cast< ::TST::CellRange*>(&::TST::CellRange::default_instance());
  custom_format_ = const_cast< ::TSK::CustomFormatArchive*>(&::TSK::CustomFormatArchive::default_instance());
  richtextpayload_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  comment_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TableDataList_ListEntry::TableDataList_ListEntry(const TableDataList_ListEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableDataList_ListEntry::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  refcount_ = 0u;
  string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reference_ = NULL;
  formula_ = NULL;
  format_ = NULL;
  region_ = NULL;
  custom_format_ = NULL;
  richtextpayload_ = NULL;
  comment_storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableDataList_ListEntry::~TableDataList_ListEntry() {
  SharedDtor();
}

void TableDataList_ListEntry::SharedDtor() {
  if (string_ != &::google::protobuf::internal::kEmptyString) {
    delete string_;
  }
  if (this != default_instance_) {
    delete reference_;
    delete formula_;
    delete format_;
    delete region_;
    delete custom_format_;
    delete richtextpayload_;
    delete comment_storage_;
  }
}

void TableDataList_ListEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableDataList_ListEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableDataList_ListEntry_descriptor_;
}

const TableDataList_ListEntry& TableDataList_ListEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableDataList_ListEntry* TableDataList_ListEntry::default_instance_ = NULL;

TableDataList_ListEntry* TableDataList_ListEntry::New() const {
  return new TableDataList_ListEntry;
}

void TableDataList_ListEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    refcount_ = 0u;
    if (has_string()) {
      if (string_ != &::google::protobuf::internal::kEmptyString) {
        string_->clear();
      }
    }
    if (has_reference()) {
      if (reference_ != NULL) reference_->::TSP::Reference::Clear();
    }
    if (has_formula()) {
      if (formula_ != NULL) formula_->::TSCE::FormulaArchive::Clear();
    }
    if (has_format()) {
      if (format_ != NULL) format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_region()) {
      if (region_ != NULL) region_->::TST::CellRange::Clear();
    }
    if (has_custom_format()) {
      if (custom_format_ != NULL) custom_format_->::TSK::CustomFormatArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_richtextpayload()) {
      if (richtextpayload_ != NULL) richtextpayload_->::TSP::Reference::Clear();
    }
    if (has_comment_storage()) {
      if (comment_storage_ != NULL) comment_storage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableDataList_ListEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refcount;
        break;
      }
      
      // required uint32 refcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refcount_)));
          set_has_refcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string;
        break;
      }
      
      // optional string string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reference;
        break;
      }
      
      // optional .TSP.Reference reference = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_formula;
        break;
      }
      
      // optional .TSCE.FormulaArchive formula = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive format = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_region;
        break;
      }
      
      // optional .TST.CellRange region = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_custom_format;
        break;
      }
      
      // optional .TSK.CustomFormatArchive custom_format = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_richTextPayload;
        break;
      }
      
      // optional .TSP.Reference richTextPayload = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_richTextPayload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_richtextpayload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_comment_storage;
        break;
      }
      
      // optional .TSP.Reference comment_storage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableDataList_ListEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }
  
  // required uint32 refcount = 2;
  if (has_refcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refcount(), output);
  }
  
  // optional string string = 3;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string(), output);
  }
  
  // optional .TSP.Reference reference = 4;
  if (has_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reference(), output);
  }
  
  // optional .TSCE.FormulaArchive formula = 5;
  if (has_formula()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->formula(), output);
  }
  
  // optional .TSK.FormatStructArchive format = 6;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->format(), output);
  }
  
  // optional .TST.CellRange region = 7;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->region(), output);
  }
  
  // optional .TSK.CustomFormatArchive custom_format = 8;
  if (has_custom_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->custom_format(), output);
  }
  
  // optional .TSP.Reference richTextPayload = 9;
  if (has_richtextpayload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->richtextpayload(), output);
  }
  
  // optional .TSP.Reference comment_storage = 10;
  if (has_comment_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->comment_storage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableDataList_ListEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }
  
  // required uint32 refcount = 2;
  if (has_refcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refcount(), target);
  }
  
  // optional string string = 3;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string(), target);
  }
  
  // optional .TSP.Reference reference = 4;
  if (has_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reference(), target);
  }
  
  // optional .TSCE.FormulaArchive formula = 5;
  if (has_formula()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->formula(), target);
  }
  
  // optional .TSK.FormatStructArchive format = 6;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->format(), target);
  }
  
  // optional .TST.CellRange region = 7;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->region(), target);
  }
  
  // optional .TSK.CustomFormatArchive custom_format = 8;
  if (has_custom_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->custom_format(), target);
  }
  
  // optional .TSP.Reference richTextPayload = 9;
  if (has_richtextpayload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->richtextpayload(), target);
  }
  
  // optional .TSP.Reference comment_storage = 10;
  if (has_comment_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->comment_storage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableDataList_ListEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }
    
    // required uint32 refcount = 2;
    if (has_refcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refcount());
    }
    
    // optional string string = 3;
    if (has_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }
    
    // optional .TSP.Reference reference = 4;
    if (has_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference());
    }
    
    // optional .TSCE.FormulaArchive formula = 5;
    if (has_formula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula());
    }
    
    // optional .TSK.FormatStructArchive format = 6;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format());
    }
    
    // optional .TST.CellRange region = 7;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }
    
    // optional .TSK.CustomFormatArchive custom_format = 8;
    if (has_custom_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_format());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Reference richTextPayload = 9;
    if (has_richtextpayload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->richtextpayload());
    }
    
    // optional .TSP.Reference comment_storage = 10;
    if (has_comment_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment_storage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableDataList_ListEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableDataList_ListEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableDataList_ListEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableDataList_ListEntry::MergeFrom(const TableDataList_ListEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_refcount()) {
      set_refcount(from.refcount());
    }
    if (from.has_string()) {
      set_string(from.string());
    }
    if (from.has_reference()) {
      mutable_reference()->::TSP::Reference::MergeFrom(from.reference());
    }
    if (from.has_formula()) {
      mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from.formula());
    }
    if (from.has_format()) {
      mutable_format()->::TSK::FormatStructArchive::MergeFrom(from.format());
    }
    if (from.has_region()) {
      mutable_region()->::TST::CellRange::MergeFrom(from.region());
    }
    if (from.has_custom_format()) {
      mutable_custom_format()->::TSK::CustomFormatArchive::MergeFrom(from.custom_format());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_richtextpayload()) {
      mutable_richtextpayload()->::TSP::Reference::MergeFrom(from.richtextpayload());
    }
    if (from.has_comment_storage()) {
      mutable_comment_storage()->::TSP::Reference::MergeFrom(from.comment_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableDataList_ListEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableDataList_ListEntry::CopyFrom(const TableDataList_ListEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataList_ListEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_reference()) {
    if (!this->reference().IsInitialized()) return false;
  }
  if (has_formula()) {
    if (!this->formula().IsInitialized()) return false;
  }
  if (has_format()) {
    if (!this->format().IsInitialized()) return false;
  }
  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_custom_format()) {
    if (!this->custom_format().IsInitialized()) return false;
  }
  if (has_richtextpayload()) {
    if (!this->richtextpayload().IsInitialized()) return false;
  }
  if (has_comment_storage()) {
    if (!this->comment_storage().IsInitialized()) return false;
  }
  return true;
}

void TableDataList_ListEntry::Swap(TableDataList_ListEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(refcount_, other->refcount_);
    std::swap(string_, other->string_);
    std::swap(reference_, other->reference_);
    std::swap(formula_, other->formula_);
    std::swap(format_, other->format_);
    std::swap(region_, other->region_);
    std::swap(custom_format_, other->custom_format_);
    std::swap(richtextpayload_, other->richtextpayload_);
    std::swap(comment_storage_, other->comment_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableDataList_ListEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableDataList_ListEntry_descriptor_;
  metadata.reflection = TableDataList_ListEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TableDataList::kListTypeFieldNumber;
const int TableDataList::kNextListIDFieldNumber;
const int TableDataList::kEntriesFieldNumber;
#endif  // !_MSC_VER

TableDataList::TableDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableDataList::InitAsDefaultInstance() {
}

TableDataList::TableDataList(const TableDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableDataList::SharedCtor() {
  _cached_size_ = 0;
  listtype_ = 1;
  nextlistid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableDataList::~TableDataList() {
  SharedDtor();
}

void TableDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableDataList_descriptor_;
}

const TableDataList& TableDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableDataList* TableDataList::default_instance_ = NULL;

TableDataList* TableDataList::New() const {
  return new TableDataList;
}

void TableDataList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    listtype_ = 1;
    nextlistid_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TST.TableDataList.ListType listType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::TableDataList_ListType_IsValid(value)) {
            set_listtype(static_cast< ::TST::TableDataList_ListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextListID;
        break;
      }
      
      // required uint32 nextListID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextListID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextlistid_)));
          set_has_nextlistid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        break;
      }
      
      // repeated .TST.TableDataList.ListEntry entries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TST.TableDataList.ListType listType = 1;
  if (has_listtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->listtype(), output);
  }
  
  // required uint32 nextListID = 2;
  if (has_nextlistid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextlistid(), output);
  }
  
  // repeated .TST.TableDataList.ListEntry entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TST.TableDataList.ListType listType = 1;
  if (has_listtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->listtype(), target);
  }
  
  // required uint32 nextListID = 2;
  if (has_nextlistid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nextlistid(), target);
  }
  
  // repeated .TST.TableDataList.ListEntry entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entries(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableDataList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TST.TableDataList.ListType listType = 1;
    if (has_listtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->listtype());
    }
    
    // required uint32 nextListID = 2;
    if (has_nextlistid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextlistid());
    }
    
  }
  // repeated .TST.TableDataList.ListEntry entries = 3;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableDataList::MergeFrom(const TableDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listtype()) {
      set_listtype(from.listtype());
    }
    if (from.has_nextlistid()) {
      set_nextlistid(from.nextlistid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableDataList::CopyFrom(const TableDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void TableDataList::Swap(TableDataList* other) {
  if (other != this) {
    std::swap(listtype_, other->listtype_);
    std::swap(nextlistid_, other->nextlistid_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableDataList_descriptor_;
  metadata.reflection = TableDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableRBTree_Node::kKeyFieldNumber;
const int TableRBTree_Node::kValueFieldNumber;
#endif  // !_MSC_VER

TableRBTree_Node::TableRBTree_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableRBTree_Node::InitAsDefaultInstance() {
}

TableRBTree_Node::TableRBTree_Node(const TableRBTree_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableRBTree_Node::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableRBTree_Node::~TableRBTree_Node() {
  SharedDtor();
}

void TableRBTree_Node::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableRBTree_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableRBTree_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableRBTree_Node_descriptor_;
}

const TableRBTree_Node& TableRBTree_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableRBTree_Node* TableRBTree_Node::default_instance_ = NULL;

TableRBTree_Node* TableRBTree_Node::New() const {
  return new TableRBTree_Node;
}

void TableRBTree_Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableRBTree_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableRBTree_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }
  
  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableRBTree_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }
  
  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableRBTree_Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }
    
    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableRBTree_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableRBTree_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableRBTree_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableRBTree_Node::MergeFrom(const TableRBTree_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableRBTree_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableRBTree_Node::CopyFrom(const TableRBTree_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRBTree_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TableRBTree_Node::Swap(TableRBTree_Node* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableRBTree_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableRBTree_Node_descriptor_;
  metadata.reflection = TableRBTree_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TableRBTree::kNodesFieldNumber;
#endif  // !_MSC_VER

TableRBTree::TableRBTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableRBTree::InitAsDefaultInstance() {
}

TableRBTree::TableRBTree(const TableRBTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableRBTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableRBTree::~TableRBTree() {
  SharedDtor();
}

void TableRBTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableRBTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableRBTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableRBTree_descriptor_;
}

const TableRBTree& TableRBTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableRBTree* TableRBTree::default_instance_ = NULL;

TableRBTree* TableRBTree::New() const {
  return new TableRBTree;
}

void TableRBTree::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableRBTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TST.TableRBTree.Node nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableRBTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TST.TableRBTree.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableRBTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TST.TableRBTree.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableRBTree::ByteSize() const {
  int total_size = 0;
  
  // repeated .TST.TableRBTree.Node nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableRBTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableRBTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableRBTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableRBTree::MergeFrom(const TableRBTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableRBTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableRBTree::CopyFrom(const TableRBTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRBTree::IsInitialized() const {
  
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void TableRBTree::Swap(TableRBTree* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableRBTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableRBTree_descriptor_;
  metadata.reflection = TableRBTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeaderStorageBucket_Header::kIndexFieldNumber;
const int HeaderStorageBucket_Header::kSizeFieldNumber;
const int HeaderStorageBucket_Header::kHidingStateFieldNumber;
const int HeaderStorageBucket_Header::kNumberOfCellsFieldNumber;
const int HeaderStorageBucket_Header::kCellStyleFieldNumber;
const int HeaderStorageBucket_Header::kTextStyleFieldNumber;
#endif  // !_MSC_VER

HeaderStorageBucket_Header::HeaderStorageBucket_Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeaderStorageBucket_Header::InitAsDefaultInstance() {
  cell_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

HeaderStorageBucket_Header::HeaderStorageBucket_Header(const HeaderStorageBucket_Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeaderStorageBucket_Header::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  size_ = 0;
  hidingstate_ = 0u;
  numberofcells_ = 0u;
  cell_style_ = NULL;
  text_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeaderStorageBucket_Header::~HeaderStorageBucket_Header() {
  SharedDtor();
}

void HeaderStorageBucket_Header::SharedDtor() {
  if (this != default_instance_) {
    delete cell_style_;
    delete text_style_;
  }
}

void HeaderStorageBucket_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderStorageBucket_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderStorageBucket_Header_descriptor_;
}

const HeaderStorageBucket_Header& HeaderStorageBucket_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

HeaderStorageBucket_Header* HeaderStorageBucket_Header::default_instance_ = NULL;

HeaderStorageBucket_Header* HeaderStorageBucket_Header::New() const {
  return new HeaderStorageBucket_Header;
}

void HeaderStorageBucket_Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    size_ = 0;
    hidingstate_ = 0u;
    numberofcells_ = 0u;
    if (has_cell_style()) {
      if (cell_style_ != NULL) cell_style_->::TSP::Reference::Clear();
    }
    if (has_text_style()) {
      if (text_style_ != NULL) text_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeaderStorageBucket_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_size;
        break;
      }
      
      // required float size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hidingState;
        break;
      }
      
      // required uint32 hidingState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidingState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hidingstate_)));
          set_has_hidingstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_numberOfCells;
        break;
      }
      
      // required uint32 numberOfCells = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfCells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numberofcells_)));
          set_has_numberofcells();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cell_style;
        break;
      }
      
      // optional .TSP.Reference cell_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text_style;
        break;
      }
      
      // optional .TSP.Reference text_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeaderStorageBucket_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // required float size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->size(), output);
  }
  
  // required uint32 hidingState = 3;
  if (has_hidingstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hidingstate(), output);
  }
  
  // required uint32 numberOfCells = 4;
  if (has_numberofcells()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numberofcells(), output);
  }
  
  // optional .TSP.Reference cell_style = 5;
  if (has_cell_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cell_style(), output);
  }
  
  // optional .TSP.Reference text_style = 6;
  if (has_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->text_style(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeaderStorageBucket_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // required float size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->size(), target);
  }
  
  // required uint32 hidingState = 3;
  if (has_hidingstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hidingstate(), target);
  }
  
  // required uint32 numberOfCells = 4;
  if (has_numberofcells()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numberofcells(), target);
  }
  
  // optional .TSP.Reference cell_style = 5;
  if (has_cell_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cell_style(), target);
  }
  
  // optional .TSP.Reference text_style = 6;
  if (has_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->text_style(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeaderStorageBucket_Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required float size = 2;
    if (has_size()) {
      total_size += 1 + 4;
    }
    
    // required uint32 hidingState = 3;
    if (has_hidingstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hidingstate());
    }
    
    // required uint32 numberOfCells = 4;
    if (has_numberofcells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numberofcells());
    }
    
    // optional .TSP.Reference cell_style = 5;
    if (has_cell_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_style());
    }
    
    // optional .TSP.Reference text_style = 6;
    if (has_text_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_style());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderStorageBucket_Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeaderStorageBucket_Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeaderStorageBucket_Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeaderStorageBucket_Header::MergeFrom(const HeaderStorageBucket_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_hidingstate()) {
      set_hidingstate(from.hidingstate());
    }
    if (from.has_numberofcells()) {
      set_numberofcells(from.numberofcells());
    }
    if (from.has_cell_style()) {
      mutable_cell_style()->::TSP::Reference::MergeFrom(from.cell_style());
    }
    if (from.has_text_style()) {
      mutable_text_style()->::TSP::Reference::MergeFrom(from.text_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeaderStorageBucket_Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderStorageBucket_Header::CopyFrom(const HeaderStorageBucket_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorageBucket_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_cell_style()) {
    if (!this->cell_style().IsInitialized()) return false;
  }
  if (has_text_style()) {
    if (!this->text_style().IsInitialized()) return false;
  }
  return true;
}

void HeaderStorageBucket_Header::Swap(HeaderStorageBucket_Header* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(size_, other->size_);
    std::swap(hidingstate_, other->hidingstate_);
    std::swap(numberofcells_, other->numberofcells_);
    std::swap(cell_style_, other->cell_style_);
    std::swap(text_style_, other->text_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeaderStorageBucket_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeaderStorageBucket_Header_descriptor_;
  metadata.reflection = HeaderStorageBucket_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HeaderStorageBucket::kBucketHashFunctionFieldNumber;
const int HeaderStorageBucket::kHeadersFieldNumber;
#endif  // !_MSC_VER

HeaderStorageBucket::HeaderStorageBucket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeaderStorageBucket::InitAsDefaultInstance() {
}

HeaderStorageBucket::HeaderStorageBucket(const HeaderStorageBucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeaderStorageBucket::SharedCtor() {
  _cached_size_ = 0;
  buckethashfunction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeaderStorageBucket::~HeaderStorageBucket() {
  SharedDtor();
}

void HeaderStorageBucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeaderStorageBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderStorageBucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderStorageBucket_descriptor_;
}

const HeaderStorageBucket& HeaderStorageBucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

HeaderStorageBucket* HeaderStorageBucket::default_instance_ = NULL;

HeaderStorageBucket* HeaderStorageBucket::New() const {
  return new HeaderStorageBucket;
}

void HeaderStorageBucket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buckethashfunction_ = 0u;
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeaderStorageBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bucketHashFunction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buckethashfunction_)));
          set_has_buckethashfunction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headers;
        break;
      }
      
      // repeated .TST.HeaderStorageBucket.Header headers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeaderStorageBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bucketHashFunction = 1;
  if (has_buckethashfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buckethashfunction(), output);
  }
  
  // repeated .TST.HeaderStorageBucket.Header headers = 2;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->headers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeaderStorageBucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bucketHashFunction = 1;
  if (has_buckethashfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buckethashfunction(), target);
  }
  
  // repeated .TST.HeaderStorageBucket.Header headers = 2;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->headers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeaderStorageBucket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bucketHashFunction = 1;
    if (has_buckethashfunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buckethashfunction());
    }
    
  }
  // repeated .TST.HeaderStorageBucket.Header headers = 2;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderStorageBucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeaderStorageBucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeaderStorageBucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeaderStorageBucket::MergeFrom(const HeaderStorageBucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buckethashfunction()) {
      set_buckethashfunction(from.buckethashfunction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeaderStorageBucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderStorageBucket::CopyFrom(const HeaderStorageBucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorageBucket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < headers_size(); i++) {
    if (!this->headers(i).IsInitialized()) return false;
  }
  return true;
}

void HeaderStorageBucket::Swap(HeaderStorageBucket* other) {
  if (other != this) {
    std::swap(buckethashfunction_, other->buckethashfunction_);
    headers_.Swap(&other->headers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeaderStorageBucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeaderStorageBucket_descriptor_;
  metadata.reflection = HeaderStorageBucket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeaderStorage::kBucketHashFunctionFieldNumber;
const int HeaderStorage::kBucketsFieldNumber;
#endif  // !_MSC_VER

HeaderStorage::HeaderStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeaderStorage::InitAsDefaultInstance() {
}

HeaderStorage::HeaderStorage(const HeaderStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeaderStorage::SharedCtor() {
  _cached_size_ = 0;
  buckethashfunction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeaderStorage::~HeaderStorage() {
  SharedDtor();
}

void HeaderStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeaderStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderStorage_descriptor_;
}

const HeaderStorage& HeaderStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

HeaderStorage* HeaderStorage::default_instance_ = NULL;

HeaderStorage* HeaderStorage::New() const {
  return new HeaderStorage;
}

void HeaderStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buckethashfunction_ = 0u;
  }
  buckets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeaderStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bucketHashFunction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buckethashfunction_)));
          set_has_buckethashfunction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buckets;
        break;
      }
      
      // repeated .TSP.Reference buckets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buckets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buckets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeaderStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bucketHashFunction = 1;
  if (has_buckethashfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buckethashfunction(), output);
  }
  
  // repeated .TSP.Reference buckets = 2;
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buckets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeaderStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bucketHashFunction = 1;
  if (has_buckethashfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buckethashfunction(), target);
  }
  
  // repeated .TSP.Reference buckets = 2;
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buckets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeaderStorage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bucketHashFunction = 1;
    if (has_buckethashfunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buckethashfunction());
    }
    
  }
  // repeated .TSP.Reference buckets = 2;
  total_size += 1 * this->buckets_size();
  for (int i = 0; i < this->buckets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buckets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeaderStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeaderStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeaderStorage::MergeFrom(const HeaderStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  buckets_.MergeFrom(from.buckets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buckethashfunction()) {
      set_buckethashfunction(from.buckethashfunction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeaderStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderStorage::CopyFrom(const HeaderStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < buckets_size(); i++) {
    if (!this->buckets(i).IsInitialized()) return false;
  }
  return true;
}

void HeaderStorage::Swap(HeaderStorage* other) {
  if (other != this) {
    std::swap(buckethashfunction_, other->buckethashfunction_);
    buckets_.Swap(&other->buckets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeaderStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeaderStorage_descriptor_;
  metadata.reflection = HeaderStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataStore::kRowHeadersFieldNumber;
const int DataStore::kColumnHeadersFieldNumber;
const int DataStore::kTilesFieldNumber;
const int DataStore::kStringTableFieldNumber;
const int DataStore::kStyleTableFieldNumber;
const int DataStore::kFormulaTableFieldNumber;
const int DataStore::kFormulaErrorTableFieldNumber;
const int DataStore::kFormatTableFieldNumber;
const int DataStore::kMultipleChoiceListFormatTableFieldNumber;
const int DataStore::kMergeRegionMapFieldNumber;
const int DataStore::kCustomFormatTableFieldNumber;
const int DataStore::kNextRowStripIDFieldNumber;
const int DataStore::kNextColumnStripIDFieldNumber;
const int DataStore::kRowTileTreeFieldNumber;
const int DataStore::kColumnTileTreeFieldNumber;
const int DataStore::kStorageVersionFieldNumber;
const int DataStore::kRichTextPayloadTableFieldNumber;
const int DataStore::kConditionalstyletableFieldNumber;
const int DataStore::kCommentStorageTableFieldNumber;
#endif  // !_MSC_VER

DataStore::DataStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataStore::InitAsDefaultInstance() {
  rowheaders_ = const_cast< ::TST::HeaderStorage*>(&::TST::HeaderStorage::default_instance());
  columnheaders_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  tiles_ = const_cast< ::TST::TileStorage*>(&::TST::TileStorage::default_instance());
  stringtable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  styletable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  formulatable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  formulaerrortable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  formattable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  multiplechoicelistformattable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  merge_region_map_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  customformattable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  rowtiletree_ = const_cast< ::TST::TableRBTree*>(&::TST::TableRBTree::default_instance());
  columntiletree_ = const_cast< ::TST::TableRBTree*>(&::TST::TableRBTree::default_instance());
  richtextpayloadtable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  conditionalstyletable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  commentstoragetable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DataStore::DataStore(const DataStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataStore::SharedCtor() {
  _cached_size_ = 0;
  rowheaders_ = NULL;
  columnheaders_ = NULL;
  tiles_ = NULL;
  stringtable_ = NULL;
  styletable_ = NULL;
  formulatable_ = NULL;
  formulaerrortable_ = NULL;
  formattable_ = NULL;
  multiplechoicelistformattable_ = NULL;
  merge_region_map_ = NULL;
  customformattable_ = NULL;
  nextrowstripid_ = 0u;
  nextcolumnstripid_ = 0u;
  rowtiletree_ = NULL;
  columntiletree_ = NULL;
  storage_version_ = 0u;
  richtextpayloadtable_ = NULL;
  conditionalstyletable_ = NULL;
  commentstoragetable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataStore::~DataStore() {
  SharedDtor();
}

void DataStore::SharedDtor() {
  if (this != default_instance_) {
    delete rowheaders_;
    delete columnheaders_;
    delete tiles_;
    delete stringtable_;
    delete styletable_;
    delete formulatable_;
    delete formulaerrortable_;
    delete formattable_;
    delete multiplechoicelistformattable_;
    delete merge_region_map_;
    delete customformattable_;
    delete rowtiletree_;
    delete columntiletree_;
    delete richtextpayloadtable_;
    delete conditionalstyletable_;
    delete commentstoragetable_;
  }
}

void DataStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataStore_descriptor_;
}

const DataStore& DataStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

DataStore* DataStore::default_instance_ = NULL;

DataStore* DataStore::New() const {
  return new DataStore;
}

void DataStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rowheaders()) {
      if (rowheaders_ != NULL) rowheaders_->::TST::HeaderStorage::Clear();
    }
    if (has_columnheaders()) {
      if (columnheaders_ != NULL) columnheaders_->::TSP::Reference::Clear();
    }
    if (has_tiles()) {
      if (tiles_ != NULL) tiles_->::TST::TileStorage::Clear();
    }
    if (has_stringtable()) {
      if (stringtable_ != NULL) stringtable_->::TSP::Reference::Clear();
    }
    if (has_styletable()) {
      if (styletable_ != NULL) styletable_->::TSP::Reference::Clear();
    }
    if (has_formulatable()) {
      if (formulatable_ != NULL) formulatable_->::TSP::Reference::Clear();
    }
    if (has_formulaerrortable()) {
      if (formulaerrortable_ != NULL) formulaerrortable_->::TSP::Reference::Clear();
    }
    if (has_formattable()) {
      if (formattable_ != NULL) formattable_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_multiplechoicelistformattable()) {
      if (multiplechoicelistformattable_ != NULL) multiplechoicelistformattable_->::TSP::Reference::Clear();
    }
    if (has_merge_region_map()) {
      if (merge_region_map_ != NULL) merge_region_map_->::TSP::Reference::Clear();
    }
    if (has_customformattable()) {
      if (customformattable_ != NULL) customformattable_->::TSP::Reference::Clear();
    }
    nextrowstripid_ = 0u;
    nextcolumnstripid_ = 0u;
    if (has_rowtiletree()) {
      if (rowtiletree_ != NULL) rowtiletree_->::TST::TableRBTree::Clear();
    }
    if (has_columntiletree()) {
      if (columntiletree_ != NULL) columntiletree_->::TST::TableRBTree::Clear();
    }
    storage_version_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_richtextpayloadtable()) {
      if (richtextpayloadtable_ != NULL) richtextpayloadtable_->::TSP::Reference::Clear();
    }
    if (has_conditionalstyletable()) {
      if (conditionalstyletable_ != NULL) conditionalstyletable_->::TSP::Reference::Clear();
    }
    if (has_commentstoragetable()) {
      if (commentstoragetable_ != NULL) commentstoragetable_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.HeaderStorage rowHeaders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rowheaders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_columnHeaders;
        break;
      }
      
      // required .TSP.Reference columnHeaders = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnHeaders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_columnheaders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tiles;
        break;
      }
      
      // required .TST.TileStorage tiles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stringTable;
        break;
      }
      
      // required .TSP.Reference stringTable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_styleTable;
        break;
      }
      
      // required .TSP.Reference styleTable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_styleTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_styletable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_formulaTable;
        break;
      }
      
      // required .TSP.Reference formulaTable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formulaTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formulatable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nextRowStripID;
        break;
      }
      
      // required uint32 nextRowStripID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextRowStripID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextrowstripid_)));
          set_has_nextrowstripid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nextColumnStripID;
        break;
      }
      
      // required uint32 nextColumnStripID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextColumnStripID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextcolumnstripid_)));
          set_has_nextcolumnstripid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rowTileTree;
        break;
      }
      
      // required .TST.TableRBTree rowTileTree = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rowTileTree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rowtiletree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_columnTileTree;
        break;
      }
      
      // required .TST.TableRBTree columnTileTree = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnTileTree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_columntiletree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_formatTable;
        break;
      }
      
      // required .TSP.Reference formatTable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formatTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formattable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_formulaErrorTable;
        break;
      }
      
      // optional .TSP.Reference formulaErrorTable = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formulaErrorTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formulaerrortable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_merge_region_map;
        break;
      }
      
      // optional .TSP.Reference merge_region_map = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merge_region_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_region_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_storage_version;
        break;
      }
      
      // optional uint32 storage_version = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_version_)));
          set_has_storage_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_customFormatTable;
        break;
      }
      
      // optional .TSP.Reference customFormatTable = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customFormatTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customformattable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_multipleChoiceListFormatTable;
        break;
      }
      
      // optional .TSP.Reference multipleChoiceListFormatTable = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multipleChoiceListFormatTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiplechoicelistformattable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_richTextPayloadTable;
        break;
      }
      
      // optional .TSP.Reference richTextPayloadTable = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_richTextPayloadTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_richtextpayloadtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_conditionalstyletable;
        break;
      }
      
      // optional .TSP.Reference conditionalstyletable = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditionalstyletable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditionalstyletable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_commentStorageTable;
        break;
      }
      
      // optional .TSP.Reference commentStorageTable = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commentStorageTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commentstoragetable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.HeaderStorage rowHeaders = 1;
  if (has_rowheaders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rowheaders(), output);
  }
  
  // required .TSP.Reference columnHeaders = 2;
  if (has_columnheaders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columnheaders(), output);
  }
  
  // required .TST.TileStorage tiles = 3;
  if (has_tiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tiles(), output);
  }
  
  // required .TSP.Reference stringTable = 4;
  if (has_stringtable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stringtable(), output);
  }
  
  // required .TSP.Reference styleTable = 5;
  if (has_styletable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->styletable(), output);
  }
  
  // required .TSP.Reference formulaTable = 6;
  if (has_formulatable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->formulatable(), output);
  }
  
  // required uint32 nextRowStripID = 7;
  if (has_nextrowstripid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nextrowstripid(), output);
  }
  
  // required uint32 nextColumnStripID = 8;
  if (has_nextcolumnstripid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nextcolumnstripid(), output);
  }
  
  // required .TST.TableRBTree rowTileTree = 9;
  if (has_rowtiletree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rowtiletree(), output);
  }
  
  // required .TST.TableRBTree columnTileTree = 10;
  if (has_columntiletree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->columntiletree(), output);
  }
  
  // required .TSP.Reference formatTable = 11;
  if (has_formattable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->formattable(), output);
  }
  
  // optional .TSP.Reference formulaErrorTable = 12;
  if (has_formulaerrortable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->formulaerrortable(), output);
  }
  
  // optional .TSP.Reference merge_region_map = 13;
  if (has_merge_region_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->merge_region_map(), output);
  }
  
  // optional uint32 storage_version = 14;
  if (has_storage_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->storage_version(), output);
  }
  
  // optional .TSP.Reference customFormatTable = 15;
  if (has_customformattable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->customformattable(), output);
  }
  
  // optional .TSP.Reference multipleChoiceListFormatTable = 16;
  if (has_multiplechoicelistformattable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->multiplechoicelistformattable(), output);
  }
  
  // optional .TSP.Reference richTextPayloadTable = 17;
  if (has_richtextpayloadtable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->richtextpayloadtable(), output);
  }
  
  // optional .TSP.Reference conditionalstyletable = 18;
  if (has_conditionalstyletable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->conditionalstyletable(), output);
  }
  
  // optional .TSP.Reference commentStorageTable = 19;
  if (has_commentstoragetable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->commentstoragetable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.HeaderStorage rowHeaders = 1;
  if (has_rowheaders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rowheaders(), target);
  }
  
  // required .TSP.Reference columnHeaders = 2;
  if (has_columnheaders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columnheaders(), target);
  }
  
  // required .TST.TileStorage tiles = 3;
  if (has_tiles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tiles(), target);
  }
  
  // required .TSP.Reference stringTable = 4;
  if (has_stringtable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stringtable(), target);
  }
  
  // required .TSP.Reference styleTable = 5;
  if (has_styletable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->styletable(), target);
  }
  
  // required .TSP.Reference formulaTable = 6;
  if (has_formulatable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->formulatable(), target);
  }
  
  // required uint32 nextRowStripID = 7;
  if (has_nextrowstripid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nextrowstripid(), target);
  }
  
  // required uint32 nextColumnStripID = 8;
  if (has_nextcolumnstripid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nextcolumnstripid(), target);
  }
  
  // required .TST.TableRBTree rowTileTree = 9;
  if (has_rowtiletree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rowtiletree(), target);
  }
  
  // required .TST.TableRBTree columnTileTree = 10;
  if (has_columntiletree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->columntiletree(), target);
  }
  
  // required .TSP.Reference formatTable = 11;
  if (has_formattable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->formattable(), target);
  }
  
  // optional .TSP.Reference formulaErrorTable = 12;
  if (has_formulaerrortable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->formulaerrortable(), target);
  }
  
  // optional .TSP.Reference merge_region_map = 13;
  if (has_merge_region_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->merge_region_map(), target);
  }
  
  // optional uint32 storage_version = 14;
  if (has_storage_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->storage_version(), target);
  }
  
  // optional .TSP.Reference customFormatTable = 15;
  if (has_customformattable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->customformattable(), target);
  }
  
  // optional .TSP.Reference multipleChoiceListFormatTable = 16;
  if (has_multiplechoicelistformattable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->multiplechoicelistformattable(), target);
  }
  
  // optional .TSP.Reference richTextPayloadTable = 17;
  if (has_richtextpayloadtable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->richtextpayloadtable(), target);
  }
  
  // optional .TSP.Reference conditionalstyletable = 18;
  if (has_conditionalstyletable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->conditionalstyletable(), target);
  }
  
  // optional .TSP.Reference commentStorageTable = 19;
  if (has_commentstoragetable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->commentstoragetable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataStore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.HeaderStorage rowHeaders = 1;
    if (has_rowheaders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rowheaders());
    }
    
    // required .TSP.Reference columnHeaders = 2;
    if (has_columnheaders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columnheaders());
    }
    
    // required .TST.TileStorage tiles = 3;
    if (has_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tiles());
    }
    
    // required .TSP.Reference stringTable = 4;
    if (has_stringtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stringtable());
    }
    
    // required .TSP.Reference styleTable = 5;
    if (has_styletable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->styletable());
    }
    
    // required .TSP.Reference formulaTable = 6;
    if (has_formulatable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formulatable());
    }
    
    // optional .TSP.Reference formulaErrorTable = 12;
    if (has_formulaerrortable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formulaerrortable());
    }
    
    // required .TSP.Reference formatTable = 11;
    if (has_formattable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formattable());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Reference multipleChoiceListFormatTable = 16;
    if (has_multiplechoicelistformattable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multiplechoicelistformattable());
    }
    
    // optional .TSP.Reference merge_region_map = 13;
    if (has_merge_region_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->merge_region_map());
    }
    
    // optional .TSP.Reference customFormatTable = 15;
    if (has_customformattable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->customformattable());
    }
    
    // required uint32 nextRowStripID = 7;
    if (has_nextrowstripid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextrowstripid());
    }
    
    // required uint32 nextColumnStripID = 8;
    if (has_nextcolumnstripid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextcolumnstripid());
    }
    
    // required .TST.TableRBTree rowTileTree = 9;
    if (has_rowtiletree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rowtiletree());
    }
    
    // required .TST.TableRBTree columnTileTree = 10;
    if (has_columntiletree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columntiletree());
    }
    
    // optional uint32 storage_version = 14;
    if (has_storage_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_version());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSP.Reference richTextPayloadTable = 17;
    if (has_richtextpayloadtable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->richtextpayloadtable());
    }
    
    // optional .TSP.Reference conditionalstyletable = 18;
    if (has_conditionalstyletable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditionalstyletable());
    }
    
    // optional .TSP.Reference commentStorageTable = 19;
    if (has_commentstoragetable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commentstoragetable());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataStore::MergeFrom(const DataStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rowheaders()) {
      mutable_rowheaders()->::TST::HeaderStorage::MergeFrom(from.rowheaders());
    }
    if (from.has_columnheaders()) {
      mutable_columnheaders()->::TSP::Reference::MergeFrom(from.columnheaders());
    }
    if (from.has_tiles()) {
      mutable_tiles()->::TST::TileStorage::MergeFrom(from.tiles());
    }
    if (from.has_stringtable()) {
      mutable_stringtable()->::TSP::Reference::MergeFrom(from.stringtable());
    }
    if (from.has_styletable()) {
      mutable_styletable()->::TSP::Reference::MergeFrom(from.styletable());
    }
    if (from.has_formulatable()) {
      mutable_formulatable()->::TSP::Reference::MergeFrom(from.formulatable());
    }
    if (from.has_formulaerrortable()) {
      mutable_formulaerrortable()->::TSP::Reference::MergeFrom(from.formulaerrortable());
    }
    if (from.has_formattable()) {
      mutable_formattable()->::TSP::Reference::MergeFrom(from.formattable());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multiplechoicelistformattable()) {
      mutable_multiplechoicelistformattable()->::TSP::Reference::MergeFrom(from.multiplechoicelistformattable());
    }
    if (from.has_merge_region_map()) {
      mutable_merge_region_map()->::TSP::Reference::MergeFrom(from.merge_region_map());
    }
    if (from.has_customformattable()) {
      mutable_customformattable()->::TSP::Reference::MergeFrom(from.customformattable());
    }
    if (from.has_nextrowstripid()) {
      set_nextrowstripid(from.nextrowstripid());
    }
    if (from.has_nextcolumnstripid()) {
      set_nextcolumnstripid(from.nextcolumnstripid());
    }
    if (from.has_rowtiletree()) {
      mutable_rowtiletree()->::TST::TableRBTree::MergeFrom(from.rowtiletree());
    }
    if (from.has_columntiletree()) {
      mutable_columntiletree()->::TST::TableRBTree::MergeFrom(from.columntiletree());
    }
    if (from.has_storage_version()) {
      set_storage_version(from.storage_version());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_richtextpayloadtable()) {
      mutable_richtextpayloadtable()->::TSP::Reference::MergeFrom(from.richtextpayloadtable());
    }
    if (from.has_conditionalstyletable()) {
      mutable_conditionalstyletable()->::TSP::Reference::MergeFrom(from.conditionalstyletable());
    }
    if (from.has_commentstoragetable()) {
      mutable_commentstoragetable()->::TSP::Reference::MergeFrom(from.commentstoragetable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataStore::CopyFrom(const DataStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x000078bf) != 0x000078bf) return false;
  
  if (has_rowheaders()) {
    if (!this->rowheaders().IsInitialized()) return false;
  }
  if (has_columnheaders()) {
    if (!this->columnheaders().IsInitialized()) return false;
  }
  if (has_tiles()) {
    if (!this->tiles().IsInitialized()) return false;
  }
  if (has_stringtable()) {
    if (!this->stringtable().IsInitialized()) return false;
  }
  if (has_styletable()) {
    if (!this->styletable().IsInitialized()) return false;
  }
  if (has_formulatable()) {
    if (!this->formulatable().IsInitialized()) return false;
  }
  if (has_formulaerrortable()) {
    if (!this->formulaerrortable().IsInitialized()) return false;
  }
  if (has_formattable()) {
    if (!this->formattable().IsInitialized()) return false;
  }
  if (has_multiplechoicelistformattable()) {
    if (!this->multiplechoicelistformattable().IsInitialized()) return false;
  }
  if (has_merge_region_map()) {
    if (!this->merge_region_map().IsInitialized()) return false;
  }
  if (has_customformattable()) {
    if (!this->customformattable().IsInitialized()) return false;
  }
  if (has_rowtiletree()) {
    if (!this->rowtiletree().IsInitialized()) return false;
  }
  if (has_columntiletree()) {
    if (!this->columntiletree().IsInitialized()) return false;
  }
  if (has_richtextpayloadtable()) {
    if (!this->richtextpayloadtable().IsInitialized()) return false;
  }
  if (has_conditionalstyletable()) {
    if (!this->conditionalstyletable().IsInitialized()) return false;
  }
  if (has_commentstoragetable()) {
    if (!this->commentstoragetable().IsInitialized()) return false;
  }
  return true;
}

void DataStore::Swap(DataStore* other) {
  if (other != this) {
    std::swap(rowheaders_, other->rowheaders_);
    std::swap(columnheaders_, other->columnheaders_);
    std::swap(tiles_, other->tiles_);
    std::swap(stringtable_, other->stringtable_);
    std::swap(styletable_, other->styletable_);
    std::swap(formulatable_, other->formulatable_);
    std::swap(formulaerrortable_, other->formulaerrortable_);
    std::swap(formattable_, other->formattable_);
    std::swap(multiplechoicelistformattable_, other->multiplechoicelistformattable_);
    std::swap(merge_region_map_, other->merge_region_map_);
    std::swap(customformattable_, other->customformattable_);
    std::swap(nextrowstripid_, other->nextrowstripid_);
    std::swap(nextcolumnstripid_, other->nextcolumnstripid_);
    std::swap(rowtiletree_, other->rowtiletree_);
    std::swap(columntiletree_, other->columntiletree_);
    std::swap(storage_version_, other->storage_version_);
    std::swap(richtextpayloadtable_, other->richtextpayloadtable_);
    std::swap(conditionalstyletable_, other->conditionalstyletable_);
    std::swap(commentstoragetable_, other->commentstoragetable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataStore_descriptor_;
  metadata.reflection = DataStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableInfoArchive::kSuperFieldNumber;
const int TableInfoArchive::kTableModelFieldNumber;
const int TableInfoArchive::kEditingStateFieldNumber;
#endif  // !_MSC_VER

TableInfoArchive::TableInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableInfoArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::DrawableArchive*>(&::TSD::DrawableArchive::default_instance());
  tablemodel_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  editingstate_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TableInfoArchive::TableInfoArchive(const TableInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tablemodel_ = NULL;
  editingstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableInfoArchive::~TableInfoArchive() {
  SharedDtor();
}

void TableInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete tablemodel_;
    delete editingstate_;
  }
}

void TableInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableInfoArchive_descriptor_;
}

const TableInfoArchive& TableInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableInfoArchive* TableInfoArchive::default_instance_ = NULL;

TableInfoArchive* TableInfoArchive::New() const {
  return new TableInfoArchive;
}

void TableInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
    }
    if (has_tablemodel()) {
      if (tablemodel_ != NULL) tablemodel_->::TSP::Reference::Clear();
    }
    if (has_editingstate()) {
      if (editingstate_ != NULL) editingstate_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.DrawableArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tableModel;
        break;
      }
      
      // required .TSP.Reference tableModel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tablemodel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_editingState;
        break;
      }
      
      // optional .TSP.Reference editingState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editingState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editingstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required .TSP.Reference tableModel = 2;
  if (has_tablemodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tablemodel(), output);
  }
  
  // optional .TSP.Reference editingState = 3;
  if (has_editingstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->editingstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required .TSP.Reference tableModel = 2;
  if (has_tablemodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tablemodel(), target);
  }
  
  // optional .TSP.Reference editingState = 3;
  if (has_editingstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->editingstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableInfoArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.DrawableArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required .TSP.Reference tableModel = 2;
    if (has_tablemodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tablemodel());
    }
    
    // optional .TSP.Reference editingState = 3;
    if (has_editingstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editingstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableInfoArchive::MergeFrom(const TableInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::DrawableArchive::MergeFrom(from.super());
    }
    if (from.has_tablemodel()) {
      mutable_tablemodel()->::TSP::Reference::MergeFrom(from.tablemodel());
    }
    if (from.has_editingstate()) {
      mutable_editingstate()->::TSP::Reference::MergeFrom(from.editingstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfoArchive::CopyFrom(const TableInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tablemodel()) {
    if (!this->tablemodel().IsInitialized()) return false;
  }
  if (has_editingstate()) {
    if (!this->editingstate().IsInitialized()) return false;
  }
  return true;
}

void TableInfoArchive::Swap(TableInfoArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tablemodel_, other->tablemodel_);
    std::swap(editingstate_, other->editingstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableInfoArchive_descriptor_;
  metadata.reflection = TableInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditingStateArchive::kEditingStorageFieldNumber;
const int EditingStateArchive::kEditingCellFieldNumber;
const int EditingStateArchive::kSelectionFieldNumber;
const int EditingStateArchive::kLasteditingcellidFieldNumber;
const int EditingStateArchive::kEditingcellidFieldNumber;
const int EditingStateArchive::kDeprecatedSetupTextUndoRedoTransactionFieldNumber;
const int EditingStateArchive::kCellWasEditedInCurrentSessionFieldNumber;
#endif  // !_MSC_VER

EditingStateArchive::EditingStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditingStateArchive::InitAsDefaultInstance() {
  editingstorage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  editingcell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  lasteditingcellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  editingcellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  deprecated_setup_textundoredotransaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

EditingStateArchive::EditingStateArchive(const EditingStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditingStateArchive::SharedCtor() {
  _cached_size_ = 0;
  editingstorage_ = NULL;
  editingcell_ = NULL;
  selection_ = NULL;
  lasteditingcellid_ = NULL;
  editingcellid_ = NULL;
  deprecated_setup_textundoredotransaction_ = NULL;
  cell_was_edited_in_current_session_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditingStateArchive::~EditingStateArchive() {
  SharedDtor();
}

void EditingStateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete editingstorage_;
    delete editingcell_;
    delete selection_;
    delete lasteditingcellid_;
    delete editingcellid_;
    delete deprecated_setup_textundoredotransaction_;
  }
}

void EditingStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditingStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditingStateArchive_descriptor_;
}

const EditingStateArchive& EditingStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

EditingStateArchive* EditingStateArchive::default_instance_ = NULL;

EditingStateArchive* EditingStateArchive::New() const {
  return new EditingStateArchive;
}

void EditingStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_editingstorage()) {
      if (editingstorage_ != NULL) editingstorage_->::TSP::Reference::Clear();
    }
    if (has_editingcell()) {
      if (editingcell_ != NULL) editingcell_->::TST::Cell::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_lasteditingcellid()) {
      if (lasteditingcellid_ != NULL) lasteditingcellid_->::TST::CellID::Clear();
    }
    if (has_editingcellid()) {
      if (editingcellid_ != NULL) editingcellid_->::TST::CellID::Clear();
    }
    if (has_deprecated_setup_textundoredotransaction()) {
      if (deprecated_setup_textundoredotransaction_ != NULL) deprecated_setup_textundoredotransaction_->::TSWP::UndoTransaction::Clear();
    }
    cell_was_edited_in_current_session_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditingStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference editingStorage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editingstorage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_editingCell;
        break;
      }
      
      // required .TST.Cell editingCell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editingCell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editingcell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selection;
        break;
      }
      
      // optional .TST.SelectionArchive selection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lasteditingcellid;
        break;
      }
      
      // optional .TST.CellID lasteditingcellid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lasteditingcellid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lasteditingcellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_editingcellid;
        break;
      }
      
      // optional .TST.CellID editingcellid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editingcellid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editingcellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deprecated_setup_textUndoRedoTransaction;
        break;
      }
      
      // optional .TSWP.UndoTransaction deprecated_setup_textUndoRedoTransaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_setup_textUndoRedoTransaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_setup_textundoredotransaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cell_was_edited_in_current_session;
        break;
      }
      
      // optional bool cell_was_edited_in_current_session = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_was_edited_in_current_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cell_was_edited_in_current_session_)));
          set_has_cell_was_edited_in_current_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditingStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference editingStorage = 1;
  if (has_editingstorage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->editingstorage(), output);
  }
  
  // required .TST.Cell editingCell = 2;
  if (has_editingcell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->editingcell(), output);
  }
  
  // optional .TST.SelectionArchive selection = 3;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selection(), output);
  }
  
  // optional .TST.CellID lasteditingcellid = 4;
  if (has_lasteditingcellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lasteditingcellid(), output);
  }
  
  // optional .TST.CellID editingcellid = 5;
  if (has_editingcellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->editingcellid(), output);
  }
  
  // optional .TSWP.UndoTransaction deprecated_setup_textUndoRedoTransaction = 6;
  if (has_deprecated_setup_textundoredotransaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deprecated_setup_textundoredotransaction(), output);
  }
  
  // optional bool cell_was_edited_in_current_session = 7;
  if (has_cell_was_edited_in_current_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->cell_was_edited_in_current_session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditingStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference editingStorage = 1;
  if (has_editingstorage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->editingstorage(), target);
  }
  
  // required .TST.Cell editingCell = 2;
  if (has_editingcell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->editingcell(), target);
  }
  
  // optional .TST.SelectionArchive selection = 3;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selection(), target);
  }
  
  // optional .TST.CellID lasteditingcellid = 4;
  if (has_lasteditingcellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lasteditingcellid(), target);
  }
  
  // optional .TST.CellID editingcellid = 5;
  if (has_editingcellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->editingcellid(), target);
  }
  
  // optional .TSWP.UndoTransaction deprecated_setup_textUndoRedoTransaction = 6;
  if (has_deprecated_setup_textundoredotransaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deprecated_setup_textundoredotransaction(), target);
  }
  
  // optional bool cell_was_edited_in_current_session = 7;
  if (has_cell_was_edited_in_current_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->cell_was_edited_in_current_session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditingStateArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference editingStorage = 1;
    if (has_editingstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editingstorage());
    }
    
    // required .TST.Cell editingCell = 2;
    if (has_editingcell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editingcell());
    }
    
    // optional .TST.SelectionArchive selection = 3;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }
    
    // optional .TST.CellID lasteditingcellid = 4;
    if (has_lasteditingcellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lasteditingcellid());
    }
    
    // optional .TST.CellID editingcellid = 5;
    if (has_editingcellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editingcellid());
    }
    
    // optional .TSWP.UndoTransaction deprecated_setup_textUndoRedoTransaction = 6;
    if (has_deprecated_setup_textundoredotransaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_setup_textundoredotransaction());
    }
    
    // optional bool cell_was_edited_in_current_session = 7;
    if (has_cell_was_edited_in_current_session()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditingStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditingStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditingStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditingStateArchive::MergeFrom(const EditingStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_editingstorage()) {
      mutable_editingstorage()->::TSP::Reference::MergeFrom(from.editingstorage());
    }
    if (from.has_editingcell()) {
      mutable_editingcell()->::TST::Cell::MergeFrom(from.editingcell());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_lasteditingcellid()) {
      mutable_lasteditingcellid()->::TST::CellID::MergeFrom(from.lasteditingcellid());
    }
    if (from.has_editingcellid()) {
      mutable_editingcellid()->::TST::CellID::MergeFrom(from.editingcellid());
    }
    if (from.has_deprecated_setup_textundoredotransaction()) {
      mutable_deprecated_setup_textundoredotransaction()->::TSWP::UndoTransaction::MergeFrom(from.deprecated_setup_textundoredotransaction());
    }
    if (from.has_cell_was_edited_in_current_session()) {
      set_cell_was_edited_in_current_session(from.cell_was_edited_in_current_session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditingStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditingStateArchive::CopyFrom(const EditingStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditingStateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_editingstorage()) {
    if (!this->editingstorage().IsInitialized()) return false;
  }
  if (has_editingcell()) {
    if (!this->editingcell().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_lasteditingcellid()) {
    if (!this->lasteditingcellid().IsInitialized()) return false;
  }
  if (has_editingcellid()) {
    if (!this->editingcellid().IsInitialized()) return false;
  }
  if (has_deprecated_setup_textundoredotransaction()) {
    if (!this->deprecated_setup_textundoredotransaction().IsInitialized()) return false;
  }
  return true;
}

void EditingStateArchive::Swap(EditingStateArchive* other) {
  if (other != this) {
    std::swap(editingstorage_, other->editingstorage_);
    std::swap(editingcell_, other->editingcell_);
    std::swap(selection_, other->selection_);
    std::swap(lasteditingcellid_, other->lasteditingcellid_);
    std::swap(editingcellid_, other->editingcellid_);
    std::swap(deprecated_setup_textundoredotransaction_, other->deprecated_setup_textundoredotransaction_);
    std::swap(cell_was_edited_in_current_session_, other->cell_was_edited_in_current_session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditingStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditingStateArchive_descriptor_;
  metadata.reflection = EditingStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPTableInfoArchive::kSuperFieldNumber;
const int WPTableInfoArchive::kStorageFieldNumber;
#endif  // !_MSC_VER

WPTableInfoArchive::WPTableInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPTableInfoArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableInfoArchive*>(&::TST::TableInfoArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

WPTableInfoArchive::WPTableInfoArchive(const WPTableInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPTableInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPTableInfoArchive::~WPTableInfoArchive() {
  SharedDtor();
}

void WPTableInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
  }
}

void WPTableInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPTableInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPTableInfoArchive_descriptor_;
}

const WPTableInfoArchive& WPTableInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

WPTableInfoArchive* WPTableInfoArchive::default_instance_ = NULL;

WPTableInfoArchive* WPTableInfoArchive::New() const {
  return new WPTableInfoArchive;
}

void WPTableInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableInfoArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPTableInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableInfoArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }
      
      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPTableInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableInfoArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPTableInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableInfoArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPTableInfoArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableInfoArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPTableInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPTableInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPTableInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPTableInfoArchive::MergeFrom(const WPTableInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableInfoArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPTableInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPTableInfoArchive::CopyFrom(const WPTableInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPTableInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  return true;
}

void WPTableInfoArchive::Swap(WPTableInfoArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPTableInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPTableInfoArchive_descriptor_;
  metadata.reflection = WPTableInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableStyleNetworkArchive::kTableStyleFieldNumber;
const int TableStyleNetworkArchive::kBodyTextStyleFieldNumber;
const int TableStyleNetworkArchive::kHeaderRowTextStyleFieldNumber;
const int TableStyleNetworkArchive::kHeaderColumnTextStyleFieldNumber;
const int TableStyleNetworkArchive::kFooterRowTextStyleFieldNumber;
const int TableStyleNetworkArchive::kBodyCellStyleFieldNumber;
const int TableStyleNetworkArchive::kHeaderRowStyleFieldNumber;
const int TableStyleNetworkArchive::kHeaderColumnStyleFieldNumber;
const int TableStyleNetworkArchive::kFooterRowStyleFieldNumber;
const int TableStyleNetworkArchive::kTableNameStyleFieldNumber;
const int TableStyleNetworkArchive::kTableNameShapeStyleFieldNumber;
const int TableStyleNetworkArchive::kPresetIndexFieldNumber;
#endif  // !_MSC_VER

TableStyleNetworkArchive::TableStyleNetworkArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableStyleNetworkArchive::InitAsDefaultInstance() {
  table_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  body_text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  header_row_text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  header_column_text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  footer_row_text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  body_cell_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  header_row_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  header_column_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  footer_row_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  table_name_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  table_name_shape_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TableStyleNetworkArchive::TableStyleNetworkArchive(const TableStyleNetworkArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableStyleNetworkArchive::SharedCtor() {
  _cached_size_ = 0;
  table_style_ = NULL;
  body_text_style_ = NULL;
  header_row_text_style_ = NULL;
  header_column_text_style_ = NULL;
  footer_row_text_style_ = NULL;
  body_cell_style_ = NULL;
  header_row_style_ = NULL;
  header_column_style_ = NULL;
  footer_row_style_ = NULL;
  table_name_style_ = NULL;
  table_name_shape_style_ = NULL;
  preset_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableStyleNetworkArchive::~TableStyleNetworkArchive() {
  SharedDtor();
}

void TableStyleNetworkArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_style_;
    delete body_text_style_;
    delete header_row_text_style_;
    delete header_column_text_style_;
    delete footer_row_text_style_;
    delete body_cell_style_;
    delete header_row_style_;
    delete header_column_style_;
    delete footer_row_style_;
    delete table_name_style_;
    delete table_name_shape_style_;
  }
}

void TableStyleNetworkArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableStyleNetworkArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableStyleNetworkArchive_descriptor_;
}

const TableStyleNetworkArchive& TableStyleNetworkArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableStyleNetworkArchive* TableStyleNetworkArchive::default_instance_ = NULL;

TableStyleNetworkArchive* TableStyleNetworkArchive::New() const {
  return new TableStyleNetworkArchive;
}

void TableStyleNetworkArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_style()) {
      if (table_style_ != NULL) table_style_->::TSP::Reference::Clear();
    }
    if (has_body_text_style()) {
      if (body_text_style_ != NULL) body_text_style_->::TSP::Reference::Clear();
    }
    if (has_header_row_text_style()) {
      if (header_row_text_style_ != NULL) header_row_text_style_->::TSP::Reference::Clear();
    }
    if (has_header_column_text_style()) {
      if (header_column_text_style_ != NULL) header_column_text_style_->::TSP::Reference::Clear();
    }
    if (has_footer_row_text_style()) {
      if (footer_row_text_style_ != NULL) footer_row_text_style_->::TSP::Reference::Clear();
    }
    if (has_body_cell_style()) {
      if (body_cell_style_ != NULL) body_cell_style_->::TSP::Reference::Clear();
    }
    if (has_header_row_style()) {
      if (header_row_style_ != NULL) header_row_style_->::TSP::Reference::Clear();
    }
    if (has_header_column_style()) {
      if (header_column_style_ != NULL) header_column_style_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_footer_row_style()) {
      if (footer_row_style_ != NULL) footer_row_style_->::TSP::Reference::Clear();
    }
    if (has_table_name_style()) {
      if (table_name_style_ != NULL) table_name_style_->::TSP::Reference::Clear();
    }
    if (has_table_name_shape_style()) {
      if (table_name_shape_style_ != NULL) table_name_shape_style_->::TSP::Reference::Clear();
    }
    preset_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableStyleNetworkArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference body_text_style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header_row_text_style;
        break;
      }
      
      // required .TSP.Reference header_row_text_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_row_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_row_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_header_column_text_style;
        break;
      }
      
      // required .TSP.Reference header_column_text_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_column_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_column_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_footer_row_text_style;
        break;
      }
      
      // required .TSP.Reference footer_row_text_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_row_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_row_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body_cell_style;
        break;
      }
      
      // required .TSP.Reference body_cell_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_cell_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_cell_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_header_row_style;
        break;
      }
      
      // required .TSP.Reference header_row_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_row_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_row_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_header_column_style;
        break;
      }
      
      // required .TSP.Reference header_column_style = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_column_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_column_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_footer_row_style;
        break;
      }
      
      // required .TSP.Reference footer_row_style = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_row_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_row_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_table_style;
        break;
      }
      
      // required .TSP.Reference table_style = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_table_name_style;
        break;
      }
      
      // optional .TSP.Reference table_name_style = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_table_name_shape_style;
        break;
      }
      
      // optional .TSP.Reference table_name_shape_style = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name_shape_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name_shape_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_preset_index;
        break;
      }
      
      // optional uint32 preset_index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preset_index_)));
          set_has_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableStyleNetworkArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference body_text_style = 1;
  if (has_body_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->body_text_style(), output);
  }
  
  // required .TSP.Reference header_row_text_style = 2;
  if (has_header_row_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header_row_text_style(), output);
  }
  
  // required .TSP.Reference header_column_text_style = 3;
  if (has_header_column_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->header_column_text_style(), output);
  }
  
  // required .TSP.Reference footer_row_text_style = 4;
  if (has_footer_row_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->footer_row_text_style(), output);
  }
  
  // required .TSP.Reference body_cell_style = 5;
  if (has_body_cell_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->body_cell_style(), output);
  }
  
  // required .TSP.Reference header_row_style = 6;
  if (has_header_row_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->header_row_style(), output);
  }
  
  // required .TSP.Reference header_column_style = 7;
  if (has_header_column_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->header_column_style(), output);
  }
  
  // required .TSP.Reference footer_row_style = 8;
  if (has_footer_row_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->footer_row_style(), output);
  }
  
  // required .TSP.Reference table_style = 9;
  if (has_table_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->table_style(), output);
  }
  
  // optional .TSP.Reference table_name_style = 10;
  if (has_table_name_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->table_name_style(), output);
  }
  
  // optional .TSP.Reference table_name_shape_style = 11;
  if (has_table_name_shape_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->table_name_shape_style(), output);
  }
  
  // optional uint32 preset_index = 12;
  if (has_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->preset_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableStyleNetworkArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference body_text_style = 1;
  if (has_body_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->body_text_style(), target);
  }
  
  // required .TSP.Reference header_row_text_style = 2;
  if (has_header_row_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->header_row_text_style(), target);
  }
  
  // required .TSP.Reference header_column_text_style = 3;
  if (has_header_column_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->header_column_text_style(), target);
  }
  
  // required .TSP.Reference footer_row_text_style = 4;
  if (has_footer_row_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->footer_row_text_style(), target);
  }
  
  // required .TSP.Reference body_cell_style = 5;
  if (has_body_cell_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->body_cell_style(), target);
  }
  
  // required .TSP.Reference header_row_style = 6;
  if (has_header_row_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->header_row_style(), target);
  }
  
  // required .TSP.Reference header_column_style = 7;
  if (has_header_column_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->header_column_style(), target);
  }
  
  // required .TSP.Reference footer_row_style = 8;
  if (has_footer_row_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->footer_row_style(), target);
  }
  
  // required .TSP.Reference table_style = 9;
  if (has_table_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->table_style(), target);
  }
  
  // optional .TSP.Reference table_name_style = 10;
  if (has_table_name_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->table_name_style(), target);
  }
  
  // optional .TSP.Reference table_name_shape_style = 11;
  if (has_table_name_shape_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->table_name_shape_style(), target);
  }
  
  // optional uint32 preset_index = 12;
  if (has_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->preset_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableStyleNetworkArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference table_style = 9;
    if (has_table_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_style());
    }
    
    // required .TSP.Reference body_text_style = 1;
    if (has_body_text_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_text_style());
    }
    
    // required .TSP.Reference header_row_text_style = 2;
    if (has_header_row_text_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_row_text_style());
    }
    
    // required .TSP.Reference header_column_text_style = 3;
    if (has_header_column_text_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_column_text_style());
    }
    
    // required .TSP.Reference footer_row_text_style = 4;
    if (has_footer_row_text_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_row_text_style());
    }
    
    // required .TSP.Reference body_cell_style = 5;
    if (has_body_cell_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_cell_style());
    }
    
    // required .TSP.Reference header_row_style = 6;
    if (has_header_row_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_row_style());
    }
    
    // required .TSP.Reference header_column_style = 7;
    if (has_header_column_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_column_style());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .TSP.Reference footer_row_style = 8;
    if (has_footer_row_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_row_style());
    }
    
    // optional .TSP.Reference table_name_style = 10;
    if (has_table_name_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name_style());
    }
    
    // optional .TSP.Reference table_name_shape_style = 11;
    if (has_table_name_shape_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name_shape_style());
    }
    
    // optional uint32 preset_index = 12;
    if (has_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preset_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableStyleNetworkArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableStyleNetworkArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableStyleNetworkArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableStyleNetworkArchive::MergeFrom(const TableStyleNetworkArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_style()) {
      mutable_table_style()->::TSP::Reference::MergeFrom(from.table_style());
    }
    if (from.has_body_text_style()) {
      mutable_body_text_style()->::TSP::Reference::MergeFrom(from.body_text_style());
    }
    if (from.has_header_row_text_style()) {
      mutable_header_row_text_style()->::TSP::Reference::MergeFrom(from.header_row_text_style());
    }
    if (from.has_header_column_text_style()) {
      mutable_header_column_text_style()->::TSP::Reference::MergeFrom(from.header_column_text_style());
    }
    if (from.has_footer_row_text_style()) {
      mutable_footer_row_text_style()->::TSP::Reference::MergeFrom(from.footer_row_text_style());
    }
    if (from.has_body_cell_style()) {
      mutable_body_cell_style()->::TSP::Reference::MergeFrom(from.body_cell_style());
    }
    if (from.has_header_row_style()) {
      mutable_header_row_style()->::TSP::Reference::MergeFrom(from.header_row_style());
    }
    if (from.has_header_column_style()) {
      mutable_header_column_style()->::TSP::Reference::MergeFrom(from.header_column_style());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_footer_row_style()) {
      mutable_footer_row_style()->::TSP::Reference::MergeFrom(from.footer_row_style());
    }
    if (from.has_table_name_style()) {
      mutable_table_name_style()->::TSP::Reference::MergeFrom(from.table_name_style());
    }
    if (from.has_table_name_shape_style()) {
      mutable_table_name_shape_style()->::TSP::Reference::MergeFrom(from.table_name_shape_style());
    }
    if (from.has_preset_index()) {
      set_preset_index(from.preset_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableStyleNetworkArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableStyleNetworkArchive::CopyFrom(const TableStyleNetworkArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStyleNetworkArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  if (has_table_style()) {
    if (!this->table_style().IsInitialized()) return false;
  }
  if (has_body_text_style()) {
    if (!this->body_text_style().IsInitialized()) return false;
  }
  if (has_header_row_text_style()) {
    if (!this->header_row_text_style().IsInitialized()) return false;
  }
  if (has_header_column_text_style()) {
    if (!this->header_column_text_style().IsInitialized()) return false;
  }
  if (has_footer_row_text_style()) {
    if (!this->footer_row_text_style().IsInitialized()) return false;
  }
  if (has_body_cell_style()) {
    if (!this->body_cell_style().IsInitialized()) return false;
  }
  if (has_header_row_style()) {
    if (!this->header_row_style().IsInitialized()) return false;
  }
  if (has_header_column_style()) {
    if (!this->header_column_style().IsInitialized()) return false;
  }
  if (has_footer_row_style()) {
    if (!this->footer_row_style().IsInitialized()) return false;
  }
  if (has_table_name_style()) {
    if (!this->table_name_style().IsInitialized()) return false;
  }
  if (has_table_name_shape_style()) {
    if (!this->table_name_shape_style().IsInitialized()) return false;
  }
  return true;
}

void TableStyleNetworkArchive::Swap(TableStyleNetworkArchive* other) {
  if (other != this) {
    std::swap(table_style_, other->table_style_);
    std::swap(body_text_style_, other->body_text_style_);
    std::swap(header_row_text_style_, other->header_row_text_style_);
    std::swap(header_column_text_style_, other->header_column_text_style_);
    std::swap(footer_row_text_style_, other->footer_row_text_style_);
    std::swap(body_cell_style_, other->body_cell_style_);
    std::swap(header_row_style_, other->header_row_style_);
    std::swap(header_column_style_, other->header_column_style_);
    std::swap(footer_row_style_, other->footer_row_style_);
    std::swap(table_name_style_, other->table_name_style_);
    std::swap(table_name_shape_style_, other->table_name_shape_style_);
    std::swap(preset_index_, other->preset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableStyleNetworkArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableStyleNetworkArchive_descriptor_;
  metadata.reflection = TableStyleNetworkArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableModelArchive::kTableIdFieldNumber;
const int TableModelArchive::kFromTableIdFieldNumber;
const int TableModelArchive::kTableStyleFieldNumber;
const int TableModelArchive::kBodyTextStyleFieldNumber;
const int TableModelArchive::kHeaderRowTextStyleFieldNumber;
const int TableModelArchive::kHeaderColumnTextStyleFieldNumber;
const int TableModelArchive::kFooterRowTextStyleFieldNumber;
const int TableModelArchive::kBodyCellStyleFieldNumber;
const int TableModelArchive::kHeaderRowStyleFieldNumber;
const int TableModelArchive::kHeaderColumnStyleFieldNumber;
const int TableModelArchive::kFooterRowStyleFieldNumber;
const int TableModelArchive::kTableNameStyleFieldNumber;
const int TableModelArchive::kTableNameShapeStyleFieldNumber;
const int TableModelArchive::kDataStoreFieldNumber;
const int TableModelArchive::kProviderFieldNumber;
const int TableModelArchive::kNumberOfRowsFieldNumber;
const int TableModelArchive::kNumberOfColumnsFieldNumber;
const int TableModelArchive::kTableNameFieldNumber;
const int TableModelArchive::kTableNameEnabledFieldNumber;
const int TableModelArchive::kTableNameHeightFieldNumber;
const int TableModelArchive::kTableNameBorderEnabledFieldNumber;
const int TableModelArchive::kNumberOfHeaderRowsFieldNumber;
const int TableModelArchive::kNumberOfHeaderColumnsFieldNumber;
const int TableModelArchive::kNumberOfFooterRowsFieldNumber;
const int TableModelArchive::kHeaderRowsFrozenFieldNumber;
const int TableModelArchive::kHeaderColumnsFrozenFieldNumber;
const int TableModelArchive::kNumberOfHiddenRowsFieldNumber;
const int TableModelArchive::kNumberOfHiddenColumnsFieldNumber;
const int TableModelArchive::kNumberOfUserHiddenRowsFieldNumber;
const int TableModelArchive::kNumberOfUserHiddenColumnsFieldNumber;
const int TableModelArchive::kNumberOfFilteredRowsFieldNumber;
const int TableModelArchive::kDefaultRowHeightFieldNumber;
const int TableModelArchive::kDefaultColumnWidthFieldNumber;
const int TableModelArchive::kOriginOffsetFieldNumber;
const int TableModelArchive::kPresetIndexFieldNumber;
const int TableModelArchive::kRepeatingHeaderRowsEnabledFieldNumber;
const int TableModelArchive::kRepeatingHeaderColumnsEnabledFieldNumber;
const int TableModelArchive::kStyleApplyClearsAllFieldNumber;
const int TableModelArchive::kHiddenStateFormulaOwnerForColumnsFieldNumber;
const int TableModelArchive::kHiddenStateFormulaOwnerForRowsFieldNumber;
const int TableModelArchive::kFilterSetFieldNumber;
const int TableModelArchive::kConditionalStyleFormulaOwnerIdFieldNumber;
#endif  // !_MSC_VER

TableModelArchive::TableModelArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableModelArchive::InitAsDefaultInstance() {
  table_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  body_text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  header_row_text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  header_column_text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  footer_row_text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  body_cell_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  header_row_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  header_column_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  footer_row_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  table_name_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  table_name_shape_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  data_store_ = const_cast< ::TST::DataStore*>(&::TST::DataStore::default_instance());
  provider_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  origin_offset_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  hidden_state_formula_owner_for_columns_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  hidden_state_formula_owner_for_rows_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  filter_set_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  conditional_style_formula_owner_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

TableModelArchive::TableModelArchive(const TableModelArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableModelArchive::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_table_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_style_ = NULL;
  body_text_style_ = NULL;
  header_row_text_style_ = NULL;
  header_column_text_style_ = NULL;
  footer_row_text_style_ = NULL;
  body_cell_style_ = NULL;
  header_row_style_ = NULL;
  header_column_style_ = NULL;
  footer_row_style_ = NULL;
  table_name_style_ = NULL;
  table_name_shape_style_ = NULL;
  data_store_ = NULL;
  provider_ = NULL;
  number_of_rows_ = 0u;
  number_of_columns_ = 0u;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_name_enabled_ = false;
  table_name_height_ = 0;
  table_name_border_enabled_ = false;
  number_of_header_rows_ = 0u;
  number_of_header_columns_ = 0u;
  number_of_footer_rows_ = 0u;
  header_rows_frozen_ = false;
  header_columns_frozen_ = false;
  number_of_hidden_rows_ = 0u;
  number_of_hidden_columns_ = 0u;
  number_of_user_hidden_rows_ = 0u;
  number_of_user_hidden_columns_ = 0u;
  number_of_filtered_rows_ = 0u;
  default_row_height_ = 0;
  default_column_width_ = 0;
  origin_offset_ = NULL;
  preset_index_ = 0u;
  repeating_header_rows_enabled_ = false;
  repeating_header_columns_enabled_ = false;
  style_apply_clears_all_ = false;
  hidden_state_formula_owner_for_columns_ = NULL;
  hidden_state_formula_owner_for_rows_ = NULL;
  filter_set_ = NULL;
  conditional_style_formula_owner_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableModelArchive::~TableModelArchive() {
  SharedDtor();
}

void TableModelArchive::SharedDtor() {
  if (table_id_ != &::google::protobuf::internal::kEmptyString) {
    delete table_id_;
  }
  if (from_table_id_ != &::google::protobuf::internal::kEmptyString) {
    delete from_table_id_;
  }
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
    delete table_style_;
    delete body_text_style_;
    delete header_row_text_style_;
    delete header_column_text_style_;
    delete footer_row_text_style_;
    delete body_cell_style_;
    delete header_row_style_;
    delete header_column_style_;
    delete footer_row_style_;
    delete table_name_style_;
    delete table_name_shape_style_;
    delete data_store_;
    delete provider_;
    delete origin_offset_;
    delete hidden_state_formula_owner_for_columns_;
    delete hidden_state_formula_owner_for_rows_;
    delete filter_set_;
    delete conditional_style_formula_owner_id_;
  }
}

void TableModelArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableModelArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableModelArchive_descriptor_;
}

const TableModelArchive& TableModelArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableModelArchive* TableModelArchive::default_instance_ = NULL;

TableModelArchive* TableModelArchive::New() const {
  return new TableModelArchive;
}

void TableModelArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != &::google::protobuf::internal::kEmptyString) {
        table_id_->clear();
      }
    }
    if (has_from_table_id()) {
      if (from_table_id_ != &::google::protobuf::internal::kEmptyString) {
        from_table_id_->clear();
      }
    }
    if (has_table_style()) {
      if (table_style_ != NULL) table_style_->::TSP::Reference::Clear();
    }
    if (has_body_text_style()) {
      if (body_text_style_ != NULL) body_text_style_->::TSP::Reference::Clear();
    }
    if (has_header_row_text_style()) {
      if (header_row_text_style_ != NULL) header_row_text_style_->::TSP::Reference::Clear();
    }
    if (has_header_column_text_style()) {
      if (header_column_text_style_ != NULL) header_column_text_style_->::TSP::Reference::Clear();
    }
    if (has_footer_row_text_style()) {
      if (footer_row_text_style_ != NULL) footer_row_text_style_->::TSP::Reference::Clear();
    }
    if (has_body_cell_style()) {
      if (body_cell_style_ != NULL) body_cell_style_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_header_row_style()) {
      if (header_row_style_ != NULL) header_row_style_->::TSP::Reference::Clear();
    }
    if (has_header_column_style()) {
      if (header_column_style_ != NULL) header_column_style_->::TSP::Reference::Clear();
    }
    if (has_footer_row_style()) {
      if (footer_row_style_ != NULL) footer_row_style_->::TSP::Reference::Clear();
    }
    if (has_table_name_style()) {
      if (table_name_style_ != NULL) table_name_style_->::TSP::Reference::Clear();
    }
    if (has_table_name_shape_style()) {
      if (table_name_shape_style_ != NULL) table_name_shape_style_->::TSP::Reference::Clear();
    }
    if (has_data_store()) {
      if (data_store_ != NULL) data_store_->::TST::DataStore::Clear();
    }
    if (has_provider()) {
      if (provider_ != NULL) provider_->::TSP::Reference::Clear();
    }
    number_of_rows_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    number_of_columns_ = 0u;
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    table_name_enabled_ = false;
    table_name_height_ = 0;
    table_name_border_enabled_ = false;
    number_of_header_rows_ = 0u;
    number_of_header_columns_ = 0u;
    number_of_footer_rows_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    header_rows_frozen_ = false;
    header_columns_frozen_ = false;
    number_of_hidden_rows_ = 0u;
    number_of_hidden_columns_ = 0u;
    number_of_user_hidden_rows_ = 0u;
    number_of_user_hidden_columns_ = 0u;
    number_of_filtered_rows_ = 0u;
    default_row_height_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    default_column_width_ = 0;
    if (has_origin_offset()) {
      if (origin_offset_ != NULL) origin_offset_->::TST::CellID::Clear();
    }
    preset_index_ = 0u;
    repeating_header_rows_enabled_ = false;
    repeating_header_columns_enabled_ = false;
    style_apply_clears_all_ = false;
    if (has_hidden_state_formula_owner_for_columns()) {
      if (hidden_state_formula_owner_for_columns_ != NULL) hidden_state_formula_owner_for_columns_->::TSP::Reference::Clear();
    }
    if (has_hidden_state_formula_owner_for_rows()) {
      if (hidden_state_formula_owner_for_rows_ != NULL) hidden_state_formula_owner_for_rows_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_filter_set()) {
      if (filter_set_ != NULL) filter_set_->::TSP::Reference::Clear();
    }
    if (has_conditional_style_formula_owner_id()) {
      if (conditional_style_formula_owner_id_ != NULL) conditional_style_formula_owner_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableModelArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_id().data(), this->table_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_style;
        break;
      }
      
      // required .TSP.Reference table_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_store;
        break;
      }
      
      // required .TST.DataStore data_store = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_provider;
        break;
      }
      
      // optional .TSP.Reference provider = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_number_of_rows;
        break;
      }
      
      // required uint32 number_of_rows = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rows_)));
          set_has_number_of_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_number_of_columns;
        break;
      }
      
      // required uint32 number_of_columns = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_columns_)));
          set_has_number_of_columns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_table_name;
        break;
      }
      
      // required string table_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_number_of_header_rows;
        break;
      }
      
      // optional uint32 number_of_header_rows = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_header_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_header_rows_)));
          set_has_number_of_header_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_number_of_header_columns;
        break;
      }
      
      // optional uint32 number_of_header_columns = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_header_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_header_columns_)));
          set_has_number_of_header_columns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_number_of_footer_rows;
        break;
      }
      
      // optional uint32 number_of_footer_rows = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_footer_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_footer_rows_)));
          set_has_number_of_footer_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_header_rows_frozen;
        break;
      }
      
      // optional bool header_rows_frozen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_header_rows_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &header_rows_frozen_)));
          set_has_header_rows_frozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_header_columns_frozen;
        break;
      }
      
      // optional bool header_columns_frozen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_header_columns_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &header_columns_frozen_)));
          set_has_header_columns_frozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_number_of_hidden_rows;
        break;
      }
      
      // optional uint32 number_of_hidden_rows = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_hidden_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_hidden_rows_)));
          set_has_number_of_hidden_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_number_of_hidden_columns;
        break;
      }
      
      // optional uint32 number_of_hidden_columns = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_hidden_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_hidden_columns_)));
          set_has_number_of_hidden_columns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_default_row_height;
        break;
      }
      
      // required double default_row_height = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_default_row_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_row_height_)));
          set_has_default_row_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_default_column_width;
        break;
      }
      
      // required double default_column_width = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_default_column_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_column_width_)));
          set_has_default_column_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_body_cell_style;
        break;
      }
      
      // required .TSP.Reference body_cell_style = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_cell_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_cell_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_header_row_style;
        break;
      }
      
      // required .TSP.Reference header_row_style = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_row_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_row_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_header_column_style;
        break;
      }
      
      // required .TSP.Reference header_column_style = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_column_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_column_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_footer_row_style;
        break;
      }
      
      // required .TSP.Reference footer_row_style = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_row_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_row_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_table_name_enabled;
        break;
      }
      
      // optional bool table_name_enabled = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_name_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &table_name_enabled_)));
          set_has_table_name_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_origin_offset;
        break;
      }
      
      // optional .TST.CellID origin_offset = 23 [deprecated = true];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_body_text_style;
        break;
      }
      
      // required .TSP.Reference body_text_style = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_header_row_text_style;
        break;
      }
      
      // required .TSP.Reference header_row_text_style = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_row_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_row_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_header_column_text_style;
        break;
      }
      
      // required .TSP.Reference header_column_text_style = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_column_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_column_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_footer_row_text_style;
        break;
      }
      
      // required .TSP.Reference footer_row_text_style = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_row_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_row_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_preset_index;
        break;
      }
      
      // required uint32 preset_index = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preset_index_)));
          set_has_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_repeating_header_rows_enabled;
        break;
      }
      
      // optional bool repeating_header_rows_enabled = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeating_header_rows_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repeating_header_rows_enabled_)));
          set_has_repeating_header_rows_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_table_name_style;
        break;
      }
      
      // optional .TSP.Reference table_name_style = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_style_apply_clears_all;
        break;
      }
      
      // optional bool style_apply_clears_all = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style_apply_clears_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &style_apply_clears_all_)));
          set_has_style_apply_clears_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_repeating_header_columns_enabled;
        break;
      }
      
      // optional bool repeating_header_columns_enabled = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeating_header_columns_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repeating_header_columns_enabled_)));
          set_has_repeating_header_columns_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_table_name_height;
        break;
      }
      
      // optional double table_name_height = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_table_name_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &table_name_height_)));
          set_has_table_name_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_hidden_state_formula_owner_for_columns;
        break;
      }
      
      // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hidden_state_formula_owner_for_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hidden_state_formula_owner_for_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_hidden_state_formula_owner_for_rows;
        break;
      }
      
      // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hidden_state_formula_owner_for_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hidden_state_formula_owner_for_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_table_name_shape_style;
        break;
      }
      
      // optional .TSP.Reference table_name_shape_style = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name_shape_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name_shape_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_table_name_border_enabled;
        break;
      }
      
      // optional bool table_name_border_enabled = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_name_border_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &table_name_border_enabled_)));
          set_has_table_name_border_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_filter_set;
        break;
      }
      
      // optional .TSP.Reference filter_set = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_conditional_style_formula_owner_id;
        break;
      }
      
      // optional .TSCE.CFUUIDArchive conditional_style_formula_owner_id = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditional_style_formula_owner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_style_formula_owner_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_number_of_filtered_rows;
        break;
      }
      
      // optional uint32 number_of_filtered_rows = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_filtered_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_filtered_rows_)));
          set_has_number_of_filtered_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_number_of_user_hidden_rows;
        break;
      }
      
      // optional uint32 number_of_user_hidden_rows = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_user_hidden_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_user_hidden_rows_)));
          set_has_number_of_user_hidden_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_number_of_user_hidden_columns;
        break;
      }
      
      // optional uint32 number_of_user_hidden_columns = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_user_hidden_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_user_hidden_columns_)));
          set_has_number_of_user_hidden_columns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_from_table_id;
        break;
      }
      
      // optional string from_table_id = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_table_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_table_id().data(), this->from_table_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableModelArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_id().data(), this->table_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_id(), output);
  }
  
  // required .TSP.Reference table_style = 3;
  if (has_table_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_style(), output);
  }
  
  // required .TST.DataStore data_store = 4;
  if (has_data_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_store(), output);
  }
  
  // optional .TSP.Reference provider = 5;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->provider(), output);
  }
  
  // required uint32 number_of_rows = 6;
  if (has_number_of_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->number_of_rows(), output);
  }
  
  // required uint32 number_of_columns = 7;
  if (has_number_of_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number_of_columns(), output);
  }
  
  // required string table_name = 8;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->table_name(), output);
  }
  
  // optional uint32 number_of_header_rows = 9;
  if (has_number_of_header_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->number_of_header_rows(), output);
  }
  
  // optional uint32 number_of_header_columns = 10;
  if (has_number_of_header_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->number_of_header_columns(), output);
  }
  
  // optional uint32 number_of_footer_rows = 11;
  if (has_number_of_footer_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->number_of_footer_rows(), output);
  }
  
  // optional bool header_rows_frozen = 12;
  if (has_header_rows_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->header_rows_frozen(), output);
  }
  
  // optional bool header_columns_frozen = 13;
  if (has_header_columns_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->header_columns_frozen(), output);
  }
  
  // optional uint32 number_of_hidden_rows = 14;
  if (has_number_of_hidden_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->number_of_hidden_rows(), output);
  }
  
  // optional uint32 number_of_hidden_columns = 15;
  if (has_number_of_hidden_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->number_of_hidden_columns(), output);
  }
  
  // required double default_row_height = 16;
  if (has_default_row_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->default_row_height(), output);
  }
  
  // required double default_column_width = 17;
  if (has_default_column_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->default_column_width(), output);
  }
  
  // required .TSP.Reference body_cell_style = 18;
  if (has_body_cell_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->body_cell_style(), output);
  }
  
  // required .TSP.Reference header_row_style = 19;
  if (has_header_row_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->header_row_style(), output);
  }
  
  // required .TSP.Reference header_column_style = 20;
  if (has_header_column_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->header_column_style(), output);
  }
  
  // required .TSP.Reference footer_row_style = 21;
  if (has_footer_row_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->footer_row_style(), output);
  }
  
  // optional bool table_name_enabled = 22;
  if (has_table_name_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->table_name_enabled(), output);
  }
  
  // optional .TST.CellID origin_offset = 23 [deprecated = true];
  if (has_origin_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->origin_offset(), output);
  }
  
  // required .TSP.Reference body_text_style = 24;
  if (has_body_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->body_text_style(), output);
  }
  
  // required .TSP.Reference header_row_text_style = 25;
  if (has_header_row_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->header_row_text_style(), output);
  }
  
  // required .TSP.Reference header_column_text_style = 26;
  if (has_header_column_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->header_column_text_style(), output);
  }
  
  // required .TSP.Reference footer_row_text_style = 27;
  if (has_footer_row_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->footer_row_text_style(), output);
  }
  
  // required uint32 preset_index = 28;
  if (has_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->preset_index(), output);
  }
  
  // optional bool repeating_header_rows_enabled = 29;
  if (has_repeating_header_rows_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->repeating_header_rows_enabled(), output);
  }
  
  // optional .TSP.Reference table_name_style = 30;
  if (has_table_name_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->table_name_style(), output);
  }
  
  // optional bool style_apply_clears_all = 31;
  if (has_style_apply_clears_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->style_apply_clears_all(), output);
  }
  
  // optional bool repeating_header_columns_enabled = 32;
  if (has_repeating_header_columns_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->repeating_header_columns_enabled(), output);
  }
  
  // optional double table_name_height = 33;
  if (has_table_name_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->table_name_height(), output);
  }
  
  // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
  if (has_hidden_state_formula_owner_for_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->hidden_state_formula_owner_for_columns(), output);
  }
  
  // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
  if (has_hidden_state_formula_owner_for_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->hidden_state_formula_owner_for_rows(), output);
  }
  
  // optional .TSP.Reference table_name_shape_style = 36;
  if (has_table_name_shape_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->table_name_shape_style(), output);
  }
  
  // optional bool table_name_border_enabled = 37;
  if (has_table_name_border_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->table_name_border_enabled(), output);
  }
  
  // optional .TSP.Reference filter_set = 38;
  if (has_filter_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->filter_set(), output);
  }
  
  // optional .TSCE.CFUUIDArchive conditional_style_formula_owner_id = 39;
  if (has_conditional_style_formula_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->conditional_style_formula_owner_id(), output);
  }
  
  // optional uint32 number_of_filtered_rows = 40;
  if (has_number_of_filtered_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->number_of_filtered_rows(), output);
  }
  
  // optional uint32 number_of_user_hidden_rows = 41;
  if (has_number_of_user_hidden_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->number_of_user_hidden_rows(), output);
  }
  
  // optional uint32 number_of_user_hidden_columns = 42;
  if (has_number_of_user_hidden_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->number_of_user_hidden_columns(), output);
  }
  
  // optional string from_table_id = 43;
  if (has_from_table_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_table_id().data(), this->from_table_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->from_table_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableModelArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_id().data(), this->table_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_id(), target);
  }
  
  // required .TSP.Reference table_style = 3;
  if (has_table_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_style(), target);
  }
  
  // required .TST.DataStore data_store = 4;
  if (has_data_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_store(), target);
  }
  
  // optional .TSP.Reference provider = 5;
  if (has_provider()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->provider(), target);
  }
  
  // required uint32 number_of_rows = 6;
  if (has_number_of_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_rows(), target);
  }
  
  // required uint32 number_of_columns = 7;
  if (has_number_of_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_columns(), target);
  }
  
  // required string table_name = 8;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->table_name(), target);
  }
  
  // optional uint32 number_of_header_rows = 9;
  if (has_number_of_header_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->number_of_header_rows(), target);
  }
  
  // optional uint32 number_of_header_columns = 10;
  if (has_number_of_header_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->number_of_header_columns(), target);
  }
  
  // optional uint32 number_of_footer_rows = 11;
  if (has_number_of_footer_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->number_of_footer_rows(), target);
  }
  
  // optional bool header_rows_frozen = 12;
  if (has_header_rows_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->header_rows_frozen(), target);
  }
  
  // optional bool header_columns_frozen = 13;
  if (has_header_columns_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->header_columns_frozen(), target);
  }
  
  // optional uint32 number_of_hidden_rows = 14;
  if (has_number_of_hidden_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->number_of_hidden_rows(), target);
  }
  
  // optional uint32 number_of_hidden_columns = 15;
  if (has_number_of_hidden_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->number_of_hidden_columns(), target);
  }
  
  // required double default_row_height = 16;
  if (has_default_row_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->default_row_height(), target);
  }
  
  // required double default_column_width = 17;
  if (has_default_column_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->default_column_width(), target);
  }
  
  // required .TSP.Reference body_cell_style = 18;
  if (has_body_cell_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->body_cell_style(), target);
  }
  
  // required .TSP.Reference header_row_style = 19;
  if (has_header_row_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->header_row_style(), target);
  }
  
  // required .TSP.Reference header_column_style = 20;
  if (has_header_column_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->header_column_style(), target);
  }
  
  // required .TSP.Reference footer_row_style = 21;
  if (has_footer_row_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->footer_row_style(), target);
  }
  
  // optional bool table_name_enabled = 22;
  if (has_table_name_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->table_name_enabled(), target);
  }
  
  // optional .TST.CellID origin_offset = 23 [deprecated = true];
  if (has_origin_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->origin_offset(), target);
  }
  
  // required .TSP.Reference body_text_style = 24;
  if (has_body_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->body_text_style(), target);
  }
  
  // required .TSP.Reference header_row_text_style = 25;
  if (has_header_row_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->header_row_text_style(), target);
  }
  
  // required .TSP.Reference header_column_text_style = 26;
  if (has_header_column_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->header_column_text_style(), target);
  }
  
  // required .TSP.Reference footer_row_text_style = 27;
  if (has_footer_row_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->footer_row_text_style(), target);
  }
  
  // required uint32 preset_index = 28;
  if (has_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->preset_index(), target);
  }
  
  // optional bool repeating_header_rows_enabled = 29;
  if (has_repeating_header_rows_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->repeating_header_rows_enabled(), target);
  }
  
  // optional .TSP.Reference table_name_style = 30;
  if (has_table_name_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->table_name_style(), target);
  }
  
  // optional bool style_apply_clears_all = 31;
  if (has_style_apply_clears_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->style_apply_clears_all(), target);
  }
  
  // optional bool repeating_header_columns_enabled = 32;
  if (has_repeating_header_columns_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->repeating_header_columns_enabled(), target);
  }
  
  // optional double table_name_height = 33;
  if (has_table_name_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->table_name_height(), target);
  }
  
  // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
  if (has_hidden_state_formula_owner_for_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->hidden_state_formula_owner_for_columns(), target);
  }
  
  // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
  if (has_hidden_state_formula_owner_for_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->hidden_state_formula_owner_for_rows(), target);
  }
  
  // optional .TSP.Reference table_name_shape_style = 36;
  if (has_table_name_shape_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->table_name_shape_style(), target);
  }
  
  // optional bool table_name_border_enabled = 37;
  if (has_table_name_border_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->table_name_border_enabled(), target);
  }
  
  // optional .TSP.Reference filter_set = 38;
  if (has_filter_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->filter_set(), target);
  }
  
  // optional .TSCE.CFUUIDArchive conditional_style_formula_owner_id = 39;
  if (has_conditional_style_formula_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->conditional_style_formula_owner_id(), target);
  }
  
  // optional uint32 number_of_filtered_rows = 40;
  if (has_number_of_filtered_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->number_of_filtered_rows(), target);
  }
  
  // optional uint32 number_of_user_hidden_rows = 41;
  if (has_number_of_user_hidden_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->number_of_user_hidden_rows(), target);
  }
  
  // optional uint32 number_of_user_hidden_columns = 42;
  if (has_number_of_user_hidden_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->number_of_user_hidden_columns(), target);
  }
  
  // optional string from_table_id = 43;
  if (has_from_table_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_table_id().data(), this->from_table_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->from_table_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableModelArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_id());
    }
    
    // optional string from_table_id = 43;
    if (has_from_table_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_table_id());
    }
    
    // required .TSP.Reference table_style = 3;
    if (has_table_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_style());
    }
    
    // required .TSP.Reference body_text_style = 24;
    if (has_body_text_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_text_style());
    }
    
    // required .TSP.Reference header_row_text_style = 25;
    if (has_header_row_text_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_row_text_style());
    }
    
    // required .TSP.Reference header_column_text_style = 26;
    if (has_header_column_text_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_column_text_style());
    }
    
    // required .TSP.Reference footer_row_text_style = 27;
    if (has_footer_row_text_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_row_text_style());
    }
    
    // required .TSP.Reference body_cell_style = 18;
    if (has_body_cell_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_cell_style());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .TSP.Reference header_row_style = 19;
    if (has_header_row_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_row_style());
    }
    
    // required .TSP.Reference header_column_style = 20;
    if (has_header_column_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_column_style());
    }
    
    // required .TSP.Reference footer_row_style = 21;
    if (has_footer_row_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_row_style());
    }
    
    // optional .TSP.Reference table_name_style = 30;
    if (has_table_name_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name_style());
    }
    
    // optional .TSP.Reference table_name_shape_style = 36;
    if (has_table_name_shape_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name_shape_style());
    }
    
    // required .TST.DataStore data_store = 4;
    if (has_data_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_store());
    }
    
    // optional .TSP.Reference provider = 5;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->provider());
    }
    
    // required uint32 number_of_rows = 6;
    if (has_number_of_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_rows());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 number_of_columns = 7;
    if (has_number_of_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_columns());
    }
    
    // required string table_name = 8;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional bool table_name_enabled = 22;
    if (has_table_name_enabled()) {
      total_size += 2 + 1;
    }
    
    // optional double table_name_height = 33;
    if (has_table_name_height()) {
      total_size += 2 + 8;
    }
    
    // optional bool table_name_border_enabled = 37;
    if (has_table_name_border_enabled()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 number_of_header_rows = 9;
    if (has_number_of_header_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_header_rows());
    }
    
    // optional uint32 number_of_header_columns = 10;
    if (has_number_of_header_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_header_columns());
    }
    
    // optional uint32 number_of_footer_rows = 11;
    if (has_number_of_footer_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_footer_rows());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool header_rows_frozen = 12;
    if (has_header_rows_frozen()) {
      total_size += 1 + 1;
    }
    
    // optional bool header_columns_frozen = 13;
    if (has_header_columns_frozen()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 number_of_hidden_rows = 14;
    if (has_number_of_hidden_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_hidden_rows());
    }
    
    // optional uint32 number_of_hidden_columns = 15;
    if (has_number_of_hidden_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_hidden_columns());
    }
    
    // optional uint32 number_of_user_hidden_rows = 41;
    if (has_number_of_user_hidden_rows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_user_hidden_rows());
    }
    
    // optional uint32 number_of_user_hidden_columns = 42;
    if (has_number_of_user_hidden_columns()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_user_hidden_columns());
    }
    
    // optional uint32 number_of_filtered_rows = 40;
    if (has_number_of_filtered_rows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_filtered_rows());
    }
    
    // required double default_row_height = 16;
    if (has_default_row_height()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double default_column_width = 17;
    if (has_default_column_width()) {
      total_size += 2 + 8;
    }
    
    // optional .TST.CellID origin_offset = 23 [deprecated = true];
    if (has_origin_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin_offset());
    }
    
    // required uint32 preset_index = 28;
    if (has_preset_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preset_index());
    }
    
    // optional bool repeating_header_rows_enabled = 29;
    if (has_repeating_header_rows_enabled()) {
      total_size += 2 + 1;
    }
    
    // optional bool repeating_header_columns_enabled = 32;
    if (has_repeating_header_columns_enabled()) {
      total_size += 2 + 1;
    }
    
    // optional bool style_apply_clears_all = 31;
    if (has_style_apply_clears_all()) {
      total_size += 2 + 1;
    }
    
    // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
    if (has_hidden_state_formula_owner_for_columns()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hidden_state_formula_owner_for_columns());
    }
    
    // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
    if (has_hidden_state_formula_owner_for_rows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hidden_state_formula_owner_for_rows());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .TSP.Reference filter_set = 38;
    if (has_filter_set()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_set());
    }
    
    // optional .TSCE.CFUUIDArchive conditional_style_formula_owner_id = 39;
    if (has_conditional_style_formula_owner_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditional_style_formula_owner_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableModelArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableModelArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableModelArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableModelArchive::MergeFrom(const TableModelArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_from_table_id()) {
      set_from_table_id(from.from_table_id());
    }
    if (from.has_table_style()) {
      mutable_table_style()->::TSP::Reference::MergeFrom(from.table_style());
    }
    if (from.has_body_text_style()) {
      mutable_body_text_style()->::TSP::Reference::MergeFrom(from.body_text_style());
    }
    if (from.has_header_row_text_style()) {
      mutable_header_row_text_style()->::TSP::Reference::MergeFrom(from.header_row_text_style());
    }
    if (from.has_header_column_text_style()) {
      mutable_header_column_text_style()->::TSP::Reference::MergeFrom(from.header_column_text_style());
    }
    if (from.has_footer_row_text_style()) {
      mutable_footer_row_text_style()->::TSP::Reference::MergeFrom(from.footer_row_text_style());
    }
    if (from.has_body_cell_style()) {
      mutable_body_cell_style()->::TSP::Reference::MergeFrom(from.body_cell_style());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_header_row_style()) {
      mutable_header_row_style()->::TSP::Reference::MergeFrom(from.header_row_style());
    }
    if (from.has_header_column_style()) {
      mutable_header_column_style()->::TSP::Reference::MergeFrom(from.header_column_style());
    }
    if (from.has_footer_row_style()) {
      mutable_footer_row_style()->::TSP::Reference::MergeFrom(from.footer_row_style());
    }
    if (from.has_table_name_style()) {
      mutable_table_name_style()->::TSP::Reference::MergeFrom(from.table_name_style());
    }
    if (from.has_table_name_shape_style()) {
      mutable_table_name_shape_style()->::TSP::Reference::MergeFrom(from.table_name_shape_style());
    }
    if (from.has_data_store()) {
      mutable_data_store()->::TST::DataStore::MergeFrom(from.data_store());
    }
    if (from.has_provider()) {
      mutable_provider()->::TSP::Reference::MergeFrom(from.provider());
    }
    if (from.has_number_of_rows()) {
      set_number_of_rows(from.number_of_rows());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_number_of_columns()) {
      set_number_of_columns(from.number_of_columns());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_table_name_enabled()) {
      set_table_name_enabled(from.table_name_enabled());
    }
    if (from.has_table_name_height()) {
      set_table_name_height(from.table_name_height());
    }
    if (from.has_table_name_border_enabled()) {
      set_table_name_border_enabled(from.table_name_border_enabled());
    }
    if (from.has_number_of_header_rows()) {
      set_number_of_header_rows(from.number_of_header_rows());
    }
    if (from.has_number_of_header_columns()) {
      set_number_of_header_columns(from.number_of_header_columns());
    }
    if (from.has_number_of_footer_rows()) {
      set_number_of_footer_rows(from.number_of_footer_rows());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_header_rows_frozen()) {
      set_header_rows_frozen(from.header_rows_frozen());
    }
    if (from.has_header_columns_frozen()) {
      set_header_columns_frozen(from.header_columns_frozen());
    }
    if (from.has_number_of_hidden_rows()) {
      set_number_of_hidden_rows(from.number_of_hidden_rows());
    }
    if (from.has_number_of_hidden_columns()) {
      set_number_of_hidden_columns(from.number_of_hidden_columns());
    }
    if (from.has_number_of_user_hidden_rows()) {
      set_number_of_user_hidden_rows(from.number_of_user_hidden_rows());
    }
    if (from.has_number_of_user_hidden_columns()) {
      set_number_of_user_hidden_columns(from.number_of_user_hidden_columns());
    }
    if (from.has_number_of_filtered_rows()) {
      set_number_of_filtered_rows(from.number_of_filtered_rows());
    }
    if (from.has_default_row_height()) {
      set_default_row_height(from.default_row_height());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_default_column_width()) {
      set_default_column_width(from.default_column_width());
    }
    if (from.has_origin_offset()) {
      mutable_origin_offset()->::TST::CellID::MergeFrom(from.origin_offset());
    }
    if (from.has_preset_index()) {
      set_preset_index(from.preset_index());
    }
    if (from.has_repeating_header_rows_enabled()) {
      set_repeating_header_rows_enabled(from.repeating_header_rows_enabled());
    }
    if (from.has_repeating_header_columns_enabled()) {
      set_repeating_header_columns_enabled(from.repeating_header_columns_enabled());
    }
    if (from.has_style_apply_clears_all()) {
      set_style_apply_clears_all(from.style_apply_clears_all());
    }
    if (from.has_hidden_state_formula_owner_for_columns()) {
      mutable_hidden_state_formula_owner_for_columns()->::TSP::Reference::MergeFrom(from.hidden_state_formula_owner_for_columns());
    }
    if (from.has_hidden_state_formula_owner_for_rows()) {
      mutable_hidden_state_formula_owner_for_rows()->::TSP::Reference::MergeFrom(from.hidden_state_formula_owner_for_rows());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_filter_set()) {
      mutable_filter_set()->::TSP::Reference::MergeFrom(from.filter_set());
    }
    if (from.has_conditional_style_formula_owner_id()) {
      mutable_conditional_style_formula_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(from.conditional_style_formula_owner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableModelArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableModelArchive::CopyFrom(const TableModelArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableModelArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x8003a7fd) != 0x8003a7fd) return false;
  if ((_has_bits_[1] & 0x00000005) != 0x00000005) return false;
  
  if (has_table_style()) {
    if (!this->table_style().IsInitialized()) return false;
  }
  if (has_body_text_style()) {
    if (!this->body_text_style().IsInitialized()) return false;
  }
  if (has_header_row_text_style()) {
    if (!this->header_row_text_style().IsInitialized()) return false;
  }
  if (has_header_column_text_style()) {
    if (!this->header_column_text_style().IsInitialized()) return false;
  }
  if (has_footer_row_text_style()) {
    if (!this->footer_row_text_style().IsInitialized()) return false;
  }
  if (has_body_cell_style()) {
    if (!this->body_cell_style().IsInitialized()) return false;
  }
  if (has_header_row_style()) {
    if (!this->header_row_style().IsInitialized()) return false;
  }
  if (has_header_column_style()) {
    if (!this->header_column_style().IsInitialized()) return false;
  }
  if (has_footer_row_style()) {
    if (!this->footer_row_style().IsInitialized()) return false;
  }
  if (has_table_name_style()) {
    if (!this->table_name_style().IsInitialized()) return false;
  }
  if (has_table_name_shape_style()) {
    if (!this->table_name_shape_style().IsInitialized()) return false;
  }
  if (has_data_store()) {
    if (!this->data_store().IsInitialized()) return false;
  }
  if (has_provider()) {
    if (!this->provider().IsInitialized()) return false;
  }
  if (has_origin_offset()) {
    if (!this->origin_offset().IsInitialized()) return false;
  }
  if (has_hidden_state_formula_owner_for_columns()) {
    if (!this->hidden_state_formula_owner_for_columns().IsInitialized()) return false;
  }
  if (has_hidden_state_formula_owner_for_rows()) {
    if (!this->hidden_state_formula_owner_for_rows().IsInitialized()) return false;
  }
  if (has_filter_set()) {
    if (!this->filter_set().IsInitialized()) return false;
  }
  return true;
}

void TableModelArchive::Swap(TableModelArchive* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(from_table_id_, other->from_table_id_);
    std::swap(table_style_, other->table_style_);
    std::swap(body_text_style_, other->body_text_style_);
    std::swap(header_row_text_style_, other->header_row_text_style_);
    std::swap(header_column_text_style_, other->header_column_text_style_);
    std::swap(footer_row_text_style_, other->footer_row_text_style_);
    std::swap(body_cell_style_, other->body_cell_style_);
    std::swap(header_row_style_, other->header_row_style_);
    std::swap(header_column_style_, other->header_column_style_);
    std::swap(footer_row_style_, other->footer_row_style_);
    std::swap(table_name_style_, other->table_name_style_);
    std::swap(table_name_shape_style_, other->table_name_shape_style_);
    std::swap(data_store_, other->data_store_);
    std::swap(provider_, other->provider_);
    std::swap(number_of_rows_, other->number_of_rows_);
    std::swap(number_of_columns_, other->number_of_columns_);
    std::swap(table_name_, other->table_name_);
    std::swap(table_name_enabled_, other->table_name_enabled_);
    std::swap(table_name_height_, other->table_name_height_);
    std::swap(table_name_border_enabled_, other->table_name_border_enabled_);
    std::swap(number_of_header_rows_, other->number_of_header_rows_);
    std::swap(number_of_header_columns_, other->number_of_header_columns_);
    std::swap(number_of_footer_rows_, other->number_of_footer_rows_);
    std::swap(header_rows_frozen_, other->header_rows_frozen_);
    std::swap(header_columns_frozen_, other->header_columns_frozen_);
    std::swap(number_of_hidden_rows_, other->number_of_hidden_rows_);
    std::swap(number_of_hidden_columns_, other->number_of_hidden_columns_);
    std::swap(number_of_user_hidden_rows_, other->number_of_user_hidden_rows_);
    std::swap(number_of_user_hidden_columns_, other->number_of_user_hidden_columns_);
    std::swap(number_of_filtered_rows_, other->number_of_filtered_rows_);
    std::swap(default_row_height_, other->default_row_height_);
    std::swap(default_column_width_, other->default_column_width_);
    std::swap(origin_offset_, other->origin_offset_);
    std::swap(preset_index_, other->preset_index_);
    std::swap(repeating_header_rows_enabled_, other->repeating_header_rows_enabled_);
    std::swap(repeating_header_columns_enabled_, other->repeating_header_columns_enabled_);
    std::swap(style_apply_clears_all_, other->style_apply_clears_all_);
    std::swap(hidden_state_formula_owner_for_columns_, other->hidden_state_formula_owner_for_columns_);
    std::swap(hidden_state_formula_owner_for_rows_, other->hidden_state_formula_owner_for_rows_);
    std::swap(filter_set_, other->filter_set_);
    std::swap(conditional_style_formula_owner_id_, other->conditional_style_formula_owner_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableModelArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableModelArchive_descriptor_;
  metadata.reflection = TableModelArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DurationWrapperArchive::DurationWrapperArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DurationWrapperArchive::InitAsDefaultInstance() {
}

DurationWrapperArchive::DurationWrapperArchive(const DurationWrapperArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DurationWrapperArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DurationWrapperArchive::~DurationWrapperArchive() {
  SharedDtor();
}

void DurationWrapperArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DurationWrapperArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DurationWrapperArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DurationWrapperArchive_descriptor_;
}

const DurationWrapperArchive& DurationWrapperArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

DurationWrapperArchive* DurationWrapperArchive::default_instance_ = NULL;

DurationWrapperArchive* DurationWrapperArchive::New() const {
  return new DurationWrapperArchive;
}

void DurationWrapperArchive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DurationWrapperArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DurationWrapperArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DurationWrapperArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DurationWrapperArchive::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DurationWrapperArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DurationWrapperArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DurationWrapperArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DurationWrapperArchive::MergeFrom(const DurationWrapperArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DurationWrapperArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurationWrapperArchive::CopyFrom(const DurationWrapperArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationWrapperArchive::IsInitialized() const {
  
  return true;
}

void DurationWrapperArchive::Swap(DurationWrapperArchive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DurationWrapperArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DurationWrapperArchive_descriptor_;
  metadata.reflection = DurationWrapperArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cell::kValueTypeFieldNumber;
const int Cell::kNumberValueFieldNumber;
const int Cell::kStringValueFieldNumber;
const int Cell::kBoolValueFieldNumber;
const int Cell::kCellStyleFieldNumber;
const int Cell::kTextStyleFieldNumber;
const int Cell::kFormulaFieldNumber;
const int Cell::kFormulaErrorFieldNumber;
const int Cell::kCurrentFormatFieldNumber;
const int Cell::kNumberFormatFieldNumber;
const int Cell::kCurrencyFormatFieldNumber;
const int Cell::kDurationFormatFieldNumber;
const int Cell::kDateFormatFieldNumber;
const int Cell::kControlFormatFieldNumber;
const int Cell::kCustomFormatFieldNumber;
const int Cell::kBaseFormatFieldNumber;
const int Cell::kMultipleChoiceListFormatFieldNumber;
const int Cell::kExplicitFormatFlagsFieldNumber;
const int Cell::kRichTextPayloadFieldNumber;
const int Cell::kConditionalStyleFieldNumber;
const int Cell::kMultipleChoiceListFieldNumber;
const int Cell::kCommentStorageFieldNumber;
const int Cell::kConditionalStyleAppliedRuleFieldNumber;
#endif  // !_MSC_VER

Cell::Cell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cell::InitAsDefaultInstance() {
  cell_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  formula_ = const_cast< ::TSCE::FormulaArchive*>(&::TSCE::FormulaArchive::default_instance());
  formulaerror_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  current_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  number_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  currency_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  duration_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  date_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  control_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  custom_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  base_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  multiple_choice_list_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  richtextpayload_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  conditional_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  multiple_choice_list_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  comment_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cell::SharedCtor() {
  _cached_size_ = 0;
  valuetype_ = 0;
  numbervalue_ = 0;
  stringvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boolvalue_ = false;
  cell_style_ = NULL;
  text_style_ = NULL;
  formula_ = NULL;
  formulaerror_ = NULL;
  current_format_ = NULL;
  number_format_ = NULL;
  currency_format_ = NULL;
  duration_format_ = NULL;
  date_format_ = NULL;
  control_format_ = NULL;
  custom_format_ = NULL;
  base_format_ = NULL;
  multiple_choice_list_format_ = NULL;
  explicit_format_flags_ = 0u;
  richtextpayload_ = NULL;
  conditional_style_ = NULL;
  multiple_choice_list_ = NULL;
  comment_storage_ = NULL;
  conditional_style_applied_rule_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell::~Cell() {
  SharedDtor();
}

void Cell::SharedDtor() {
  if (stringvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete stringvalue_;
  }
  if (this != default_instance_) {
    delete cell_style_;
    delete text_style_;
    delete formula_;
    delete formulaerror_;
    delete current_format_;
    delete number_format_;
    delete currency_format_;
    delete duration_format_;
    delete date_format_;
    delete control_format_;
    delete custom_format_;
    delete base_format_;
    delete multiple_choice_list_format_;
    delete richtextpayload_;
    delete conditional_style_;
    delete multiple_choice_list_;
    delete comment_storage_;
  }
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

Cell* Cell::default_instance_ = NULL;

Cell* Cell::New() const {
  return new Cell;
}

void Cell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    valuetype_ = 0;
    numbervalue_ = 0;
    if (has_stringvalue()) {
      if (stringvalue_ != &::google::protobuf::internal::kEmptyString) {
        stringvalue_->clear();
      }
    }
    boolvalue_ = false;
    if (has_cell_style()) {
      if (cell_style_ != NULL) cell_style_->::TSP::Reference::Clear();
    }
    if (has_text_style()) {
      if (text_style_ != NULL) text_style_->::TSP::Reference::Clear();
    }
    if (has_formula()) {
      if (formula_ != NULL) formula_->::TSCE::FormulaArchive::Clear();
    }
    if (has_formulaerror()) {
      if (formulaerror_ != NULL) formulaerror_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_current_format()) {
      if (current_format_ != NULL) current_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_number_format()) {
      if (number_format_ != NULL) number_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_currency_format()) {
      if (currency_format_ != NULL) currency_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_duration_format()) {
      if (duration_format_ != NULL) duration_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_date_format()) {
      if (date_format_ != NULL) date_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_control_format()) {
      if (control_format_ != NULL) control_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_custom_format()) {
      if (custom_format_ != NULL) custom_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_base_format()) {
      if (base_format_ != NULL) base_format_->::TSK::FormatStructArchive::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_multiple_choice_list_format()) {
      if (multiple_choice_list_format_ != NULL) multiple_choice_list_format_->::TSK::FormatStructArchive::Clear();
    }
    explicit_format_flags_ = 0u;
    if (has_richtextpayload()) {
      if (richtextpayload_ != NULL) richtextpayload_->::TSP::Reference::Clear();
    }
    if (has_conditional_style()) {
      if (conditional_style_ != NULL) conditional_style_->::TSP::Reference::Clear();
    }
    if (has_multiple_choice_list()) {
      if (multiple_choice_list_ != NULL) multiple_choice_list_->::TSP::Reference::Clear();
    }
    if (has_comment_storage()) {
      if (comment_storage_ != NULL) comment_storage_->::TSP::Reference::Clear();
    }
    conditional_style_applied_rule_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellValueType valueType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TST::CellValueType_IsValid(value)) {
            set_valuetype(static_cast< TST::CellValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_style;
        break;
      }
      
      // optional .TSP.Reference cell_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text_style;
        break;
      }
      
      // optional .TSP.Reference text_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_numberValue;
        break;
      }
      
      // optional double numberValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_numberValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numbervalue_)));
          set_has_numbervalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stringValue;
        break;
      }
      
      // optional string stringValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringvalue().data(), this->stringvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boolValue;
        break;
      }
      
      // optional bool boolValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_formula;
        break;
      }
      
      // optional .TSCE.FormulaArchive formula = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_current_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive current_format = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_formulaError;
        break;
      }
      
      // optional .TSP.Reference formulaError = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formulaError:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formulaerror()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_number_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive number_format = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_number_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_currency_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive currency_format = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currency_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_duration_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive duration_format = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duration_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duration_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_date_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive date_format = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_control_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive control_format = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_custom_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive custom_format = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_base_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive base_format = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_multiple_choice_list_format;
        break;
      }
      
      // optional .TSK.FormatStructArchive multiple_choice_list_format = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multiple_choice_list_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiple_choice_list_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_explicit_format_flags;
        break;
      }
      
      // optional uint32 explicit_format_flags = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explicit_format_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &explicit_format_flags_)));
          set_has_explicit_format_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_richTextPayload;
        break;
      }
      
      // optional .TSP.Reference richTextPayload = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_richTextPayload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_richtextpayload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_conditional_style;
        break;
      }
      
      // optional .TSP.Reference conditional_style = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditional_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_multiple_choice_list;
        break;
      }
      
      // optional .TSP.Reference multiple_choice_list = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multiple_choice_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiple_choice_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_comment_storage;
        break;
      }
      
      // optional .TSP.Reference comment_storage = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_conditional_style_applied_rule;
        break;
      }
      
      // optional uint32 conditional_style_applied_rule = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditional_style_applied_rule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conditional_style_applied_rule_)));
          set_has_conditional_style_applied_rule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellValueType valueType = 2;
  if (has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->valuetype(), output);
  }
  
  // optional .TSP.Reference cell_style = 3;
  if (has_cell_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_style(), output);
  }
  
  // optional .TSP.Reference text_style = 4;
  if (has_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->text_style(), output);
  }
  
  // optional double numberValue = 5;
  if (has_numbervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->numbervalue(), output);
  }
  
  // optional string stringValue = 6;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringvalue().data(), this->stringvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stringvalue(), output);
  }
  
  // optional bool boolValue = 7;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->boolvalue(), output);
  }
  
  // optional .TSCE.FormulaArchive formula = 8;
  if (has_formula()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->formula(), output);
  }
  
  // optional .TSK.FormatStructArchive current_format = 9;
  if (has_current_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->current_format(), output);
  }
  
  // optional .TSP.Reference formulaError = 10;
  if (has_formulaerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->formulaerror(), output);
  }
  
  // optional .TSK.FormatStructArchive number_format = 11;
  if (has_number_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->number_format(), output);
  }
  
  // optional .TSK.FormatStructArchive currency_format = 12;
  if (has_currency_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->currency_format(), output);
  }
  
  // optional .TSK.FormatStructArchive duration_format = 13;
  if (has_duration_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->duration_format(), output);
  }
  
  // optional .TSK.FormatStructArchive date_format = 14;
  if (has_date_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->date_format(), output);
  }
  
  // optional .TSK.FormatStructArchive control_format = 15;
  if (has_control_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->control_format(), output);
  }
  
  // optional .TSK.FormatStructArchive custom_format = 16;
  if (has_custom_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->custom_format(), output);
  }
  
  // optional .TSK.FormatStructArchive base_format = 17;
  if (has_base_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->base_format(), output);
  }
  
  // optional .TSK.FormatStructArchive multiple_choice_list_format = 18;
  if (has_multiple_choice_list_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->multiple_choice_list_format(), output);
  }
  
  // optional uint32 explicit_format_flags = 19;
  if (has_explicit_format_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->explicit_format_flags(), output);
  }
  
  // optional .TSP.Reference richTextPayload = 20;
  if (has_richtextpayload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->richtextpayload(), output);
  }
  
  // optional .TSP.Reference conditional_style = 21;
  if (has_conditional_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->conditional_style(), output);
  }
  
  // optional .TSP.Reference multiple_choice_list = 22;
  if (has_multiple_choice_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->multiple_choice_list(), output);
  }
  
  // optional .TSP.Reference comment_storage = 23;
  if (has_comment_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->comment_storage(), output);
  }
  
  // optional uint32 conditional_style_applied_rule = 24;
  if (has_conditional_style_applied_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->conditional_style_applied_rule(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellValueType valueType = 2;
  if (has_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->valuetype(), target);
  }
  
  // optional .TSP.Reference cell_style = 3;
  if (has_cell_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_style(), target);
  }
  
  // optional .TSP.Reference text_style = 4;
  if (has_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->text_style(), target);
  }
  
  // optional double numberValue = 5;
  if (has_numbervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->numbervalue(), target);
  }
  
  // optional string stringValue = 6;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringvalue().data(), this->stringvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stringvalue(), target);
  }
  
  // optional bool boolValue = 7;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->boolvalue(), target);
  }
  
  // optional .TSCE.FormulaArchive formula = 8;
  if (has_formula()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->formula(), target);
  }
  
  // optional .TSK.FormatStructArchive current_format = 9;
  if (has_current_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->current_format(), target);
  }
  
  // optional .TSP.Reference formulaError = 10;
  if (has_formulaerror()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->formulaerror(), target);
  }
  
  // optional .TSK.FormatStructArchive number_format = 11;
  if (has_number_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->number_format(), target);
  }
  
  // optional .TSK.FormatStructArchive currency_format = 12;
  if (has_currency_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->currency_format(), target);
  }
  
  // optional .TSK.FormatStructArchive duration_format = 13;
  if (has_duration_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->duration_format(), target);
  }
  
  // optional .TSK.FormatStructArchive date_format = 14;
  if (has_date_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->date_format(), target);
  }
  
  // optional .TSK.FormatStructArchive control_format = 15;
  if (has_control_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->control_format(), target);
  }
  
  // optional .TSK.FormatStructArchive custom_format = 16;
  if (has_custom_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->custom_format(), target);
  }
  
  // optional .TSK.FormatStructArchive base_format = 17;
  if (has_base_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->base_format(), target);
  }
  
  // optional .TSK.FormatStructArchive multiple_choice_list_format = 18;
  if (has_multiple_choice_list_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->multiple_choice_list_format(), target);
  }
  
  // optional uint32 explicit_format_flags = 19;
  if (has_explicit_format_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->explicit_format_flags(), target);
  }
  
  // optional .TSP.Reference richTextPayload = 20;
  if (has_richtextpayload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->richtextpayload(), target);
  }
  
  // optional .TSP.Reference conditional_style = 21;
  if (has_conditional_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->conditional_style(), target);
  }
  
  // optional .TSP.Reference multiple_choice_list = 22;
  if (has_multiple_choice_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->multiple_choice_list(), target);
  }
  
  // optional .TSP.Reference comment_storage = 23;
  if (has_comment_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->comment_storage(), target);
  }
  
  // optional uint32 conditional_style_applied_rule = 24;
  if (has_conditional_style_applied_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->conditional_style_applied_rule(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellValueType valueType = 2;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->valuetype());
    }
    
    // optional double numberValue = 5;
    if (has_numbervalue()) {
      total_size += 1 + 8;
    }
    
    // optional string stringValue = 6;
    if (has_stringvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringvalue());
    }
    
    // optional bool boolValue = 7;
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }
    
    // optional .TSP.Reference cell_style = 3;
    if (has_cell_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_style());
    }
    
    // optional .TSP.Reference text_style = 4;
    if (has_text_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_style());
    }
    
    // optional .TSCE.FormulaArchive formula = 8;
    if (has_formula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula());
    }
    
    // optional .TSP.Reference formulaError = 10;
    if (has_formulaerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formulaerror());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSK.FormatStructArchive current_format = 9;
    if (has_current_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_format());
    }
    
    // optional .TSK.FormatStructArchive number_format = 11;
    if (has_number_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->number_format());
    }
    
    // optional .TSK.FormatStructArchive currency_format = 12;
    if (has_currency_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currency_format());
    }
    
    // optional .TSK.FormatStructArchive duration_format = 13;
    if (has_duration_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duration_format());
    }
    
    // optional .TSK.FormatStructArchive date_format = 14;
    if (has_date_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_format());
    }
    
    // optional .TSK.FormatStructArchive control_format = 15;
    if (has_control_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_format());
    }
    
    // optional .TSK.FormatStructArchive custom_format = 16;
    if (has_custom_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_format());
    }
    
    // optional .TSK.FormatStructArchive base_format = 17;
    if (has_base_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_format());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSK.FormatStructArchive multiple_choice_list_format = 18;
    if (has_multiple_choice_list_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multiple_choice_list_format());
    }
    
    // optional uint32 explicit_format_flags = 19;
    if (has_explicit_format_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->explicit_format_flags());
    }
    
    // optional .TSP.Reference richTextPayload = 20;
    if (has_richtextpayload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->richtextpayload());
    }
    
    // optional .TSP.Reference conditional_style = 21;
    if (has_conditional_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditional_style());
    }
    
    // optional .TSP.Reference multiple_choice_list = 22;
    if (has_multiple_choice_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multiple_choice_list());
    }
    
    // optional .TSP.Reference comment_storage = 23;
    if (has_comment_storage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment_storage());
    }
    
    // optional uint32 conditional_style_applied_rule = 24;
    if (has_conditional_style_applied_rule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conditional_style_applied_rule());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valuetype()) {
      set_valuetype(from.valuetype());
    }
    if (from.has_numbervalue()) {
      set_numbervalue(from.numbervalue());
    }
    if (from.has_stringvalue()) {
      set_stringvalue(from.stringvalue());
    }
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
    if (from.has_cell_style()) {
      mutable_cell_style()->::TSP::Reference::MergeFrom(from.cell_style());
    }
    if (from.has_text_style()) {
      mutable_text_style()->::TSP::Reference::MergeFrom(from.text_style());
    }
    if (from.has_formula()) {
      mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from.formula());
    }
    if (from.has_formulaerror()) {
      mutable_formulaerror()->::TSP::Reference::MergeFrom(from.formulaerror());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_current_format()) {
      mutable_current_format()->::TSK::FormatStructArchive::MergeFrom(from.current_format());
    }
    if (from.has_number_format()) {
      mutable_number_format()->::TSK::FormatStructArchive::MergeFrom(from.number_format());
    }
    if (from.has_currency_format()) {
      mutable_currency_format()->::TSK::FormatStructArchive::MergeFrom(from.currency_format());
    }
    if (from.has_duration_format()) {
      mutable_duration_format()->::TSK::FormatStructArchive::MergeFrom(from.duration_format());
    }
    if (from.has_date_format()) {
      mutable_date_format()->::TSK::FormatStructArchive::MergeFrom(from.date_format());
    }
    if (from.has_control_format()) {
      mutable_control_format()->::TSK::FormatStructArchive::MergeFrom(from.control_format());
    }
    if (from.has_custom_format()) {
      mutable_custom_format()->::TSK::FormatStructArchive::MergeFrom(from.custom_format());
    }
    if (from.has_base_format()) {
      mutable_base_format()->::TSK::FormatStructArchive::MergeFrom(from.base_format());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_multiple_choice_list_format()) {
      mutable_multiple_choice_list_format()->::TSK::FormatStructArchive::MergeFrom(from.multiple_choice_list_format());
    }
    if (from.has_explicit_format_flags()) {
      set_explicit_format_flags(from.explicit_format_flags());
    }
    if (from.has_richtextpayload()) {
      mutable_richtextpayload()->::TSP::Reference::MergeFrom(from.richtextpayload());
    }
    if (from.has_conditional_style()) {
      mutable_conditional_style()->::TSP::Reference::MergeFrom(from.conditional_style());
    }
    if (from.has_multiple_choice_list()) {
      mutable_multiple_choice_list()->::TSP::Reference::MergeFrom(from.multiple_choice_list());
    }
    if (from.has_comment_storage()) {
      mutable_comment_storage()->::TSP::Reference::MergeFrom(from.comment_storage());
    }
    if (from.has_conditional_style_applied_rule()) {
      set_conditional_style_applied_rule(from.conditional_style_applied_rule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cell_style()) {
    if (!this->cell_style().IsInitialized()) return false;
  }
  if (has_text_style()) {
    if (!this->text_style().IsInitialized()) return false;
  }
  if (has_formula()) {
    if (!this->formula().IsInitialized()) return false;
  }
  if (has_formulaerror()) {
    if (!this->formulaerror().IsInitialized()) return false;
  }
  if (has_current_format()) {
    if (!this->current_format().IsInitialized()) return false;
  }
  if (has_number_format()) {
    if (!this->number_format().IsInitialized()) return false;
  }
  if (has_currency_format()) {
    if (!this->currency_format().IsInitialized()) return false;
  }
  if (has_duration_format()) {
    if (!this->duration_format().IsInitialized()) return false;
  }
  if (has_date_format()) {
    if (!this->date_format().IsInitialized()) return false;
  }
  if (has_control_format()) {
    if (!this->control_format().IsInitialized()) return false;
  }
  if (has_custom_format()) {
    if (!this->custom_format().IsInitialized()) return false;
  }
  if (has_base_format()) {
    if (!this->base_format().IsInitialized()) return false;
  }
  if (has_multiple_choice_list_format()) {
    if (!this->multiple_choice_list_format().IsInitialized()) return false;
  }
  if (has_richtextpayload()) {
    if (!this->richtextpayload().IsInitialized()) return false;
  }
  if (has_conditional_style()) {
    if (!this->conditional_style().IsInitialized()) return false;
  }
  if (has_multiple_choice_list()) {
    if (!this->multiple_choice_list().IsInitialized()) return false;
  }
  if (has_comment_storage()) {
    if (!this->comment_storage().IsInitialized()) return false;
  }
  return true;
}

void Cell::Swap(Cell* other) {
  if (other != this) {
    std::swap(valuetype_, other->valuetype_);
    std::swap(numbervalue_, other->numbervalue_);
    std::swap(stringvalue_, other->stringvalue_);
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(cell_style_, other->cell_style_);
    std::swap(text_style_, other->text_style_);
    std::swap(formula_, other->formula_);
    std::swap(formulaerror_, other->formulaerror_);
    std::swap(current_format_, other->current_format_);
    std::swap(number_format_, other->number_format_);
    std::swap(currency_format_, other->currency_format_);
    std::swap(duration_format_, other->duration_format_);
    std::swap(date_format_, other->date_format_);
    std::swap(control_format_, other->control_format_);
    std::swap(custom_format_, other->custom_format_);
    std::swap(base_format_, other->base_format_);
    std::swap(multiple_choice_list_format_, other->multiple_choice_list_format_);
    std::swap(explicit_format_flags_, other->explicit_format_flags_);
    std::swap(richtextpayload_, other->richtextpayload_);
    std::swap(conditional_style_, other->conditional_style_);
    std::swap(multiple_choice_list_, other->multiple_choice_list_);
    std::swap(comment_storage_, other->comment_storage_);
    std::swap(conditional_style_applied_rule_, other->conditional_style_applied_rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MergeRegionMapArchive::kCellRangeFieldNumber;
#endif  // !_MSC_VER

MergeRegionMapArchive::MergeRegionMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MergeRegionMapArchive::InitAsDefaultInstance() {
}

MergeRegionMapArchive::MergeRegionMapArchive(const MergeRegionMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MergeRegionMapArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeRegionMapArchive::~MergeRegionMapArchive() {
  SharedDtor();
}

void MergeRegionMapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MergeRegionMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeRegionMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeRegionMapArchive_descriptor_;
}

const MergeRegionMapArchive& MergeRegionMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

MergeRegionMapArchive* MergeRegionMapArchive::default_instance_ = NULL;

MergeRegionMapArchive* MergeRegionMapArchive::New() const {
  return new MergeRegionMapArchive;
}

void MergeRegionMapArchive::Clear() {
  cell_range_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MergeRegionMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TST.CellRange cell_range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell_range;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MergeRegionMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TST.CellRange cell_range = 1;
  for (int i = 0; i < this->cell_range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_range(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MergeRegionMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TST.CellRange cell_range = 1;
  for (int i = 0; i < this->cell_range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_range(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MergeRegionMapArchive::ByteSize() const {
  int total_size = 0;
  
  // repeated .TST.CellRange cell_range = 1;
  total_size += 1 * this->cell_range_size();
  for (int i = 0; i < this->cell_range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_range(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeRegionMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MergeRegionMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MergeRegionMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeRegionMapArchive::MergeFrom(const MergeRegionMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_range_.MergeFrom(from.cell_range_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MergeRegionMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeRegionMapArchive::CopyFrom(const MergeRegionMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRegionMapArchive::IsInitialized() const {
  
  for (int i = 0; i < cell_range_size(); i++) {
    if (!this->cell_range(i).IsInitialized()) return false;
  }
  return true;
}

void MergeRegionMapArchive::Swap(MergeRegionMapArchive* other) {
  if (other != this) {
    cell_range_.Swap(&other->cell_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MergeRegionMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeRegionMapArchive_descriptor_;
  metadata.reflection = MergeRegionMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellMapArchive_CellMapEntry::kCellIDFieldNumber;
const int CellMapArchive_CellMapEntry::kCellFieldNumber;
#endif  // !_MSC_VER

CellMapArchive_CellMapEntry::CellMapArchive_CellMapEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellMapArchive_CellMapEntry::InitAsDefaultInstance() {
  cellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
}

CellMapArchive_CellMapEntry::CellMapArchive_CellMapEntry(const CellMapArchive_CellMapEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellMapArchive_CellMapEntry::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = NULL;
  cell_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellMapArchive_CellMapEntry::~CellMapArchive_CellMapEntry() {
  SharedDtor();
}

void CellMapArchive_CellMapEntry::SharedDtor() {
  if (this != default_instance_) {
    delete cellid_;
    delete cell_;
  }
}

void CellMapArchive_CellMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellMapArchive_CellMapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellMapArchive_CellMapEntry_descriptor_;
}

const CellMapArchive_CellMapEntry& CellMapArchive_CellMapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

CellMapArchive_CellMapEntry* CellMapArchive_CellMapEntry::default_instance_ = NULL;

CellMapArchive_CellMapEntry* CellMapArchive_CellMapEntry::New() const {
  return new CellMapArchive_CellMapEntry;
}

void CellMapArchive_CellMapEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cellid()) {
      if (cellid_ != NULL) cellid_->::TST::CellID::Clear();
    }
    if (has_cell()) {
      if (cell_ != NULL) cell_->::TST::Cell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellMapArchive_CellMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellID cellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell;
        break;
      }
      
      // optional .TST.Cell cell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellMapArchive_CellMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellID cellID = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cellid(), output);
  }
  
  // optional .TST.Cell cell = 2;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellMapArchive_CellMapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellID cellID = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cellid(), target);
  }
  
  // optional .TST.Cell cell = 2;
  if (has_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellMapArchive_CellMapEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellID cellID = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellid());
    }
    
    // optional .TST.Cell cell = 2;
    if (has_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellMapArchive_CellMapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellMapArchive_CellMapEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellMapArchive_CellMapEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellMapArchive_CellMapEntry::MergeFrom(const CellMapArchive_CellMapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      mutable_cellid()->::TST::CellID::MergeFrom(from.cellid());
    }
    if (from.has_cell()) {
      mutable_cell()->::TST::Cell::MergeFrom(from.cell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellMapArchive_CellMapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellMapArchive_CellMapEntry::CopyFrom(const CellMapArchive_CellMapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellMapArchive_CellMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cellid()) {
    if (!this->cellid().IsInitialized()) return false;
  }
  if (has_cell()) {
    if (!this->cell().IsInitialized()) return false;
  }
  return true;
}

void CellMapArchive_CellMapEntry::Swap(CellMapArchive_CellMapEntry* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(cell_, other->cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellMapArchive_CellMapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellMapArchive_CellMapEntry_descriptor_;
  metadata.reflection = CellMapArchive_CellMapEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CellMapArchive::kCapacityFieldNumber;
const int CellMapArchive::kCountFieldNumber;
const int CellMapArchive::kCellMapEntryFieldNumber;
const int CellMapArchive::kMayModifyFormulasInCellsFieldNumber;
const int CellMapArchive::kMayModifyValuesReferencedByFormulasFieldNumber;
const int CellMapArchive::kAppliesToHiddenFieldNumber;
#endif  // !_MSC_VER

CellMapArchive::CellMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellMapArchive::InitAsDefaultInstance() {
}

CellMapArchive::CellMapArchive(const CellMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellMapArchive::SharedCtor() {
  _cached_size_ = 0;
  capacity_ = 0u;
  count_ = 0u;
  may_modify_formulas_in_cells_ = true;
  may_modify_values_referenced_by_formulas_ = true;
  applies_to_hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellMapArchive::~CellMapArchive() {
  SharedDtor();
}

void CellMapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellMapArchive_descriptor_;
}

const CellMapArchive& CellMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

CellMapArchive* CellMapArchive::default_instance_ = NULL;

CellMapArchive* CellMapArchive::New() const {
  return new CellMapArchive;
}

void CellMapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    capacity_ = 0u;
    count_ = 0u;
    may_modify_formulas_in_cells_ = true;
    may_modify_values_referenced_by_formulas_ = true;
    applies_to_hidden_ = false;
  }
  cellmapentry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 capacity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cellMapEntry;
        break;
      }
      
      // repeated .TST.CellMapArchive.CellMapEntry cellMapEntry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cellMapEntry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cellmapentry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cellMapEntry;
        if (input->ExpectTag(32)) goto parse_may_modify_formulas_in_cells;
        break;
      }
      
      // optional bool may_modify_formulas_in_cells = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_may_modify_formulas_in_cells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &may_modify_formulas_in_cells_)));
          set_has_may_modify_formulas_in_cells();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_may_modify_values_referenced_by_formulas;
        break;
      }
      
      // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_may_modify_values_referenced_by_formulas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &may_modify_values_referenced_by_formulas_)));
          set_has_may_modify_values_referenced_by_formulas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_applies_to_hidden;
        break;
      }
      
      // optional bool applies_to_hidden = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applies_to_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applies_to_hidden_)));
          set_has_applies_to_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 capacity = 1;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->capacity(), output);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // repeated .TST.CellMapArchive.CellMapEntry cellMapEntry = 3;
  for (int i = 0; i < this->cellmapentry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cellmapentry(i), output);
  }
  
  // optional bool may_modify_formulas_in_cells = 4 [default = true];
  if (has_may_modify_formulas_in_cells()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->may_modify_formulas_in_cells(), output);
  }
  
  // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
  if (has_may_modify_values_referenced_by_formulas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->may_modify_values_referenced_by_formulas(), output);
  }
  
  // optional bool applies_to_hidden = 6 [default = false];
  if (has_applies_to_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->applies_to_hidden(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 capacity = 1;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->capacity(), target);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // repeated .TST.CellMapArchive.CellMapEntry cellMapEntry = 3;
  for (int i = 0; i < this->cellmapentry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cellmapentry(i), target);
  }
  
  // optional bool may_modify_formulas_in_cells = 4 [default = true];
  if (has_may_modify_formulas_in_cells()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->may_modify_formulas_in_cells(), target);
  }
  
  // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
  if (has_may_modify_values_referenced_by_formulas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->may_modify_values_referenced_by_formulas(), target);
  }
  
  // optional bool applies_to_hidden = 6 [default = false];
  if (has_applies_to_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->applies_to_hidden(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellMapArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 capacity = 1;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity());
    }
    
    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional bool may_modify_formulas_in_cells = 4 [default = true];
    if (has_may_modify_formulas_in_cells()) {
      total_size += 1 + 1;
    }
    
    // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
    if (has_may_modify_values_referenced_by_formulas()) {
      total_size += 1 + 1;
    }
    
    // optional bool applies_to_hidden = 6 [default = false];
    if (has_applies_to_hidden()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .TST.CellMapArchive.CellMapEntry cellMapEntry = 3;
  total_size += 1 * this->cellmapentry_size();
  for (int i = 0; i < this->cellmapentry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cellmapentry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellMapArchive::MergeFrom(const CellMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  cellmapentry_.MergeFrom(from.cellmapentry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_may_modify_formulas_in_cells()) {
      set_may_modify_formulas_in_cells(from.may_modify_formulas_in_cells());
    }
    if (from.has_may_modify_values_referenced_by_formulas()) {
      set_may_modify_values_referenced_by_formulas(from.may_modify_values_referenced_by_formulas());
    }
    if (from.has_applies_to_hidden()) {
      set_applies_to_hidden(from.applies_to_hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellMapArchive::CopyFrom(const CellMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellMapArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < cellmapentry_size(); i++) {
    if (!this->cellmapentry(i).IsInitialized()) return false;
  }
  return true;
}

void CellMapArchive::Swap(CellMapArchive* other) {
  if (other != this) {
    std::swap(capacity_, other->capacity_);
    std::swap(count_, other->count_);
    cellmapentry_.Swap(&other->cellmapentry_);
    std::swap(may_modify_formulas_in_cells_, other->may_modify_formulas_in_cells_);
    std::swap(may_modify_values_referenced_by_formulas_, other->may_modify_values_referenced_by_formulas_);
    std::swap(applies_to_hidden_, other->applies_to_hidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellMapArchive_descriptor_;
  metadata.reflection = CellMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleStyleMapArchive_DoubleStyleMapEntryArchive::kCellIdFieldNumber;
const int DoubleStyleMapArchive_DoubleStyleMapEntryArchive::kOldStyleFieldNumber;
const int DoubleStyleMapArchive_DoubleStyleMapEntryArchive::kNewStyleFieldNumber;
#endif  // !_MSC_VER

DoubleStyleMapArchive_DoubleStyleMapEntryArchive::DoubleStyleMapArchive_DoubleStyleMapEntryArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::InitAsDefaultInstance() {
  cell_id_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  old_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DoubleStyleMapArchive_DoubleStyleMapEntryArchive::DoubleStyleMapArchive_DoubleStyleMapEntryArchive(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SharedCtor() {
  _cached_size_ = 0;
  cell_id_ = NULL;
  old_style_ = NULL;
  new_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleStyleMapArchive_DoubleStyleMapEntryArchive::~DoubleStyleMapArchive_DoubleStyleMapEntryArchive() {
  SharedDtor();
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cell_id_;
    delete old_style_;
    delete new_style_;
  }
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleStyleMapArchive_DoubleStyleMapEntryArchive_descriptor_;
}

const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& DoubleStyleMapArchive_DoubleStyleMapEntryArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

DoubleStyleMapArchive_DoubleStyleMapEntryArchive* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::default_instance_ = NULL;

DoubleStyleMapArchive_DoubleStyleMapEntryArchive* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::New() const {
  return new DoubleStyleMapArchive_DoubleStyleMapEntryArchive;
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cell_id()) {
      if (cell_id_ != NULL) cell_id_->::TST::CellID::Clear();
    }
    if (has_old_style()) {
      if (old_style_ != NULL) old_style_->::TSP::Reference::Clear();
    }
    if (has_new_style()) {
      if (new_style_ != NULL) new_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellID cell_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_style;
        break;
      }
      
      // required .TSP.Reference old_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_style;
        break;
      }
      
      // required .TSP.Reference new_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellID cell_id = 1;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_id(), output);
  }
  
  // required .TSP.Reference old_style = 2;
  if (has_old_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_style(), output);
  }
  
  // required .TSP.Reference new_style = 3;
  if (has_new_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_style(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellID cell_id = 1;
  if (has_cell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_id(), target);
  }
  
  // required .TSP.Reference old_style = 2;
  if (has_old_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_style(), target);
  }
  
  // required .TSP.Reference new_style = 3;
  if (has_new_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_style(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleStyleMapArchive_DoubleStyleMapEntryArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellID cell_id = 1;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_id());
    }
    
    // required .TSP.Reference old_style = 2;
    if (has_old_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_style());
    }
    
    // required .TSP.Reference new_style = 3;
    if (has_new_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_style());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleStyleMapArchive_DoubleStyleMapEntryArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::MergeFrom(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_id()) {
      mutable_cell_id()->::TST::CellID::MergeFrom(from.cell_id());
    }
    if (from.has_old_style()) {
      mutable_old_style()->::TSP::Reference::MergeFrom(from.old_style());
    }
    if (from.has_new_style()) {
      mutable_new_style()->::TSP::Reference::MergeFrom(from.new_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::CopyFrom(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_cell_id()) {
    if (!this->cell_id().IsInitialized()) return false;
  }
  if (has_old_style()) {
    if (!this->old_style().IsInitialized()) return false;
  }
  if (has_new_style()) {
    if (!this->new_style().IsInitialized()) return false;
  }
  return true;
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::Swap(DoubleStyleMapArchive_DoubleStyleMapEntryArchive* other) {
  if (other != this) {
    std::swap(cell_id_, other->cell_id_);
    std::swap(old_style_, other->old_style_);
    std::swap(new_style_, other->new_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleStyleMapArchive_DoubleStyleMapEntryArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleStyleMapArchive_DoubleStyleMapEntryArchive_descriptor_;
  metadata.reflection = DoubleStyleMapArchive_DoubleStyleMapEntryArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DoubleStyleMapArchive::kCapacityFieldNumber;
const int DoubleStyleMapArchive::kCountFieldNumber;
const int DoubleStyleMapArchive::kCellMapEntryFieldNumber;
#endif  // !_MSC_VER

DoubleStyleMapArchive::DoubleStyleMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleStyleMapArchive::InitAsDefaultInstance() {
}

DoubleStyleMapArchive::DoubleStyleMapArchive(const DoubleStyleMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleStyleMapArchive::SharedCtor() {
  _cached_size_ = 0;
  capacity_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleStyleMapArchive::~DoubleStyleMapArchive() {
  SharedDtor();
}

void DoubleStyleMapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleStyleMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleStyleMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleStyleMapArchive_descriptor_;
}

const DoubleStyleMapArchive& DoubleStyleMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

DoubleStyleMapArchive* DoubleStyleMapArchive::default_instance_ = NULL;

DoubleStyleMapArchive* DoubleStyleMapArchive::New() const {
  return new DoubleStyleMapArchive;
}

void DoubleStyleMapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    capacity_ = 0u;
    count_ = 0u;
  }
  cell_map_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleStyleMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 capacity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_map_entry;
        break;
      }
      
      // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_map_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_map_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_map_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleStyleMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 capacity = 1;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->capacity(), output);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
  for (int i = 0; i < this->cell_map_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_map_entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleStyleMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 capacity = 1;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->capacity(), target);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
  for (int i = 0; i < this->cell_map_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_map_entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleStyleMapArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 capacity = 1;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity());
    }
    
    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
  total_size += 1 * this->cell_map_entry_size();
  for (int i = 0; i < this->cell_map_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_map_entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleStyleMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleStyleMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleStyleMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleStyleMapArchive::MergeFrom(const DoubleStyleMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_map_entry_.MergeFrom(from.cell_map_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleStyleMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleStyleMapArchive::CopyFrom(const DoubleStyleMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleStyleMapArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < cell_map_entry_size(); i++) {
    if (!this->cell_map_entry(i).IsInitialized()) return false;
  }
  return true;
}

void DoubleStyleMapArchive::Swap(DoubleStyleMapArchive* other) {
  if (other != this) {
    std::swap(capacity_, other->capacity_);
    std::swap(count_, other->count_);
    cell_map_entry_.Swap(&other->cell_map_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleStyleMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleStyleMapArchive_descriptor_;
  metadata.reflection = DoubleStyleMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleTableMapArchive_StyleTableMapEntryArchive::kKeyFieldNumber;
const int StyleTableMapArchive_StyleTableMapEntryArchive::kOldStyleFieldNumber;
const int StyleTableMapArchive_StyleTableMapEntryArchive::kNewStyleFieldNumber;
#endif  // !_MSC_VER

StyleTableMapArchive_StyleTableMapEntryArchive::StyleTableMapArchive_StyleTableMapEntryArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleTableMapArchive_StyleTableMapEntryArchive::InitAsDefaultInstance() {
  old_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StyleTableMapArchive_StyleTableMapEntryArchive::StyleTableMapArchive_StyleTableMapEntryArchive(const StyleTableMapArchive_StyleTableMapEntryArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleTableMapArchive_StyleTableMapEntryArchive::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  old_style_ = NULL;
  new_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleTableMapArchive_StyleTableMapEntryArchive::~StyleTableMapArchive_StyleTableMapEntryArchive() {
  SharedDtor();
}

void StyleTableMapArchive_StyleTableMapEntryArchive::SharedDtor() {
  if (this != default_instance_) {
    delete old_style_;
    delete new_style_;
  }
}

void StyleTableMapArchive_StyleTableMapEntryArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleTableMapArchive_StyleTableMapEntryArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleTableMapArchive_StyleTableMapEntryArchive_descriptor_;
}

const StyleTableMapArchive_StyleTableMapEntryArchive& StyleTableMapArchive_StyleTableMapEntryArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

StyleTableMapArchive_StyleTableMapEntryArchive* StyleTableMapArchive_StyleTableMapEntryArchive::default_instance_ = NULL;

StyleTableMapArchive_StyleTableMapEntryArchive* StyleTableMapArchive_StyleTableMapEntryArchive::New() const {
  return new StyleTableMapArchive_StyleTableMapEntryArchive;
}

void StyleTableMapArchive_StyleTableMapEntryArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    if (has_old_style()) {
      if (old_style_ != NULL) old_style_->::TSP::Reference::Clear();
    }
    if (has_new_style()) {
      if (new_style_ != NULL) new_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleTableMapArchive_StyleTableMapEntryArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_style;
        break;
      }
      
      // required .TSP.Reference old_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_style;
        break;
      }
      
      // required .TSP.Reference new_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleTableMapArchive_StyleTableMapEntryArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }
  
  // required .TSP.Reference old_style = 2;
  if (has_old_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_style(), output);
  }
  
  // required .TSP.Reference new_style = 3;
  if (has_new_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_style(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleTableMapArchive_StyleTableMapEntryArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }
  
  // required .TSP.Reference old_style = 2;
  if (has_old_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_style(), target);
  }
  
  // required .TSP.Reference new_style = 3;
  if (has_new_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_style(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleTableMapArchive_StyleTableMapEntryArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }
    
    // required .TSP.Reference old_style = 2;
    if (has_old_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_style());
    }
    
    // required .TSP.Reference new_style = 3;
    if (has_new_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_style());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleTableMapArchive_StyleTableMapEntryArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleTableMapArchive_StyleTableMapEntryArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleTableMapArchive_StyleTableMapEntryArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleTableMapArchive_StyleTableMapEntryArchive::MergeFrom(const StyleTableMapArchive_StyleTableMapEntryArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_old_style()) {
      mutable_old_style()->::TSP::Reference::MergeFrom(from.old_style());
    }
    if (from.has_new_style()) {
      mutable_new_style()->::TSP::Reference::MergeFrom(from.new_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleTableMapArchive_StyleTableMapEntryArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleTableMapArchive_StyleTableMapEntryArchive::CopyFrom(const StyleTableMapArchive_StyleTableMapEntryArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleTableMapArchive_StyleTableMapEntryArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_old_style()) {
    if (!this->old_style().IsInitialized()) return false;
  }
  if (has_new_style()) {
    if (!this->new_style().IsInitialized()) return false;
  }
  return true;
}

void StyleTableMapArchive_StyleTableMapEntryArchive::Swap(StyleTableMapArchive_StyleTableMapEntryArchive* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(old_style_, other->old_style_);
    std::swap(new_style_, other->new_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleTableMapArchive_StyleTableMapEntryArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleTableMapArchive_StyleTableMapEntryArchive_descriptor_;
  metadata.reflection = StyleTableMapArchive_StyleTableMapEntryArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StyleTableMapArchive::kCapacityFieldNumber;
const int StyleTableMapArchive::kCountFieldNumber;
const int StyleTableMapArchive::kMapEntryFieldNumber;
#endif  // !_MSC_VER

StyleTableMapArchive::StyleTableMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleTableMapArchive::InitAsDefaultInstance() {
}

StyleTableMapArchive::StyleTableMapArchive(const StyleTableMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleTableMapArchive::SharedCtor() {
  _cached_size_ = 0;
  capacity_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleTableMapArchive::~StyleTableMapArchive() {
  SharedDtor();
}

void StyleTableMapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StyleTableMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleTableMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleTableMapArchive_descriptor_;
}

const StyleTableMapArchive& StyleTableMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

StyleTableMapArchive* StyleTableMapArchive::default_instance_ = NULL;

StyleTableMapArchive* StyleTableMapArchive::New() const {
  return new StyleTableMapArchive;
}

void StyleTableMapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    capacity_ = 0u;
    count_ = 0u;
  }
  map_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleTableMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 capacity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_map_entry;
        break;
      }
      
      // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_map_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleTableMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 capacity = 1;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->capacity(), output);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
  for (int i = 0; i < this->map_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->map_entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleTableMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 capacity = 1;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->capacity(), target);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
  for (int i = 0; i < this->map_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->map_entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleTableMapArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 capacity = 1;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity());
    }
    
    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
  total_size += 1 * this->map_entry_size();
  for (int i = 0; i < this->map_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleTableMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleTableMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleTableMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleTableMapArchive::MergeFrom(const StyleTableMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_entry_.MergeFrom(from.map_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleTableMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleTableMapArchive::CopyFrom(const StyleTableMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleTableMapArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < map_entry_size(); i++) {
    if (!this->map_entry(i).IsInitialized()) return false;
  }
  return true;
}

void StyleTableMapArchive::Swap(StyleTableMapArchive* other) {
  if (other != this) {
    std::swap(capacity_, other->capacity_);
    std::swap(count_, other->count_);
    map_entry_.Swap(&other->map_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleTableMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleTableMapArchive_descriptor_;
  metadata.reflection = StyleTableMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectionArchive::kTableModelFieldNumber;
const int SelectionArchive::kSelectionTypeFieldNumber;
const int SelectionArchive::kAnchorCellFieldNumber;
const int SelectionArchive::kCellRangesFieldNumber;
const int SelectionArchive::kBaseRangesFieldNumber;
const int SelectionArchive::kCursorCellFieldNumber;
#endif  // !_MSC_VER

SelectionArchive::SelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectionArchive::InitAsDefaultInstance() {
  tablemodel_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  anchor_cell_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  cursor_cell_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
}

SelectionArchive::SelectionArchive(const SelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  tablemodel_ = NULL;
  selection_type_ = 0;
  anchor_cell_ = NULL;
  cursor_cell_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectionArchive::~SelectionArchive() {
  SharedDtor();
}

void SelectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tablemodel_;
    delete anchor_cell_;
    delete cursor_cell_;
  }
}

void SelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectionArchive_descriptor_;
}

const SelectionArchive& SelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

SelectionArchive* SelectionArchive::default_instance_ = NULL;

SelectionArchive* SelectionArchive::New() const {
  return new SelectionArchive;
}

void SelectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tablemodel()) {
      if (tablemodel_ != NULL) tablemodel_->::TSP::Reference::Clear();
    }
    selection_type_ = 0;
    if (has_anchor_cell()) {
      if (anchor_cell_ != NULL) anchor_cell_->::TST::CellID::Clear();
    }
    if (has_cursor_cell()) {
      if (cursor_cell_ != NULL) cursor_cell_->::TST::CellID::Clear();
    }
  }
  cell_ranges_.Clear();
  base_ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference tableModel = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tablemodel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selection_type;
        break;
      }
      
      // required .TST.SelectionTypeArchive selection_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selection_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TST::SelectionTypeArchive_IsValid(value)) {
            set_selection_type(static_cast< TST::SelectionTypeArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_anchor_cell;
        break;
      }
      
      // optional .TST.CellID anchor_cell = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchor_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cell_ranges;
        break;
      }
      
      // repeated .TST.CellRange cell_ranges = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cell_ranges;
        if (input->ExpectTag(58)) goto parse_base_ranges;
        break;
      }
      
      // repeated .TST.CellRange base_ranges = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_base_ranges;
        if (input->ExpectTag(66)) goto parse_cursor_cell;
        break;
      }
      
      // optional .TST.CellID cursor_cell = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cursor_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference tableModel = 1 [deprecated = true];
  if (has_tablemodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tablemodel(), output);
  }
  
  // required .TST.SelectionTypeArchive selection_type = 4;
  if (has_selection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->selection_type(), output);
  }
  
  // optional .TST.CellID anchor_cell = 5;
  if (has_anchor_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anchor_cell(), output);
  }
  
  // repeated .TST.CellRange cell_ranges = 6;
  for (int i = 0; i < this->cell_ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cell_ranges(i), output);
  }
  
  // repeated .TST.CellRange base_ranges = 7;
  for (int i = 0; i < this->base_ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->base_ranges(i), output);
  }
  
  // optional .TST.CellID cursor_cell = 8;
  if (has_cursor_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cursor_cell(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference tableModel = 1 [deprecated = true];
  if (has_tablemodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tablemodel(), target);
  }
  
  // required .TST.SelectionTypeArchive selection_type = 4;
  if (has_selection_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->selection_type(), target);
  }
  
  // optional .TST.CellID anchor_cell = 5;
  if (has_anchor_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->anchor_cell(), target);
  }
  
  // repeated .TST.CellRange cell_ranges = 6;
  for (int i = 0; i < this->cell_ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cell_ranges(i), target);
  }
  
  // repeated .TST.CellRange base_ranges = 7;
  for (int i = 0; i < this->base_ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->base_ranges(i), target);
  }
  
  // optional .TST.CellID cursor_cell = 8;
  if (has_cursor_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cursor_cell(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectionArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference tableModel = 1 [deprecated = true];
    if (has_tablemodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tablemodel());
    }
    
    // required .TST.SelectionTypeArchive selection_type = 4;
    if (has_selection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_type());
    }
    
    // optional .TST.CellID anchor_cell = 5;
    if (has_anchor_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor_cell());
    }
    
    // optional .TST.CellID cursor_cell = 8;
    if (has_cursor_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_cell());
    }
    
  }
  // repeated .TST.CellRange cell_ranges = 6;
  total_size += 1 * this->cell_ranges_size();
  for (int i = 0; i < this->cell_ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_ranges(i));
  }
  
  // repeated .TST.CellRange base_ranges = 7;
  total_size += 1 * this->base_ranges_size();
  for (int i = 0; i < this->base_ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_ranges(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectionArchive::MergeFrom(const SelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_ranges_.MergeFrom(from.cell_ranges_);
  base_ranges_.MergeFrom(from.base_ranges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablemodel()) {
      mutable_tablemodel()->::TSP::Reference::MergeFrom(from.tablemodel());
    }
    if (from.has_selection_type()) {
      set_selection_type(from.selection_type());
    }
    if (from.has_anchor_cell()) {
      mutable_anchor_cell()->::TST::CellID::MergeFrom(from.anchor_cell());
    }
    if (from.has_cursor_cell()) {
      mutable_cursor_cell()->::TST::CellID::MergeFrom(from.cursor_cell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectionArchive::CopyFrom(const SelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_tablemodel()) {
    if (!this->tablemodel().IsInitialized()) return false;
  }
  if (has_anchor_cell()) {
    if (!this->anchor_cell().IsInitialized()) return false;
  }
  for (int i = 0; i < cell_ranges_size(); i++) {
    if (!this->cell_ranges(i).IsInitialized()) return false;
  }
  for (int i = 0; i < base_ranges_size(); i++) {
    if (!this->base_ranges(i).IsInitialized()) return false;
  }
  if (has_cursor_cell()) {
    if (!this->cursor_cell().IsInitialized()) return false;
  }
  return true;
}

void SelectionArchive::Swap(SelectionArchive* other) {
  if (other != this) {
    std::swap(tablemodel_, other->tablemodel_);
    std::swap(selection_type_, other->selection_type_);
    std::swap(anchor_cell_, other->anchor_cell_);
    cell_ranges_.Swap(&other->cell_ranges_);
    base_ranges_.Swap(&other->base_ranges_);
    std::swap(cursor_cell_, other->cursor_cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectionArchive_descriptor_;
  metadata.reflection = SelectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilterRuleArchive::kPredicateFieldNumber;
const int FilterRuleArchive::kDisabledFieldNumber;
#endif  // !_MSC_VER

FilterRuleArchive::FilterRuleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilterRuleArchive::InitAsDefaultInstance() {
  predicate_ = const_cast< ::TST::FormulaPredicateArchive*>(&::TST::FormulaPredicateArchive::default_instance());
}

FilterRuleArchive::FilterRuleArchive(const FilterRuleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilterRuleArchive::SharedCtor() {
  _cached_size_ = 0;
  predicate_ = NULL;
  disabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterRuleArchive::~FilterRuleArchive() {
  SharedDtor();
}

void FilterRuleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete predicate_;
  }
}

void FilterRuleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterRuleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterRuleArchive_descriptor_;
}

const FilterRuleArchive& FilterRuleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

FilterRuleArchive* FilterRuleArchive::default_instance_ = NULL;

FilterRuleArchive* FilterRuleArchive::New() const {
  return new FilterRuleArchive;
}

void FilterRuleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_predicate()) {
      if (predicate_ != NULL) predicate_->::TST::FormulaPredicateArchive::Clear();
    }
    disabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterRuleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.FormulaPredicateArchive predicate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predicate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_disabled;
        break;
      }
      
      // optional bool disabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
          set_has_disabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterRuleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.FormulaPredicateArchive predicate = 1;
  if (has_predicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->predicate(), output);
  }
  
  // optional bool disabled = 2;
  if (has_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilterRuleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.FormulaPredicateArchive predicate = 1;
  if (has_predicate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->predicate(), target);
  }
  
  // optional bool disabled = 2;
  if (has_disabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilterRuleArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.FormulaPredicateArchive predicate = 1;
    if (has_predicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predicate());
    }
    
    // optional bool disabled = 2;
    if (has_disabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterRuleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterRuleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterRuleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterRuleArchive::MergeFrom(const FilterRuleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predicate()) {
      mutable_predicate()->::TST::FormulaPredicateArchive::MergeFrom(from.predicate());
    }
    if (from.has_disabled()) {
      set_disabled(from.disabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterRuleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterRuleArchive::CopyFrom(const FilterRuleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRuleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_predicate()) {
    if (!this->predicate().IsInitialized()) return false;
  }
  return true;
}

void FilterRuleArchive::Swap(FilterRuleArchive* other) {
  if (other != this) {
    std::swap(predicate_, other->predicate_);
    std::swap(disabled_, other->disabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterRuleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterRuleArchive_descriptor_;
  metadata.reflection = FilterRuleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableStyleArchive::kSuperFieldNumber;
const int TableStyleArchive::kOverrideCountFieldNumber;
const int TableStyleArchive::kTablePropertiesFieldNumber;
#endif  // !_MSC_VER

TableStyleArchive::TableStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  table_properties_ = const_cast< ::TST::TableStylePropertiesArchive*>(&::TST::TableStylePropertiesArchive::default_instance());
}

TableStyleArchive::TableStyleArchive(const TableStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  table_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableStyleArchive::~TableStyleArchive() {
  SharedDtor();
}

void TableStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete table_properties_;
  }
}

void TableStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableStyleArchive_descriptor_;
}

const TableStyleArchive& TableStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TableStyleArchive* TableStyleArchive::default_instance_ = NULL;

TableStyleArchive* TableStyleArchive::New() const {
  return new TableStyleArchive;
}

void TableStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_table_properties()) {
      if (table_properties_ != NULL) table_properties_->::TST::TableStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }
      
      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_table_properties;
        break;
      }
      
      // optional .TST.TableStylePropertiesArchive table_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }
  
  // optional .TST.TableStylePropertiesArchive table_properties = 11;
  if (has_table_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->table_properties(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }
  
  // optional .TST.TableStylePropertiesArchive table_properties = 11;
  if (has_table_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->table_properties(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableStyleArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }
    
    // optional .TST.TableStylePropertiesArchive table_properties = 11;
    if (has_table_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_properties());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableStyleArchive::MergeFrom(const TableStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_table_properties()) {
      mutable_table_properties()->::TST::TableStylePropertiesArchive::MergeFrom(from.table_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableStyleArchive::CopyFrom(const TableStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_table_properties()) {
    if (!this->table_properties().IsInitialized()) return false;
  }
  return true;
}

void TableStyleArchive::Swap(TableStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(table_properties_, other->table_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableStyleArchive_descriptor_;
  metadata.reflection = TableStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellStyleArchive::kSuperFieldNumber;
const int CellStyleArchive::kOverrideCountFieldNumber;
const int CellStyleArchive::kCellPropertiesFieldNumber;
#endif  // !_MSC_VER

CellStyleArchive::CellStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  cell_properties_ = const_cast< ::TST::CellStylePropertiesArchive*>(&::TST::CellStylePropertiesArchive::default_instance());
}

CellStyleArchive::CellStyleArchive(const CellStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  cell_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellStyleArchive::~CellStyleArchive() {
  SharedDtor();
}

void CellStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete cell_properties_;
  }
}

void CellStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellStyleArchive_descriptor_;
}

const CellStyleArchive& CellStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

CellStyleArchive* CellStyleArchive::default_instance_ = NULL;

CellStyleArchive* CellStyleArchive::New() const {
  return new CellStyleArchive;
}

void CellStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_cell_properties()) {
      if (cell_properties_ != NULL) cell_properties_->::TST::CellStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }
      
      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_cell_properties;
        break;
      }
      
      // optional .TST.CellStylePropertiesArchive cell_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }
  
  // optional .TST.CellStylePropertiesArchive cell_properties = 11;
  if (has_cell_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->cell_properties(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }
  
  // optional .TST.CellStylePropertiesArchive cell_properties = 11;
  if (has_cell_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->cell_properties(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellStyleArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }
    
    // optional .TST.CellStylePropertiesArchive cell_properties = 11;
    if (has_cell_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_properties());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellStyleArchive::MergeFrom(const CellStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_cell_properties()) {
      mutable_cell_properties()->::TST::CellStylePropertiesArchive::MergeFrom(from.cell_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellStyleArchive::CopyFrom(const CellStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_cell_properties()) {
    if (!this->cell_properties().IsInitialized()) return false;
  }
  return true;
}

void CellStyleArchive::Swap(CellStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(cell_properties_, other->cell_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellStyleArchive_descriptor_;
  metadata.reflection = CellStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FormulaPredicateArchive_FormulaPredicateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaPredicateArchive_FormulaPredicateType_descriptor_;
}
bool FormulaPredicateArchive_FormulaPredicateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::PredNone;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextStartsWith;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextEndsWith;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextContains;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextDoesNotContain;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueEqual;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueNotEqual;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueGreaterThan;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueGreaterThanOrEqual;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueLessThan;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueLessThanOrEqual;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueAboveAverage;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueBelowAverage;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueBetween;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::Formula;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::Duplicates;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::Uniques;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsToday;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsYesterday;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsTomorrow;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsTheDate;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateBeforeTheDate;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateAfterTheDate;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsInTheRange;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateInTheNext;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateInTheLast;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsExactly;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateBeforeRelative;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateAfterRelative;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateBetweenRelative;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueTop;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueBottom;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueNotBetween;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateInThis;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::IsBlank;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::IsNotBlank;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextIs;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextIsNot;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationEqual;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationNotEqual;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationGreaterThan;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationGreaterThanOrEqual;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationLessThan;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationLessThanOrEqual;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationBetween;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationNotBetween;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationAboveAverage;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationBelowAverage;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationTop;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationBottom;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::FormulaPredicateType_MIN;
const FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::FormulaPredicateType_MAX;
const int FormulaPredicateArchive::FormulaPredicateType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FormulaPredicateArchive_QualifierType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaPredicateArchive_QualifierType_descriptor_;
}
bool FormulaPredicateArchive_QualifierType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::QualNone;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Days;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Weeks;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Months;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Years;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Ago;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::FromNow;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Quarters;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Percent;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Values;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::QualifierType_MIN;
const FormulaPredicateArchive_QualifierType FormulaPredicateArchive::QualifierType_MAX;
const int FormulaPredicateArchive::QualifierType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FormulaPredicateArchive::kFormulaFieldNumber;
const int FormulaPredicateArchive::kPredicateTypeFieldNumber;
const int FormulaPredicateArchive::kQualifier1FieldNumber;
const int FormulaPredicateArchive::kQualifier2FieldNumber;
const int FormulaPredicateArchive::kParamIndex1FieldNumber;
const int FormulaPredicateArchive::kParamIndex2FieldNumber;
const int FormulaPredicateArchive::kParamIndex0FieldNumber;
#endif  // !_MSC_VER

FormulaPredicateArchive::FormulaPredicateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaPredicateArchive::InitAsDefaultInstance() {
  formula_ = const_cast< ::TSCE::FormulaArchive*>(&::TSCE::FormulaArchive::default_instance());
}

FormulaPredicateArchive::FormulaPredicateArchive(const FormulaPredicateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaPredicateArchive::SharedCtor() {
  _cached_size_ = 0;
  formula_ = NULL;
  predicate_type_ = 0;
  qualifier1_ = 0;
  qualifier2_ = 0;
  param_index1_ = 0;
  param_index2_ = 0;
  param_index0_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaPredicateArchive::~FormulaPredicateArchive() {
  SharedDtor();
}

void FormulaPredicateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete formula_;
  }
}

void FormulaPredicateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaPredicateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaPredicateArchive_descriptor_;
}

const FormulaPredicateArchive& FormulaPredicateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

FormulaPredicateArchive* FormulaPredicateArchive::default_instance_ = NULL;

FormulaPredicateArchive* FormulaPredicateArchive::New() const {
  return new FormulaPredicateArchive;
}

void FormulaPredicateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_formula()) {
      if (formula_ != NULL) formula_->::TSCE::FormulaArchive::Clear();
    }
    predicate_type_ = 0;
    qualifier1_ = 0;
    qualifier2_ = 0;
    param_index1_ = 0;
    param_index2_ = 0;
    param_index0_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaPredicateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.FormulaArchive formula = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_predicate_type;
        break;
      }
      
      // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_predicate_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::FormulaPredicateArchive_FormulaPredicateType_IsValid(value)) {
            set_predicate_type(static_cast< ::TST::FormulaPredicateArchive_FormulaPredicateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_qualifier1;
        break;
      }
      
      // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qualifier1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::FormulaPredicateArchive_QualifierType_IsValid(value)) {
            set_qualifier1(static_cast< ::TST::FormulaPredicateArchive_QualifierType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_qualifier2;
        break;
      }
      
      // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qualifier2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::FormulaPredicateArchive_QualifierType_IsValid(value)) {
            set_qualifier2(static_cast< ::TST::FormulaPredicateArchive_QualifierType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param_index1;
        break;
      }
      
      // required int32 param_index1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_index1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_index1_)));
          set_has_param_index1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param_index2;
        break;
      }
      
      // required int32 param_index2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_index2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_index2_)));
          set_has_param_index2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_param_index0;
        break;
      }
      
      // required int32 param_index0 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_index0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_index0_)));
          set_has_param_index0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaPredicateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.FormulaArchive formula = 1;
  if (has_formula()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formula(), output);
  }
  
  // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
  if (has_predicate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->predicate_type(), output);
  }
  
  // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
  if (has_qualifier1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->qualifier1(), output);
  }
  
  // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
  if (has_qualifier2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->qualifier2(), output);
  }
  
  // required int32 param_index1 = 5;
  if (has_param_index1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param_index1(), output);
  }
  
  // required int32 param_index2 = 6;
  if (has_param_index2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param_index2(), output);
  }
  
  // required int32 param_index0 = 7;
  if (has_param_index0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->param_index0(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaPredicateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.FormulaArchive formula = 1;
  if (has_formula()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formula(), target);
  }
  
  // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
  if (has_predicate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->predicate_type(), target);
  }
  
  // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
  if (has_qualifier1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->qualifier1(), target);
  }
  
  // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
  if (has_qualifier2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->qualifier2(), target);
  }
  
  // required int32 param_index1 = 5;
  if (has_param_index1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param_index1(), target);
  }
  
  // required int32 param_index2 = 6;
  if (has_param_index2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->param_index2(), target);
  }
  
  // required int32 param_index0 = 7;
  if (has_param_index0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->param_index0(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaPredicateArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.FormulaArchive formula = 1;
    if (has_formula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula());
    }
    
    // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
    if (has_predicate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->predicate_type());
    }
    
    // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
    if (has_qualifier1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qualifier1());
    }
    
    // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
    if (has_qualifier2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qualifier2());
    }
    
    // required int32 param_index1 = 5;
    if (has_param_index1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_index1());
    }
    
    // required int32 param_index2 = 6;
    if (has_param_index2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_index2());
    }
    
    // required int32 param_index0 = 7;
    if (has_param_index0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_index0());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaPredicateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaPredicateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaPredicateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaPredicateArchive::MergeFrom(const FormulaPredicateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formula()) {
      mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from.formula());
    }
    if (from.has_predicate_type()) {
      set_predicate_type(from.predicate_type());
    }
    if (from.has_qualifier1()) {
      set_qualifier1(from.qualifier1());
    }
    if (from.has_qualifier2()) {
      set_qualifier2(from.qualifier2());
    }
    if (from.has_param_index1()) {
      set_param_index1(from.param_index1());
    }
    if (from.has_param_index2()) {
      set_param_index2(from.param_index2());
    }
    if (from.has_param_index0()) {
      set_param_index0(from.param_index0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaPredicateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaPredicateArchive::CopyFrom(const FormulaPredicateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaPredicateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_formula()) {
    if (!this->formula().IsInitialized()) return false;
  }
  return true;
}

void FormulaPredicateArchive::Swap(FormulaPredicateArchive* other) {
  if (other != this) {
    std::swap(formula_, other->formula_);
    std::swap(predicate_type_, other->predicate_type_);
    std::swap(qualifier1_, other->qualifier1_);
    std::swap(qualifier2_, other->qualifier2_);
    std::swap(param_index1_, other->param_index1_);
    std::swap(param_index2_, other->param_index2_);
    std::swap(param_index0_, other->param_index0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaPredicateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaPredicateArchive_descriptor_;
  metadata.reflection = FormulaPredicateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConditionalStyleSetArchive_ConditionalStyleRule::kPredicateFieldNumber;
const int ConditionalStyleSetArchive_ConditionalStyleRule::kCellStyleFieldNumber;
const int ConditionalStyleSetArchive_ConditionalStyleRule::kTextStyleFieldNumber;
#endif  // !_MSC_VER

ConditionalStyleSetArchive_ConditionalStyleRule::ConditionalStyleSetArchive_ConditionalStyleRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConditionalStyleSetArchive_ConditionalStyleRule::InitAsDefaultInstance() {
  predicate_ = const_cast< ::TST::FormulaPredicateArchive*>(&::TST::FormulaPredicateArchive::default_instance());
  cell_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ConditionalStyleSetArchive_ConditionalStyleRule::ConditionalStyleSetArchive_ConditionalStyleRule(const ConditionalStyleSetArchive_ConditionalStyleRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConditionalStyleSetArchive_ConditionalStyleRule::SharedCtor() {
  _cached_size_ = 0;
  predicate_ = NULL;
  cell_style_ = NULL;
  text_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionalStyleSetArchive_ConditionalStyleRule::~ConditionalStyleSetArchive_ConditionalStyleRule() {
  SharedDtor();
}

void ConditionalStyleSetArchive_ConditionalStyleRule::SharedDtor() {
  if (this != default_instance_) {
    delete predicate_;
    delete cell_style_;
    delete text_style_;
  }
}

void ConditionalStyleSetArchive_ConditionalStyleRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionalStyleSetArchive_ConditionalStyleRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionalStyleSetArchive_ConditionalStyleRule_descriptor_;
}

const ConditionalStyleSetArchive_ConditionalStyleRule& ConditionalStyleSetArchive_ConditionalStyleRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

ConditionalStyleSetArchive_ConditionalStyleRule* ConditionalStyleSetArchive_ConditionalStyleRule::default_instance_ = NULL;

ConditionalStyleSetArchive_ConditionalStyleRule* ConditionalStyleSetArchive_ConditionalStyleRule::New() const {
  return new ConditionalStyleSetArchive_ConditionalStyleRule;
}

void ConditionalStyleSetArchive_ConditionalStyleRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_predicate()) {
      if (predicate_ != NULL) predicate_->::TST::FormulaPredicateArchive::Clear();
    }
    if (has_cell_style()) {
      if (cell_style_ != NULL) cell_style_->::TSP::Reference::Clear();
    }
    if (has_text_style()) {
      if (text_style_ != NULL) text_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConditionalStyleSetArchive_ConditionalStyleRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.FormulaPredicateArchive predicate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predicate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_style;
        break;
      }
      
      // required .TSP.Reference cell_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text_style;
        break;
      }
      
      // required .TSP.Reference text_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConditionalStyleSetArchive_ConditionalStyleRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.FormulaPredicateArchive predicate = 1;
  if (has_predicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->predicate(), output);
  }
  
  // required .TSP.Reference cell_style = 2;
  if (has_cell_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell_style(), output);
  }
  
  // required .TSP.Reference text_style = 3;
  if (has_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->text_style(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConditionalStyleSetArchive_ConditionalStyleRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.FormulaPredicateArchive predicate = 1;
  if (has_predicate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->predicate(), target);
  }
  
  // required .TSP.Reference cell_style = 2;
  if (has_cell_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell_style(), target);
  }
  
  // required .TSP.Reference text_style = 3;
  if (has_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->text_style(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConditionalStyleSetArchive_ConditionalStyleRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.FormulaPredicateArchive predicate = 1;
    if (has_predicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predicate());
    }
    
    // required .TSP.Reference cell_style = 2;
    if (has_cell_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_style());
    }
    
    // required .TSP.Reference text_style = 3;
    if (has_text_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_style());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionalStyleSetArchive_ConditionalStyleRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConditionalStyleSetArchive_ConditionalStyleRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConditionalStyleSetArchive_ConditionalStyleRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionalStyleSetArchive_ConditionalStyleRule::MergeFrom(const ConditionalStyleSetArchive_ConditionalStyleRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predicate()) {
      mutable_predicate()->::TST::FormulaPredicateArchive::MergeFrom(from.predicate());
    }
    if (from.has_cell_style()) {
      mutable_cell_style()->::TSP::Reference::MergeFrom(from.cell_style());
    }
    if (from.has_text_style()) {
      mutable_text_style()->::TSP::Reference::MergeFrom(from.text_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConditionalStyleSetArchive_ConditionalStyleRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalStyleSetArchive_ConditionalStyleRule::CopyFrom(const ConditionalStyleSetArchive_ConditionalStyleRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalStyleSetArchive_ConditionalStyleRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_predicate()) {
    if (!this->predicate().IsInitialized()) return false;
  }
  if (has_cell_style()) {
    if (!this->cell_style().IsInitialized()) return false;
  }
  if (has_text_style()) {
    if (!this->text_style().IsInitialized()) return false;
  }
  return true;
}

void ConditionalStyleSetArchive_ConditionalStyleRule::Swap(ConditionalStyleSetArchive_ConditionalStyleRule* other) {
  if (other != this) {
    std::swap(predicate_, other->predicate_);
    std::swap(cell_style_, other->cell_style_);
    std::swap(text_style_, other->text_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConditionalStyleSetArchive_ConditionalStyleRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionalStyleSetArchive_ConditionalStyleRule_descriptor_;
  metadata.reflection = ConditionalStyleSetArchive_ConditionalStyleRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ConditionalStyleSetArchive::kRuleCountFieldNumber;
const int ConditionalStyleSetArchive::kRulesFieldNumber;
const int ConditionalStyleSetArchive::kCellIDFieldNumber;
#endif  // !_MSC_VER

ConditionalStyleSetArchive::ConditionalStyleSetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConditionalStyleSetArchive::InitAsDefaultInstance() {
  cellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
}

ConditionalStyleSetArchive::ConditionalStyleSetArchive(const ConditionalStyleSetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConditionalStyleSetArchive::SharedCtor() {
  _cached_size_ = 0;
  rulecount_ = 0u;
  cellid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionalStyleSetArchive::~ConditionalStyleSetArchive() {
  SharedDtor();
}

void ConditionalStyleSetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cellid_;
  }
}

void ConditionalStyleSetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionalStyleSetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionalStyleSetArchive_descriptor_;
}

const ConditionalStyleSetArchive& ConditionalStyleSetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

ConditionalStyleSetArchive* ConditionalStyleSetArchive::default_instance_ = NULL;

ConditionalStyleSetArchive* ConditionalStyleSetArchive::New() const {
  return new ConditionalStyleSetArchive;
}

void ConditionalStyleSetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rulecount_ = 0u;
    if (has_cellid()) {
      if (cellid_ != NULL) cellid_->::TST::CellID::Clear();
    }
  }
  rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConditionalStyleSetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ruleCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rulecount_)));
          set_has_rulecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rules;
        break;
      }
      
      // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rules;
        if (input->ExpectTag(26)) goto parse_cellID;
        break;
      }
      
      // optional .TST.CellID cellID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cellID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConditionalStyleSetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ruleCount = 1;
  if (has_rulecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rulecount(), output);
  }
  
  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rules(i), output);
  }
  
  // optional .TST.CellID cellID = 3;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cellid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConditionalStyleSetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ruleCount = 1;
  if (has_rulecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rulecount(), target);
  }
  
  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rules(i), target);
  }
  
  // optional .TST.CellID cellID = 3;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cellid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConditionalStyleSetArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ruleCount = 1;
    if (has_rulecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rulecount());
    }
    
    // optional .TST.CellID cellID = 3;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellid());
    }
    
  }
  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionalStyleSetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConditionalStyleSetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConditionalStyleSetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionalStyleSetArchive::MergeFrom(const ConditionalStyleSetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rulecount()) {
      set_rulecount(from.rulecount());
    }
    if (from.has_cellid()) {
      mutable_cellid()->::TST::CellID::MergeFrom(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConditionalStyleSetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalStyleSetArchive::CopyFrom(const ConditionalStyleSetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalStyleSetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  if (has_cellid()) {
    if (!this->cellid().IsInitialized()) return false;
  }
  return true;
}

void ConditionalStyleSetArchive::Swap(ConditionalStyleSetArchive* other) {
  if (other != this) {
    std::swap(rulecount_, other->rulecount_);
    rules_.Swap(&other->rules_);
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConditionalStyleSetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionalStyleSetArchive_descriptor_;
  metadata.reflection = ConditionalStyleSetArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FilterSetArchive_FilterSetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterSetArchive_FilterSetType_descriptor_;
}
bool FilterSetArchive_FilterSetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FilterSetArchive_FilterSetType FilterSetArchive::FilterSetArchiveTypeAll;
const FilterSetArchive_FilterSetType FilterSetArchive::FilterSetArchiveTypeAny;
const FilterSetArchive_FilterSetType FilterSetArchive::FilterSetType_MIN;
const FilterSetArchive_FilterSetType FilterSetArchive::FilterSetType_MAX;
const int FilterSetArchive::FilterSetType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FilterSetArchive::kTypeFieldNumber;
const int FilterSetArchive::kIsEnabledFieldNumber;
const int FilterSetArchive::kFilterRulesFieldNumber;
const int FilterSetArchive::kNeedsFormulaRewriteForImportFieldNumber;
const int FilterSetArchive::kFilterOffsetsFieldNumber;
const int FilterSetArchive::kFilterEnabledFieldNumber;
#endif  // !_MSC_VER

FilterSetArchive::FilterSetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilterSetArchive::InitAsDefaultInstance() {
}

FilterSetArchive::FilterSetArchive(const FilterSetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilterSetArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  is_enabled_ = true;
  needs_formula_rewrite_for_import_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterSetArchive::~FilterSetArchive() {
  SharedDtor();
}

void FilterSetArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FilterSetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterSetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterSetArchive_descriptor_;
}

const FilterSetArchive& FilterSetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

FilterSetArchive* FilterSetArchive::default_instance_ = NULL;

FilterSetArchive* FilterSetArchive::New() const {
  return new FilterSetArchive;
}

void FilterSetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    is_enabled_ = true;
    needs_formula_rewrite_for_import_ = false;
  }
  filter_rules_.Clear();
  filter_offsets_.Clear();
  filter_enabled_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterSetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::FilterSetArchive_FilterSetType_IsValid(value)) {
            set_type(static_cast< ::TST::FilterSetArchive_FilterSetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_enabled;
        break;
      }
      
      // optional bool is_enabled = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
          set_has_is_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filter_rules;
        break;
      }
      
      // repeated .TST.FilterRuleArchive filter_rules = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filter_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filter_rules;
        if (input->ExpectTag(32)) goto parse_needs_formula_rewrite_for_import;
        break;
      }
      
      // optional bool needs_formula_rewrite_for_import = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_formula_rewrite_for_import:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_formula_rewrite_for_import_)));
          set_has_needs_formula_rewrite_for_import();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filter_offsets;
        break;
      }
      
      // repeated uint32 filter_offsets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_filter_offsets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_filter_offsets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filter_offsets;
        if (input->ExpectTag(48)) goto parse_filter_enabled;
        break;
      }
      
      // repeated bool filter_enabled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 48, input, this->mutable_filter_enabled())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_filter_enabled())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_filter_enabled;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterSetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional bool is_enabled = 2 [default = true];
  if (has_is_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_enabled(), output);
  }
  
  // repeated .TST.FilterRuleArchive filter_rules = 3;
  for (int i = 0; i < this->filter_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filter_rules(i), output);
  }
  
  // optional bool needs_formula_rewrite_for_import = 4 [default = false];
  if (has_needs_formula_rewrite_for_import()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->needs_formula_rewrite_for_import(), output);
  }
  
  // repeated uint32 filter_offsets = 5;
  for (int i = 0; i < this->filter_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->filter_offsets(i), output);
  }
  
  // repeated bool filter_enabled = 6;
  for (int i = 0; i < this->filter_enabled_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      6, this->filter_enabled(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilterSetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional bool is_enabled = 2 [default = true];
  if (has_is_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_enabled(), target);
  }
  
  // repeated .TST.FilterRuleArchive filter_rules = 3;
  for (int i = 0; i < this->filter_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->filter_rules(i), target);
  }
  
  // optional bool needs_formula_rewrite_for_import = 4 [default = false];
  if (has_needs_formula_rewrite_for_import()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->needs_formula_rewrite_for_import(), target);
  }
  
  // repeated uint32 filter_offsets = 5;
  for (int i = 0; i < this->filter_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->filter_offsets(i), target);
  }
  
  // repeated bool filter_enabled = 6;
  for (int i = 0; i < this->filter_enabled_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(6, this->filter_enabled(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilterSetArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bool is_enabled = 2 [default = true];
    if (has_is_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool needs_formula_rewrite_for_import = 4 [default = false];
    if (has_needs_formula_rewrite_for_import()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .TST.FilterRuleArchive filter_rules = 3;
  total_size += 1 * this->filter_rules_size();
  for (int i = 0; i < this->filter_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filter_rules(i));
  }
  
  // repeated uint32 filter_offsets = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->filter_offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->filter_offsets(i));
    }
    total_size += 1 * this->filter_offsets_size() + data_size;
  }
  
  // repeated bool filter_enabled = 6;
  {
    int data_size = 0;
    data_size = 1 * this->filter_enabled_size();
    total_size += 1 * this->filter_enabled_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterSetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterSetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterSetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterSetArchive::MergeFrom(const FilterSetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  filter_rules_.MergeFrom(from.filter_rules_);
  filter_offsets_.MergeFrom(from.filter_offsets_);
  filter_enabled_.MergeFrom(from.filter_enabled_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_enabled()) {
      set_is_enabled(from.is_enabled());
    }
    if (from.has_needs_formula_rewrite_for_import()) {
      set_needs_formula_rewrite_for_import(from.needs_formula_rewrite_for_import());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterSetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterSetArchive::CopyFrom(const FilterSetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterSetArchive::IsInitialized() const {
  
  for (int i = 0; i < filter_rules_size(); i++) {
    if (!this->filter_rules(i).IsInitialized()) return false;
  }
  return true;
}

void FilterSetArchive::Swap(FilterSetArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(is_enabled_, other->is_enabled_);
    filter_rules_.Swap(&other->filter_rules_);
    std::swap(needs_formula_rewrite_for_import_, other->needs_formula_rewrite_for_import_);
    filter_offsets_.Swap(&other->filter_offsets_);
    filter_enabled_.Swap(&other->filter_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterSetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterSetArchive_descriptor_;
  metadata.reflection = FilterSetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TokenAttachmentArchive::kSuperFieldNumber;
const int TokenAttachmentArchive::kExpressionNodeFieldNumber;
#endif  // !_MSC_VER

TokenAttachmentArchive::TokenAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenAttachmentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::UIGraphicalAttachment*>(&::TSWP::UIGraphicalAttachment::default_instance());
  expressionnode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TokenAttachmentArchive::TokenAttachmentArchive(const TokenAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  expressionnode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenAttachmentArchive::~TokenAttachmentArchive() {
  SharedDtor();
}

void TokenAttachmentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete expressionnode_;
  }
}

void TokenAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenAttachmentArchive_descriptor_;
}

const TokenAttachmentArchive& TokenAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

TokenAttachmentArchive* TokenAttachmentArchive::default_instance_ = NULL;

TokenAttachmentArchive* TokenAttachmentArchive::New() const {
  return new TokenAttachmentArchive;
}

void TokenAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::UIGraphicalAttachment::Clear();
    }
    if (has_expressionnode()) {
      if (expressionnode_ != NULL) expressionnode_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.UIGraphicalAttachment super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expressionNode;
        break;
      }
      
      // optional .TSP.Reference expressionNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expressionNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expressionnode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.UIGraphicalAttachment super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // optional .TSP.Reference expressionNode = 2;
  if (has_expressionnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->expressionnode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.UIGraphicalAttachment super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // optional .TSP.Reference expressionNode = 2;
  if (has_expressionnode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->expressionnode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenAttachmentArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.UIGraphicalAttachment super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // optional .TSP.Reference expressionNode = 2;
    if (has_expressionnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expressionnode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenAttachmentArchive::MergeFrom(const TokenAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::UIGraphicalAttachment::MergeFrom(from.super());
    }
    if (from.has_expressionnode()) {
      mutable_expressionnode()->::TSP::Reference::MergeFrom(from.expressionnode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenAttachmentArchive::CopyFrom(const TokenAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenAttachmentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_expressionnode()) {
    if (!this->expressionnode().IsInitialized()) return false;
  }
  return true;
}

void TokenAttachmentArchive::Swap(TokenAttachmentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(expressionnode_, other->expressionnode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenAttachmentArchive_descriptor_;
  metadata.reflection = TokenAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormulaArchive::kExpressionTreeFieldNumber;
#endif  // !_MSC_VER

FormulaArchive::FormulaArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaArchive::InitAsDefaultInstance() {
  expressiontree_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

FormulaArchive::FormulaArchive(const FormulaArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaArchive::SharedCtor() {
  _cached_size_ = 0;
  expressiontree_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaArchive::~FormulaArchive() {
  SharedDtor();
}

void FormulaArchive::SharedDtor() {
  if (this != default_instance_) {
    delete expressiontree_;
  }
}

void FormulaArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaArchive_descriptor_;
}

const FormulaArchive& FormulaArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

FormulaArchive* FormulaArchive::default_instance_ = NULL;

FormulaArchive* FormulaArchive::New() const {
  return new FormulaArchive;
}

void FormulaArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_expressiontree()) {
      if (expressiontree_ != NULL) expressiontree_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference expressionTree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expressiontree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference expressionTree = 1;
  if (has_expressiontree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expressiontree(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference expressionTree = 1;
  if (has_expressiontree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expressiontree(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference expressionTree = 1;
    if (has_expressiontree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expressiontree());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaArchive::MergeFrom(const FormulaArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expressiontree()) {
      mutable_expressiontree()->::TSP::Reference::MergeFrom(from.expressiontree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaArchive::CopyFrom(const FormulaArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaArchive::IsInitialized() const {
  
  if (has_expressiontree()) {
    if (!this->expressiontree().IsInitialized()) return false;
  }
  return true;
}

void FormulaArchive::Swap(FormulaArchive* other) {
  if (other != this) {
    std::swap(expressiontree_, other->expressiontree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaArchive_descriptor_;
  metadata.reflection = FormulaArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressionNodeArchive::kChildrenFieldNumber;
const int ExpressionNodeArchive::kFirstIndexFieldNumber;
const int ExpressionNodeArchive::kLastIndexFieldNumber;
#endif  // !_MSC_VER

ExpressionNodeArchive::ExpressionNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressionNodeArchive::InitAsDefaultInstance() {
}

ExpressionNodeArchive::ExpressionNodeArchive(const ExpressionNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressionNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  first_index_ = GOOGLE_ULONGLONG(0);
  last_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressionNodeArchive::~ExpressionNodeArchive() {
  SharedDtor();
}

void ExpressionNodeArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressionNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressionNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressionNodeArchive_descriptor_;
}

const ExpressionNodeArchive& ExpressionNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

ExpressionNodeArchive* ExpressionNodeArchive::default_instance_ = NULL;

ExpressionNodeArchive* ExpressionNodeArchive::New() const {
  return new ExpressionNodeArchive;
}

void ExpressionNodeArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    first_index_ = GOOGLE_ULONGLONG(0);
    last_index_ = GOOGLE_ULONGLONG(0);
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressionNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference children = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_children;
        if (input->ExpectTag(16)) goto parse_first_index;
        break;
      }
      
      // optional uint64 first_index = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_index_)));
          set_has_first_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_index;
        break;
      }
      
      // optional uint64 last_index = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_index_)));
          set_has_last_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressionNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference children = 1;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->children(i), output);
  }
  
  // optional uint64 first_index = 2 [default = 0];
  if (has_first_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->first_index(), output);
  }
  
  // optional uint64 last_index = 3 [default = 0];
  if (has_last_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressionNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference children = 1;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->children(i), target);
  }
  
  // optional uint64 first_index = 2 [default = 0];
  if (has_first_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->first_index(), target);
  }
  
  // optional uint64 last_index = 3 [default = 0];
  if (has_last_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressionNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 first_index = 2 [default = 0];
    if (has_first_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_index());
    }
    
    // optional uint64 last_index = 3 [default = 0];
    if (has_last_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_index());
    }
    
  }
  // repeated .TSP.Reference children = 1;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressionNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressionNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressionNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressionNodeArchive::MergeFrom(const ExpressionNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_first_index()) {
      set_first_index(from.first_index());
    }
    if (from.has_last_index()) {
      set_last_index(from.last_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressionNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionNodeArchive::CopyFrom(const ExpressionNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionNodeArchive::IsInitialized() const {
  
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void ExpressionNodeArchive::Swap(ExpressionNodeArchive* other) {
  if (other != this) {
    children_.Swap(&other->children_);
    std::swap(first_index_, other->first_index_);
    std::swap(last_index_, other->last_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressionNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressionNodeArchive_descriptor_;
  metadata.reflection = ExpressionNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BooleanNodeArchive::kSuperFieldNumber;
const int BooleanNodeArchive::kValueFieldNumber;
#endif  // !_MSC_VER

BooleanNodeArchive::BooleanNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BooleanNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

BooleanNodeArchive::BooleanNodeArchive(const BooleanNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BooleanNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BooleanNodeArchive::~BooleanNodeArchive() {
  SharedDtor();
}

void BooleanNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void BooleanNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BooleanNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BooleanNodeArchive_descriptor_;
}

const BooleanNodeArchive& BooleanNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

BooleanNodeArchive* BooleanNodeArchive::default_instance_ = NULL;

BooleanNodeArchive* BooleanNodeArchive::New() const {
  return new BooleanNodeArchive;
}

void BooleanNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BooleanNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BooleanNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required bool value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BooleanNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required bool value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BooleanNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BooleanNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BooleanNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BooleanNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BooleanNodeArchive::MergeFrom(const BooleanNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BooleanNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanNodeArchive::CopyFrom(const BooleanNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void BooleanNodeArchive::Swap(BooleanNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BooleanNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BooleanNodeArchive_descriptor_;
  metadata.reflection = BooleanNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NumberNodeArchive::kSuperFieldNumber;
const int NumberNodeArchive::kNumberFieldNumber;
#endif  // !_MSC_VER

NumberNodeArchive::NumberNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumberNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

NumberNodeArchive::NumberNodeArchive(const NumberNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumberNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumberNodeArchive::~NumberNodeArchive() {
  SharedDtor();
}

void NumberNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void NumberNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumberNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberNodeArchive_descriptor_;
}

const NumberNodeArchive& NumberNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

NumberNodeArchive* NumberNodeArchive::default_instance_ = NULL;

NumberNodeArchive* NumberNodeArchive::New() const {
  return new NumberNodeArchive;
}

void NumberNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumberNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_number;
        break;
      }
      
      // required double number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumberNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required double number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumberNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required double number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumberNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required double number = 2;
    if (has_number()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumberNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumberNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumberNodeArchive::MergeFrom(const NumberNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumberNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberNodeArchive::CopyFrom(const NumberNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void NumberNodeArchive::Swap(NumberNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumberNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumberNodeArchive_descriptor_;
  metadata.reflection = NumberNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringNodeArchive::kSuperFieldNumber;
const int StringNodeArchive::kValueFieldNumber;
#endif  // !_MSC_VER

StringNodeArchive::StringNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

StringNodeArchive::StringNodeArchive(const StringNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringNodeArchive::~StringNodeArchive() {
  SharedDtor();
}

void StringNodeArchive::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void StringNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringNodeArchive_descriptor_;
}

const StringNodeArchive& StringNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

StringNodeArchive* StringNodeArchive::default_instance_ = NULL;

StringNodeArchive* StringNodeArchive::New() const {
  return new StringNodeArchive;
}

void StringNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringNodeArchive::MergeFrom(const StringNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringNodeArchive::CopyFrom(const StringNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void StringNodeArchive::Swap(StringNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringNodeArchive_descriptor_;
  metadata.reflection = StringNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IdentifierNodeArchive::kSuperFieldNumber;
const int IdentifierNodeArchive::kIdentifierFieldNumber;
#endif  // !_MSC_VER

IdentifierNodeArchive::IdentifierNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IdentifierNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

IdentifierNodeArchive::IdentifierNodeArchive(const IdentifierNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IdentifierNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdentifierNodeArchive::~IdentifierNodeArchive() {
  SharedDtor();
}

void IdentifierNodeArchive::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void IdentifierNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdentifierNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdentifierNodeArchive_descriptor_;
}

const IdentifierNodeArchive& IdentifierNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

IdentifierNodeArchive* IdentifierNodeArchive::default_instance_ = NULL;

IdentifierNodeArchive* IdentifierNodeArchive::New() const {
  return new IdentifierNodeArchive;
}

void IdentifierNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdentifierNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }
      
      // optional string identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IdentifierNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // optional string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->identifier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IdentifierNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // optional string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->identifier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdentifierNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // optional string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdentifierNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdentifierNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdentifierNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdentifierNodeArchive::MergeFrom(const IdentifierNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdentifierNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentifierNodeArchive::CopyFrom(const IdentifierNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifierNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void IdentifierNodeArchive::Swap(IdentifierNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdentifierNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdentifierNodeArchive_descriptor_;
  metadata.reflection = IdentifierNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayNodeArchive::kSuperFieldNumber;
const int ArrayNodeArchive::kColumnsFieldNumber;
const int ArrayNodeArchive::kRowsFieldNumber;
#endif  // !_MSC_VER

ArrayNodeArchive::ArrayNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArrayNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

ArrayNodeArchive::ArrayNodeArchive(const ArrayNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArrayNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  columns_ = 0u;
  rows_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayNodeArchive::~ArrayNodeArchive() {
  SharedDtor();
}

void ArrayNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ArrayNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayNodeArchive_descriptor_;
}

const ArrayNodeArchive& ArrayNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

ArrayNodeArchive* ArrayNodeArchive::default_instance_ = NULL;

ArrayNodeArchive* ArrayNodeArchive::New() const {
  return new ArrayNodeArchive;
}

void ArrayNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    columns_ = 0u;
    rows_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_columns;
        break;
      }
      
      // optional uint32 columns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &columns_)));
          set_has_columns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rows;
        break;
      }
      
      // optional uint32 rows = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArrayNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // optional uint32 columns = 2;
  if (has_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->columns(), output);
  }
  
  // optional uint32 rows = 3;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rows(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArrayNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // optional uint32 columns = 2;
  if (has_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->columns(), target);
  }
  
  // optional uint32 rows = 3;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rows(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArrayNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // optional uint32 columns = 2;
    if (has_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->columns());
    }
    
    // optional uint32 rows = 3;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayNodeArchive::MergeFrom(const ArrayNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_columns()) {
      set_columns(from.columns());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayNodeArchive::CopyFrom(const ArrayNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ArrayNodeArchive::Swap(ArrayNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(columns_, other->columns_);
    std::swap(rows_, other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayNodeArchive_descriptor_;
  metadata.reflection = ArrayNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListNodeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ListNodeArchive::ListNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

ListNodeArchive::ListNodeArchive(const ListNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListNodeArchive::~ListNodeArchive() {
  SharedDtor();
}

void ListNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ListNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListNodeArchive_descriptor_;
}

const ListNodeArchive& ListNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

ListNodeArchive* ListNodeArchive::default_instance_ = NULL;

ListNodeArchive* ListNodeArchive::New() const {
  return new ListNodeArchive;
}

void ListNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListNodeArchive::MergeFrom(const ListNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNodeArchive::CopyFrom(const ListNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ListNodeArchive::Swap(ListNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListNodeArchive_descriptor_;
  metadata.reflection = ListNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperatorNodeArchive::kSuperFieldNumber;
const int OperatorNodeArchive::kOperatorCharFieldNumber;
#endif  // !_MSC_VER

OperatorNodeArchive::OperatorNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperatorNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

OperatorNodeArchive::OperatorNodeArchive(const OperatorNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperatorNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  operatorchar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperatorNodeArchive::~OperatorNodeArchive() {
  SharedDtor();
}

void OperatorNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void OperatorNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperatorNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperatorNodeArchive_descriptor_;
}

const OperatorNodeArchive& OperatorNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

OperatorNodeArchive* OperatorNodeArchive::default_instance_ = NULL;

OperatorNodeArchive* OperatorNodeArchive::New() const {
  return new OperatorNodeArchive;
}

void OperatorNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    operatorchar_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperatorNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operatorChar;
        break;
      }
      
      // required uint32 operatorChar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operatorChar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatorchar_)));
          set_has_operatorchar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperatorNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required uint32 operatorChar = 2;
  if (has_operatorchar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operatorchar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperatorNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required uint32 operatorChar = 2;
  if (has_operatorchar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operatorchar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperatorNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required uint32 operatorChar = 2;
    if (has_operatorchar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatorchar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatorNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperatorNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperatorNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperatorNodeArchive::MergeFrom(const OperatorNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_operatorchar()) {
      set_operatorchar(from.operatorchar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperatorNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatorNodeArchive::CopyFrom(const OperatorNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void OperatorNodeArchive::Swap(OperatorNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(operatorchar_, other->operatorchar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperatorNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperatorNodeArchive_descriptor_;
  metadata.reflection = OperatorNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostfixOperatorNodeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

PostfixOperatorNodeArchive::PostfixOperatorNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostfixOperatorNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::OperatorNodeArchive*>(&::TST::OperatorNodeArchive::default_instance());
}

PostfixOperatorNodeArchive::PostfixOperatorNodeArchive(const PostfixOperatorNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostfixOperatorNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostfixOperatorNodeArchive::~PostfixOperatorNodeArchive() {
  SharedDtor();
}

void PostfixOperatorNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void PostfixOperatorNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostfixOperatorNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostfixOperatorNodeArchive_descriptor_;
}

const PostfixOperatorNodeArchive& PostfixOperatorNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

PostfixOperatorNodeArchive* PostfixOperatorNodeArchive::default_instance_ = NULL;

PostfixOperatorNodeArchive* PostfixOperatorNodeArchive::New() const {
  return new PostfixOperatorNodeArchive;
}

void PostfixOperatorNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::OperatorNodeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostfixOperatorNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.OperatorNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostfixOperatorNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.OperatorNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostfixOperatorNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.OperatorNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostfixOperatorNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.OperatorNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostfixOperatorNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostfixOperatorNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostfixOperatorNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostfixOperatorNodeArchive::MergeFrom(const PostfixOperatorNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::OperatorNodeArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostfixOperatorNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostfixOperatorNodeArchive::CopyFrom(const PostfixOperatorNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostfixOperatorNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void PostfixOperatorNodeArchive::Swap(PostfixOperatorNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostfixOperatorNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostfixOperatorNodeArchive_descriptor_;
  metadata.reflection = PostfixOperatorNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrefixOperatorNodeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

PrefixOperatorNodeArchive::PrefixOperatorNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrefixOperatorNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::OperatorNodeArchive*>(&::TST::OperatorNodeArchive::default_instance());
}

PrefixOperatorNodeArchive::PrefixOperatorNodeArchive(const PrefixOperatorNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrefixOperatorNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrefixOperatorNodeArchive::~PrefixOperatorNodeArchive() {
  SharedDtor();
}

void PrefixOperatorNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void PrefixOperatorNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrefixOperatorNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrefixOperatorNodeArchive_descriptor_;
}

const PrefixOperatorNodeArchive& PrefixOperatorNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

PrefixOperatorNodeArchive* PrefixOperatorNodeArchive::default_instance_ = NULL;

PrefixOperatorNodeArchive* PrefixOperatorNodeArchive::New() const {
  return new PrefixOperatorNodeArchive;
}

void PrefixOperatorNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::OperatorNodeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrefixOperatorNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.OperatorNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrefixOperatorNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.OperatorNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrefixOperatorNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.OperatorNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrefixOperatorNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.OperatorNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrefixOperatorNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrefixOperatorNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrefixOperatorNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrefixOperatorNodeArchive::MergeFrom(const PrefixOperatorNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::OperatorNodeArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrefixOperatorNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefixOperatorNodeArchive::CopyFrom(const PrefixOperatorNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefixOperatorNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void PrefixOperatorNodeArchive::Swap(PrefixOperatorNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrefixOperatorNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrefixOperatorNodeArchive_descriptor_;
  metadata.reflection = PrefixOperatorNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionNodeArchive::kSuperFieldNumber;
const int FunctionNodeArchive::kFunctionIndexFieldNumber;
const int FunctionNodeArchive::kInvalidFunctionNameFieldNumber;
#endif  // !_MSC_VER

FunctionNodeArchive::FunctionNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

FunctionNodeArchive::FunctionNodeArchive(const FunctionNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  functionindex_ = 0u;
  invalidfunctionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionNodeArchive::~FunctionNodeArchive() {
  SharedDtor();
}

void FunctionNodeArchive::SharedDtor() {
  if (invalidfunctionname_ != &::google::protobuf::internal::kEmptyString) {
    delete invalidfunctionname_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void FunctionNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionNodeArchive_descriptor_;
}

const FunctionNodeArchive& FunctionNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

FunctionNodeArchive* FunctionNodeArchive::default_instance_ = NULL;

FunctionNodeArchive* FunctionNodeArchive::New() const {
  return new FunctionNodeArchive;
}

void FunctionNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    functionindex_ = 0u;
    if (has_invalidfunctionname()) {
      if (invalidfunctionname_ != &::google::protobuf::internal::kEmptyString) {
        invalidfunctionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_functionIndex;
        break;
      }
      
      // required uint32 functionIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &functionindex_)));
          set_has_functionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invalidFunctionName;
        break;
      }
      
      // optional string invalidFunctionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invalidFunctionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invalidfunctionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invalidfunctionname().data(), this->invalidfunctionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required uint32 functionIndex = 2;
  if (has_functionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->functionindex(), output);
  }
  
  // optional string invalidFunctionName = 3;
  if (has_invalidfunctionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invalidfunctionname().data(), this->invalidfunctionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->invalidfunctionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required uint32 functionIndex = 2;
  if (has_functionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->functionindex(), target);
  }
  
  // optional string invalidFunctionName = 3;
  if (has_invalidfunctionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invalidfunctionname().data(), this->invalidfunctionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->invalidfunctionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required uint32 functionIndex = 2;
    if (has_functionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->functionindex());
    }
    
    // optional string invalidFunctionName = 3;
    if (has_invalidfunctionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invalidfunctionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionNodeArchive::MergeFrom(const FunctionNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_functionindex()) {
      set_functionindex(from.functionindex());
    }
    if (from.has_invalidfunctionname()) {
      set_invalidfunctionname(from.invalidfunctionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionNodeArchive::CopyFrom(const FunctionNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void FunctionNodeArchive::Swap(FunctionNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(functionindex_, other->functionindex_);
    std::swap(invalidfunctionname_, other->invalidfunctionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionNodeArchive_descriptor_;
  metadata.reflection = FunctionNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionEndNodeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

FunctionEndNodeArchive::FunctionEndNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionEndNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

FunctionEndNodeArchive::FunctionEndNodeArchive(const FunctionEndNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionEndNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionEndNodeArchive::~FunctionEndNodeArchive() {
  SharedDtor();
}

void FunctionEndNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void FunctionEndNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionEndNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionEndNodeArchive_descriptor_;
}

const FunctionEndNodeArchive& FunctionEndNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

FunctionEndNodeArchive* FunctionEndNodeArchive::default_instance_ = NULL;

FunctionEndNodeArchive* FunctionEndNodeArchive::New() const {
  return new FunctionEndNodeArchive;
}

void FunctionEndNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionEndNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionEndNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionEndNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionEndNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionEndNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionEndNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionEndNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionEndNodeArchive::MergeFrom(const FunctionEndNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionEndNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionEndNodeArchive::CopyFrom(const FunctionEndNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionEndNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void FunctionEndNodeArchive::Swap(FunctionEndNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionEndNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionEndNodeArchive_descriptor_;
  metadata.reflection = FunctionEndNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DateNodeArchive::kSuperFieldNumber;
const int DateNodeArchive::kValueFieldNumber;
const int DateNodeArchive::kFormatFieldNumber;
#endif  // !_MSC_VER

DateNodeArchive::DateNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DateNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

DateNodeArchive::DateNodeArchive(const DateNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DateNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateNodeArchive::~DateNodeArchive() {
  SharedDtor();
}

void DateNodeArchive::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void DateNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateNodeArchive_descriptor_;
}

const DateNodeArchive& DateNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

DateNodeArchive* DateNodeArchive::default_instance_ = NULL;

DateNodeArchive* DateNodeArchive::New() const {
  return new DateNodeArchive;
}

void DateNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DateNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_format;
        break;
      }
      
      // optional string format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DateNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->format(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DateNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->format(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DateNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional string format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DateNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DateNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DateNodeArchive::MergeFrom(const DateNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DateNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateNodeArchive::CopyFrom(const DateNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void DateNodeArchive::Swap(DateNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(value_, other->value_);
    std::swap(format_, other->format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DateNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateNodeArchive_descriptor_;
  metadata.reflection = DateNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReferenceNodeArchive::kSuperFieldNumber;
const int ReferenceNodeArchive::kRangeReferenceFieldNumber;
const int ReferenceNodeArchive::kStickyBitsFieldNumber;
const int ReferenceNodeArchive::kHostTableIDFieldNumber;
#endif  // !_MSC_VER

ReferenceNodeArchive::ReferenceNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
  rangereference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
}

ReferenceNodeArchive::ReferenceNodeArchive(const ReferenceNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  rangereference_ = NULL;
  stickybits_ = 0u;
  hosttableid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceNodeArchive::~ReferenceNodeArchive() {
  SharedDtor();
}

void ReferenceNodeArchive::SharedDtor() {
  if (hosttableid_ != &::google::protobuf::internal::kEmptyString) {
    delete hosttableid_;
  }
  if (this != default_instance_) {
    delete super_;
    delete rangereference_;
  }
}

void ReferenceNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceNodeArchive_descriptor_;
}

const ReferenceNodeArchive& ReferenceNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

ReferenceNodeArchive* ReferenceNodeArchive::default_instance_ = NULL;

ReferenceNodeArchive* ReferenceNodeArchive::New() const {
  return new ReferenceNodeArchive;
}

void ReferenceNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    if (has_rangereference()) {
      if (rangereference_ != NULL) rangereference_->::TSCE::RangeReferenceArchive::Clear();
    }
    stickybits_ = 0u;
    if (has_hosttableid()) {
      if (hosttableid_ != &::google::protobuf::internal::kEmptyString) {
        hosttableid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rangeReference;
        break;
      }
      
      // required .TSCE.RangeReferenceArchive rangeReference = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rangeReference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rangereference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stickyBits;
        break;
      }
      
      // required uint32 stickyBits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stickyBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stickybits_)));
          set_has_stickybits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostTableID;
        break;
      }
      
      // optional string hostTableID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostTableID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hosttableid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hosttableid().data(), this->hosttableid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required .TSCE.RangeReferenceArchive rangeReference = 2;
  if (has_rangereference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rangereference(), output);
  }
  
  // required uint32 stickyBits = 3;
  if (has_stickybits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stickybits(), output);
  }
  
  // optional string hostTableID = 4;
  if (has_hosttableid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hosttableid().data(), this->hosttableid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hosttableid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required .TSCE.RangeReferenceArchive rangeReference = 2;
  if (has_rangereference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rangereference(), target);
  }
  
  // required uint32 stickyBits = 3;
  if (has_stickybits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stickybits(), target);
  }
  
  // optional string hostTableID = 4;
  if (has_hosttableid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hosttableid().data(), this->hosttableid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hosttableid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required .TSCE.RangeReferenceArchive rangeReference = 2;
    if (has_rangereference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rangereference());
    }
    
    // required uint32 stickyBits = 3;
    if (has_stickybits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stickybits());
    }
    
    // optional string hostTableID = 4;
    if (has_hosttableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hosttableid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceNodeArchive::MergeFrom(const ReferenceNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_rangereference()) {
      mutable_rangereference()->::TSCE::RangeReferenceArchive::MergeFrom(from.rangereference());
    }
    if (from.has_stickybits()) {
      set_stickybits(from.stickybits());
    }
    if (from.has_hosttableid()) {
      set_hosttableid(from.hosttableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceNodeArchive::CopyFrom(const ReferenceNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_rangereference()) {
    if (!this->rangereference().IsInitialized()) return false;
  }
  return true;
}

void ReferenceNodeArchive::Swap(ReferenceNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(rangereference_, other->rangereference_);
    std::swap(stickybits_, other->stickybits_);
    std::swap(hosttableid_, other->hosttableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceNodeArchive_descriptor_;
  metadata.reflection = ReferenceNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DurationNodeArchive::kSuperFieldNumber;
const int DurationNodeArchive::kTimeintervalFieldNumber;
const int DurationNodeArchive::kSmallestFieldNumber;
const int DurationNodeArchive::kLargestFieldNumber;
const int DurationNodeArchive::kStyleFieldNumber;
#endif  // !_MSC_VER

DurationNodeArchive::DurationNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DurationNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

DurationNodeArchive::DurationNodeArchive(const DurationNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DurationNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  timeinterval_ = 0;
  smallest_ = 0u;
  largest_ = 0u;
  style_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DurationNodeArchive::~DurationNodeArchive() {
  SharedDtor();
}

void DurationNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void DurationNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DurationNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DurationNodeArchive_descriptor_;
}

const DurationNodeArchive& DurationNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

DurationNodeArchive* DurationNodeArchive::default_instance_ = NULL;

DurationNodeArchive* DurationNodeArchive::New() const {
  return new DurationNodeArchive;
}

void DurationNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    timeinterval_ = 0;
    smallest_ = 0u;
    largest_ = 0u;
    style_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DurationNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_timeinterval;
        break;
      }
      
      // required double timeinterval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeinterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeinterval_)));
          set_has_timeinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_smallest;
        break;
      }
      
      // required uint32 smallest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smallest_)));
          set_has_smallest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_largest;
        break;
      }
      
      // required uint32 largest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_largest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &largest_)));
          set_has_largest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_style;
        break;
      }
      
      // required uint32 style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DurationNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required double timeinterval = 2;
  if (has_timeinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timeinterval(), output);
  }
  
  // required uint32 smallest = 3;
  if (has_smallest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->smallest(), output);
  }
  
  // required uint32 largest = 4;
  if (has_largest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->largest(), output);
  }
  
  // required uint32 style = 5;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->style(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DurationNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required double timeinterval = 2;
  if (has_timeinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timeinterval(), target);
  }
  
  // required uint32 smallest = 3;
  if (has_smallest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->smallest(), target);
  }
  
  // required uint32 largest = 4;
  if (has_largest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->largest(), target);
  }
  
  // required uint32 style = 5;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->style(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DurationNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required double timeinterval = 2;
    if (has_timeinterval()) {
      total_size += 1 + 8;
    }
    
    // required uint32 smallest = 3;
    if (has_smallest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->smallest());
    }
    
    // required uint32 largest = 4;
    if (has_largest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->largest());
    }
    
    // required uint32 style = 5;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DurationNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DurationNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DurationNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DurationNodeArchive::MergeFrom(const DurationNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_timeinterval()) {
      set_timeinterval(from.timeinterval());
    }
    if (from.has_smallest()) {
      set_smallest(from.smallest());
    }
    if (from.has_largest()) {
      set_largest(from.largest());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DurationNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurationNodeArchive::CopyFrom(const DurationNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void DurationNodeArchive::Swap(DurationNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(timeinterval_, other->timeinterval_);
    std::swap(smallest_, other->smallest_);
    std::swap(largest_, other->largest_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DurationNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DurationNodeArchive_descriptor_;
  metadata.reflection = DurationNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArgumentPlaceholderNodeArchive::kSuperFieldNumber;
const int ArgumentPlaceholderNodeArchive::kFunctionIndexFieldNumber;
const int ArgumentPlaceholderNodeArchive::kArgumentIndexFieldNumber;
const int ArgumentPlaceholderNodeArchive::kModeFieldNumber;
#endif  // !_MSC_VER

ArgumentPlaceholderNodeArchive::ArgumentPlaceholderNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArgumentPlaceholderNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

ArgumentPlaceholderNodeArchive::ArgumentPlaceholderNodeArchive(const ArgumentPlaceholderNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArgumentPlaceholderNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  functionindex_ = 0u;
  argumentindex_ = 0u;
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArgumentPlaceholderNodeArchive::~ArgumentPlaceholderNodeArchive() {
  SharedDtor();
}

void ArgumentPlaceholderNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ArgumentPlaceholderNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgumentPlaceholderNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArgumentPlaceholderNodeArchive_descriptor_;
}

const ArgumentPlaceholderNodeArchive& ArgumentPlaceholderNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

ArgumentPlaceholderNodeArchive* ArgumentPlaceholderNodeArchive::default_instance_ = NULL;

ArgumentPlaceholderNodeArchive* ArgumentPlaceholderNodeArchive::New() const {
  return new ArgumentPlaceholderNodeArchive;
}

void ArgumentPlaceholderNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
    functionindex_ = 0u;
    argumentindex_ = 0u;
    mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArgumentPlaceholderNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_functionIndex;
        break;
      }
      
      // required uint32 functionIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &functionindex_)));
          set_has_functionindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_argumentIndex;
        break;
      }
      
      // required uint32 argumentIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_argumentIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &argumentindex_)));
          set_has_argumentindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }
      
      // optional uint32 mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArgumentPlaceholderNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // required uint32 functionIndex = 2;
  if (has_functionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->functionindex(), output);
  }
  
  // required uint32 argumentIndex = 3;
  if (has_argumentindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->argumentindex(), output);
  }
  
  // optional uint32 mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArgumentPlaceholderNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // required uint32 functionIndex = 2;
  if (has_functionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->functionindex(), target);
  }
  
  // required uint32 argumentIndex = 3;
  if (has_argumentindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->argumentindex(), target);
  }
  
  // optional uint32 mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArgumentPlaceholderNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // required uint32 functionIndex = 2;
    if (has_functionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->functionindex());
    }
    
    // required uint32 argumentIndex = 3;
    if (has_argumentindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->argumentindex());
    }
    
    // optional uint32 mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgumentPlaceholderNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArgumentPlaceholderNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArgumentPlaceholderNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArgumentPlaceholderNodeArchive::MergeFrom(const ArgumentPlaceholderNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
    if (from.has_functionindex()) {
      set_functionindex(from.functionindex());
    }
    if (from.has_argumentindex()) {
      set_argumentindex(from.argumentindex());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArgumentPlaceholderNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgumentPlaceholderNodeArchive::CopyFrom(const ArgumentPlaceholderNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgumentPlaceholderNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ArgumentPlaceholderNodeArchive::Swap(ArgumentPlaceholderNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(functionindex_, other->functionindex_);
    std::swap(argumentindex_, other->argumentindex_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArgumentPlaceholderNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArgumentPlaceholderNodeArchive_descriptor_;
  metadata.reflection = ArgumentPlaceholderNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmptyExpressionNodeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

EmptyExpressionNodeArchive::EmptyExpressionNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyExpressionNodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::ExpressionNodeArchive*>(&::TST::ExpressionNodeArchive::default_instance());
}

EmptyExpressionNodeArchive::EmptyExpressionNodeArchive(const EmptyExpressionNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyExpressionNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyExpressionNodeArchive::~EmptyExpressionNodeArchive() {
  SharedDtor();
}

void EmptyExpressionNodeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void EmptyExpressionNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyExpressionNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyExpressionNodeArchive_descriptor_;
}

const EmptyExpressionNodeArchive& EmptyExpressionNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

EmptyExpressionNodeArchive* EmptyExpressionNodeArchive::default_instance_ = NULL;

EmptyExpressionNodeArchive* EmptyExpressionNodeArchive::New() const {
  return new EmptyExpressionNodeArchive;
}

void EmptyExpressionNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::ExpressionNodeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyExpressionNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmptyExpressionNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyExpressionNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.ExpressionNodeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyExpressionNodeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.ExpressionNodeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyExpressionNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyExpressionNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyExpressionNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyExpressionNodeArchive::MergeFrom(const EmptyExpressionNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyExpressionNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyExpressionNodeArchive::CopyFrom(const EmptyExpressionNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyExpressionNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void EmptyExpressionNodeArchive::Swap(EmptyExpressionNodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyExpressionNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyExpressionNodeArchive_descriptor_;
  metadata.reflection = EmptyExpressionNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayoutHintArchive::kIsValidFieldNumber;
const int LayoutHintArchive::kCellRangeFieldNumber;
const int LayoutHintArchive::kHintIDFieldNumber;
const int LayoutHintArchive::kMaximumSizeFieldNumber;
const int LayoutHintArchive::kPartitionPositionFieldNumber;
const int LayoutHintArchive::kHorizontalFieldNumber;
const int LayoutHintArchive::kEffectiveSizeFieldNumber;
const int LayoutHintArchive::kPartitioningPassFieldNumber;
#endif  // !_MSC_VER

LayoutHintArchive::LayoutHintArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayoutHintArchive::InitAsDefaultInstance() {
  cellrange_ = const_cast< ::TST::CellRange*>(&::TST::CellRange::default_instance());
  hintid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  maximumsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  effectivesize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

LayoutHintArchive::LayoutHintArchive(const LayoutHintArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayoutHintArchive::SharedCtor() {
  _cached_size_ = 0;
  isvalid_ = false;
  cellrange_ = NULL;
  hintid_ = NULL;
  maximumsize_ = NULL;
  partitionposition_ = 0u;
  horizontal_ = false;
  effectivesize_ = NULL;
  partitioningpass_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayoutHintArchive::~LayoutHintArchive() {
  SharedDtor();
}

void LayoutHintArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cellrange_;
    delete hintid_;
    delete maximumsize_;
    delete effectivesize_;
  }
}

void LayoutHintArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayoutHintArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayoutHintArchive_descriptor_;
}

const LayoutHintArchive& LayoutHintArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

LayoutHintArchive* LayoutHintArchive::default_instance_ = NULL;

LayoutHintArchive* LayoutHintArchive::New() const {
  return new LayoutHintArchive;
}

void LayoutHintArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isvalid_ = false;
    if (has_cellrange()) {
      if (cellrange_ != NULL) cellrange_->::TST::CellRange::Clear();
    }
    if (has_hintid()) {
      if (hintid_ != NULL) hintid_->::TST::CellID::Clear();
    }
    if (has_maximumsize()) {
      if (maximumsize_ != NULL) maximumsize_->::TSP::Size::Clear();
    }
    partitionposition_ = 0u;
    horizontal_ = false;
    if (has_effectivesize()) {
      if (effectivesize_ != NULL) effectivesize_->::TSP::Size::Clear();
    }
    partitioningpass_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayoutHintArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isValid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cellRange;
        break;
      }
      
      // required .TST.CellRange cellRange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cellRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hintID;
        break;
      }
      
      // required .TST.CellID hintID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hintID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hintid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_maximumSize;
        break;
      }
      
      // required .TSP.Size maximumSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maximumSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maximumsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_partitionPosition;
        break;
      }
      
      // required uint32 partitionPosition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partitionPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partitionposition_)));
          set_has_partitionposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_horizontal;
        break;
      }
      
      // required bool horizontal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
          set_has_horizontal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_effectiveSize;
        break;
      }
      
      // optional .TSP.Size effectiveSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effectiveSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectivesize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_partitioningPass;
        break;
      }
      
      // optional uint32 partitioningPass = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partitioningPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partitioningpass_)));
          set_has_partitioningpass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayoutHintArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isValid = 1;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isvalid(), output);
  }
  
  // required .TST.CellRange cellRange = 2;
  if (has_cellrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cellrange(), output);
  }
  
  // required .TST.CellID hintID = 3;
  if (has_hintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hintid(), output);
  }
  
  // required .TSP.Size maximumSize = 4;
  if (has_maximumsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->maximumsize(), output);
  }
  
  // required uint32 partitionPosition = 5;
  if (has_partitionposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->partitionposition(), output);
  }
  
  // required bool horizontal = 6;
  if (has_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->horizontal(), output);
  }
  
  // optional .TSP.Size effectiveSize = 7;
  if (has_effectivesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->effectivesize(), output);
  }
  
  // optional uint32 partitioningPass = 8;
  if (has_partitioningpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->partitioningpass(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayoutHintArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isValid = 1;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isvalid(), target);
  }
  
  // required .TST.CellRange cellRange = 2;
  if (has_cellrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cellrange(), target);
  }
  
  // required .TST.CellID hintID = 3;
  if (has_hintid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hintid(), target);
  }
  
  // required .TSP.Size maximumSize = 4;
  if (has_maximumsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->maximumsize(), target);
  }
  
  // required uint32 partitionPosition = 5;
  if (has_partitionposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->partitionposition(), target);
  }
  
  // required bool horizontal = 6;
  if (has_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->horizontal(), target);
  }
  
  // optional .TSP.Size effectiveSize = 7;
  if (has_effectivesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->effectivesize(), target);
  }
  
  // optional uint32 partitioningPass = 8;
  if (has_partitioningpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->partitioningpass(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayoutHintArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isValid = 1;
    if (has_isvalid()) {
      total_size += 1 + 1;
    }
    
    // required .TST.CellRange cellRange = 2;
    if (has_cellrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellrange());
    }
    
    // required .TST.CellID hintID = 3;
    if (has_hintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hintid());
    }
    
    // required .TSP.Size maximumSize = 4;
    if (has_maximumsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maximumsize());
    }
    
    // required uint32 partitionPosition = 5;
    if (has_partitionposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partitionposition());
    }
    
    // required bool horizontal = 6;
    if (has_horizontal()) {
      total_size += 1 + 1;
    }
    
    // optional .TSP.Size effectiveSize = 7;
    if (has_effectivesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectivesize());
    }
    
    // optional uint32 partitioningPass = 8;
    if (has_partitioningpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partitioningpass());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayoutHintArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayoutHintArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayoutHintArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayoutHintArchive::MergeFrom(const LayoutHintArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
    if (from.has_cellrange()) {
      mutable_cellrange()->::TST::CellRange::MergeFrom(from.cellrange());
    }
    if (from.has_hintid()) {
      mutable_hintid()->::TST::CellID::MergeFrom(from.hintid());
    }
    if (from.has_maximumsize()) {
      mutable_maximumsize()->::TSP::Size::MergeFrom(from.maximumsize());
    }
    if (from.has_partitionposition()) {
      set_partitionposition(from.partitionposition());
    }
    if (from.has_horizontal()) {
      set_horizontal(from.horizontal());
    }
    if (from.has_effectivesize()) {
      mutable_effectivesize()->::TSP::Size::MergeFrom(from.effectivesize());
    }
    if (from.has_partitioningpass()) {
      set_partitioningpass(from.partitioningpass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayoutHintArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutHintArchive::CopyFrom(const LayoutHintArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutHintArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_cellrange()) {
    if (!this->cellrange().IsInitialized()) return false;
  }
  if (has_hintid()) {
    if (!this->hintid().IsInitialized()) return false;
  }
  if (has_maximumsize()) {
    if (!this->maximumsize().IsInitialized()) return false;
  }
  if (has_effectivesize()) {
    if (!this->effectivesize().IsInitialized()) return false;
  }
  return true;
}

void LayoutHintArchive::Swap(LayoutHintArchive* other) {
  if (other != this) {
    std::swap(isvalid_, other->isvalid_);
    std::swap(cellrange_, other->cellrange_);
    std::swap(hintid_, other->hintid_);
    std::swap(maximumsize_, other->maximumsize_);
    std::swap(partitionposition_, other->partitionposition_);
    std::swap(horizontal_, other->horizontal_);
    std::swap(effectivesize_, other->effectivesize_);
    std::swap(partitioningpass_, other->partitioningpass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayoutHintArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayoutHintArchive_descriptor_;
  metadata.reflection = LayoutHintArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompletionTokenAttachmentArchive::kSuperFieldNumber;
const int CompletionTokenAttachmentArchive::kCompletionTextFieldNumber;
const int CompletionTokenAttachmentArchive::kCaretPositionFieldNumber;
const int CompletionTokenAttachmentArchive::kPrefixStartFieldNumber;
#endif  // !_MSC_VER

CompletionTokenAttachmentArchive::CompletionTokenAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompletionTokenAttachmentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TokenAttachmentArchive*>(&::TST::TokenAttachmentArchive::default_instance());
}

CompletionTokenAttachmentArchive::CompletionTokenAttachmentArchive(const CompletionTokenAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompletionTokenAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  completiontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caretposition_ = 0u;
  prefixstart_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompletionTokenAttachmentArchive::~CompletionTokenAttachmentArchive() {
  SharedDtor();
}

void CompletionTokenAttachmentArchive::SharedDtor() {
  if (completiontext_ != &::google::protobuf::internal::kEmptyString) {
    delete completiontext_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void CompletionTokenAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompletionTokenAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompletionTokenAttachmentArchive_descriptor_;
}

const CompletionTokenAttachmentArchive& CompletionTokenAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

CompletionTokenAttachmentArchive* CompletionTokenAttachmentArchive::default_instance_ = NULL;

CompletionTokenAttachmentArchive* CompletionTokenAttachmentArchive::New() const {
  return new CompletionTokenAttachmentArchive;
}

void CompletionTokenAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TokenAttachmentArchive::Clear();
    }
    if (has_completiontext()) {
      if (completiontext_ != &::google::protobuf::internal::kEmptyString) {
        completiontext_->clear();
      }
    }
    caretposition_ = 0u;
    prefixstart_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompletionTokenAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TokenAttachmentArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_completionText;
        break;
      }
      
      // optional string completionText = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_completionText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_completiontext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->completiontext().data(), this->completiontext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_caretPosition;
        break;
      }
      
      // optional uint32 caretPosition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caretPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caretposition_)));
          set_has_caretposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prefixStart;
        break;
      }
      
      // optional uint32 prefixStart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefixStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefixstart_)));
          set_has_prefixstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompletionTokenAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TokenAttachmentArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  // optional string completionText = 2;
  if (has_completiontext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->completiontext().data(), this->completiontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->completiontext(), output);
  }
  
  // optional uint32 caretPosition = 3;
  if (has_caretposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->caretposition(), output);
  }
  
  // optional uint32 prefixStart = 4;
  if (has_prefixstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prefixstart(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompletionTokenAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TokenAttachmentArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  // optional string completionText = 2;
  if (has_completiontext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->completiontext().data(), this->completiontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->completiontext(), target);
  }
  
  // optional uint32 caretPosition = 3;
  if (has_caretposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->caretposition(), target);
  }
  
  // optional uint32 prefixStart = 4;
  if (has_prefixstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prefixstart(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompletionTokenAttachmentArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TokenAttachmentArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
    // optional string completionText = 2;
    if (has_completiontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->completiontext());
    }
    
    // optional uint32 caretPosition = 3;
    if (has_caretposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caretposition());
    }
    
    // optional uint32 prefixStart = 4;
    if (has_prefixstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefixstart());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompletionTokenAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompletionTokenAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompletionTokenAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompletionTokenAttachmentArchive::MergeFrom(const CompletionTokenAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TokenAttachmentArchive::MergeFrom(from.super());
    }
    if (from.has_completiontext()) {
      set_completiontext(from.completiontext());
    }
    if (from.has_caretposition()) {
      set_caretposition(from.caretposition());
    }
    if (from.has_prefixstart()) {
      set_prefixstart(from.prefixstart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompletionTokenAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompletionTokenAttachmentArchive::CopyFrom(const CompletionTokenAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionTokenAttachmentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CompletionTokenAttachmentArchive::Swap(CompletionTokenAttachmentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(completiontext_, other->completiontext_);
    std::swap(caretposition_, other->caretposition_);
    std::swap(prefixstart_, other->prefixstart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompletionTokenAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompletionTokenAttachmentArchive_descriptor_;
  metadata.reflection = CompletionTokenAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HiddenStateFormulaOwnerArchive::kOwnerIdFieldNumber;
const int HiddenStateFormulaOwnerArchive::kThresholdValueFieldNumber;
const int HiddenStateFormulaOwnerArchive::kNeedsToUpdateFilterSetForImportFieldNumber;
#endif  // !_MSC_VER

HiddenStateFormulaOwnerArchive::HiddenStateFormulaOwnerArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HiddenStateFormulaOwnerArchive::InitAsDefaultInstance() {
  owner_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

HiddenStateFormulaOwnerArchive::HiddenStateFormulaOwnerArchive(const HiddenStateFormulaOwnerArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HiddenStateFormulaOwnerArchive::SharedCtor() {
  _cached_size_ = 0;
  owner_id_ = NULL;
  needs_to_update_filter_set_for_import_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HiddenStateFormulaOwnerArchive::~HiddenStateFormulaOwnerArchive() {
  SharedDtor();
}

void HiddenStateFormulaOwnerArchive::SharedDtor() {
  if (this != default_instance_) {
    delete owner_id_;
  }
}

void HiddenStateFormulaOwnerArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HiddenStateFormulaOwnerArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HiddenStateFormulaOwnerArchive_descriptor_;
}

const HiddenStateFormulaOwnerArchive& HiddenStateFormulaOwnerArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

HiddenStateFormulaOwnerArchive* HiddenStateFormulaOwnerArchive::default_instance_ = NULL;

HiddenStateFormulaOwnerArchive* HiddenStateFormulaOwnerArchive::New() const {
  return new HiddenStateFormulaOwnerArchive;
}

void HiddenStateFormulaOwnerArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_owner_id()) {
      if (owner_id_ != NULL) owner_id_->::TSCE::CFUUIDArchive::Clear();
    }
    needs_to_update_filter_set_for_import_ = false;
  }
  threshold_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HiddenStateFormulaOwnerArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSCE.CFUUIDArchive owner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_threshold_value;
        break;
      }
      
      // repeated .TSCE.CellValueArchive threshold_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_threshold_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_threshold_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_threshold_value;
        if (input->ExpectTag(24)) goto parse_needs_to_update_filter_set_for_import;
        break;
      }
      
      // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_to_update_filter_set_for_import:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_to_update_filter_set_for_import_)));
          set_has_needs_to_update_filter_set_for_import();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HiddenStateFormulaOwnerArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSCE.CFUUIDArchive owner_id = 1;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->owner_id(), output);
  }
  
  // repeated .TSCE.CellValueArchive threshold_value = 2;
  for (int i = 0; i < this->threshold_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->threshold_value(i), output);
  }
  
  // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
  if (has_needs_to_update_filter_set_for_import()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_to_update_filter_set_for_import(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HiddenStateFormulaOwnerArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSCE.CFUUIDArchive owner_id = 1;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->owner_id(), target);
  }
  
  // repeated .TSCE.CellValueArchive threshold_value = 2;
  for (int i = 0; i < this->threshold_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->threshold_value(i), target);
  }
  
  // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
  if (has_needs_to_update_filter_set_for_import()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needs_to_update_filter_set_for_import(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HiddenStateFormulaOwnerArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSCE.CFUUIDArchive owner_id = 1;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_id());
    }
    
    // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
    if (has_needs_to_update_filter_set_for_import()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .TSCE.CellValueArchive threshold_value = 2;
  total_size += 1 * this->threshold_value_size();
  for (int i = 0; i < this->threshold_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->threshold_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HiddenStateFormulaOwnerArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HiddenStateFormulaOwnerArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HiddenStateFormulaOwnerArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HiddenStateFormulaOwnerArchive::MergeFrom(const HiddenStateFormulaOwnerArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  threshold_value_.MergeFrom(from.threshold_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_id()) {
      mutable_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(from.owner_id());
    }
    if (from.has_needs_to_update_filter_set_for_import()) {
      set_needs_to_update_filter_set_for_import(from.needs_to_update_filter_set_for_import());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HiddenStateFormulaOwnerArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiddenStateFormulaOwnerArchive::CopyFrom(const HiddenStateFormulaOwnerArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStateFormulaOwnerArchive::IsInitialized() const {
  
  for (int i = 0; i < threshold_value_size(); i++) {
    if (!this->threshold_value(i).IsInitialized()) return false;
  }
  return true;
}

void HiddenStateFormulaOwnerArchive::Swap(HiddenStateFormulaOwnerArchive* other) {
  if (other != this) {
    std::swap(owner_id_, other->owner_id_);
    threshold_value_.Swap(&other->threshold_value_);
    std::swap(needs_to_update_filter_set_for_import_, other->needs_to_update_filter_set_for_import_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HiddenStateFormulaOwnerArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HiddenStateFormulaOwnerArchive_descriptor_;
  metadata.reflection = HiddenStateFormulaOwnerArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RichTextPayloadArchive::kStorageFieldNumber;
const int RichTextPayloadArchive::kRangeFieldNumber;
const int RichTextPayloadArchive::kCellidFieldNumber;
#endif  // !_MSC_VER

RichTextPayloadArchive::RichTextPayloadArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RichTextPayloadArchive::InitAsDefaultInstance() {
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
  cellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
}

RichTextPayloadArchive::RichTextPayloadArchive(const RichTextPayloadArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RichTextPayloadArchive::SharedCtor() {
  _cached_size_ = 0;
  storage_ = NULL;
  range_ = NULL;
  cellid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RichTextPayloadArchive::~RichTextPayloadArchive() {
  SharedDtor();
}

void RichTextPayloadArchive::SharedDtor() {
  if (this != default_instance_) {
    delete storage_;
    delete range_;
    delete cellid_;
  }
}

void RichTextPayloadArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RichTextPayloadArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RichTextPayloadArchive_descriptor_;
}

const RichTextPayloadArchive& RichTextPayloadArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

RichTextPayloadArchive* RichTextPayloadArchive::default_instance_ = NULL;

RichTextPayloadArchive* RichTextPayloadArchive::New() const {
  return new RichTextPayloadArchive;
}

void RichTextPayloadArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_range()) {
      if (range_ != NULL) range_->::TSP::Range::Clear();
    }
    if (has_cellid()) {
      if (cellid_ != NULL) cellid_->::TST::CellID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RichTextPayloadArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference storage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_range;
        break;
      }
      
      // optional .TSP.Range range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cellid;
        break;
      }
      
      // required .TST.CellID cellid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cellid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RichTextPayloadArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference storage = 1;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->storage(), output);
  }
  
  // optional .TSP.Range range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->range(), output);
  }
  
  // required .TST.CellID cellid = 3;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cellid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RichTextPayloadArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference storage = 1;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->storage(), target);
  }
  
  // optional .TSP.Range range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->range(), target);
  }
  
  // required .TST.CellID cellid = 3;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cellid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RichTextPayloadArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference storage = 1;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }
    
    // optional .TSP.Range range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }
    
    // required .TST.CellID cellid = 3;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RichTextPayloadArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RichTextPayloadArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RichTextPayloadArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RichTextPayloadArchive::MergeFrom(const RichTextPayloadArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_range()) {
      mutable_range()->::TSP::Range::MergeFrom(from.range());
    }
    if (from.has_cellid()) {
      mutable_cellid()->::TST::CellID::MergeFrom(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RichTextPayloadArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RichTextPayloadArchive::CopyFrom(const RichTextPayloadArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichTextPayloadArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  if (has_cellid()) {
    if (!this->cellid().IsInitialized()) return false;
  }
  return true;
}

void RichTextPayloadArchive::Swap(RichTextPayloadArchive* other) {
  if (other != this) {
    std::swap(storage_, other->storage_);
    std::swap(range_, other->range_);
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RichTextPayloadArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RichTextPayloadArchive_descriptor_;
  metadata.reflection = RichTextPayloadArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormulaEqualsTokenAttachmentArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

FormulaEqualsTokenAttachmentArchive::FormulaEqualsTokenAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaEqualsTokenAttachmentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::UIGraphicalAttachment*>(&::TSWP::UIGraphicalAttachment::default_instance());
}

FormulaEqualsTokenAttachmentArchive::FormulaEqualsTokenAttachmentArchive(const FormulaEqualsTokenAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaEqualsTokenAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaEqualsTokenAttachmentArchive::~FormulaEqualsTokenAttachmentArchive() {
  SharedDtor();
}

void FormulaEqualsTokenAttachmentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void FormulaEqualsTokenAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaEqualsTokenAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaEqualsTokenAttachmentArchive_descriptor_;
}

const FormulaEqualsTokenAttachmentArchive& FormulaEqualsTokenAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

FormulaEqualsTokenAttachmentArchive* FormulaEqualsTokenAttachmentArchive::default_instance_ = NULL;

FormulaEqualsTokenAttachmentArchive* FormulaEqualsTokenAttachmentArchive::New() const {
  return new FormulaEqualsTokenAttachmentArchive;
}

void FormulaEqualsTokenAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::UIGraphicalAttachment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaEqualsTokenAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.UIGraphicalAttachment super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaEqualsTokenAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.UIGraphicalAttachment super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaEqualsTokenAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.UIGraphicalAttachment super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaEqualsTokenAttachmentArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.UIGraphicalAttachment super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaEqualsTokenAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaEqualsTokenAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaEqualsTokenAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaEqualsTokenAttachmentArchive::MergeFrom(const FormulaEqualsTokenAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::UIGraphicalAttachment::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaEqualsTokenAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaEqualsTokenAttachmentArchive::CopyFrom(const FormulaEqualsTokenAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEqualsTokenAttachmentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FormulaEqualsTokenAttachmentArchive::Swap(FormulaEqualsTokenAttachmentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaEqualsTokenAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaEqualsTokenAttachmentArchive_descriptor_;
  metadata.reflection = FormulaEqualsTokenAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellRegion::kCellRangesFieldNumber;
#endif  // !_MSC_VER

CellRegion::CellRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellRegion::InitAsDefaultInstance() {
}

CellRegion::CellRegion(const CellRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellRegion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellRegion::~CellRegion() {
  SharedDtor();
}

void CellRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellRegion_descriptor_;
}

const CellRegion& CellRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTArchives_2eproto();  return *default_instance_;
}

CellRegion* CellRegion::default_instance_ = NULL;

CellRegion* CellRegion::New() const {
  return new CellRegion;
}

void CellRegion::Clear() {
  cell_ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TST.CellRange cell_ranges = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell_ranges;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TST.CellRange cell_ranges = 1;
  for (int i = 0; i < this->cell_ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_ranges(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TST.CellRange cell_ranges = 1;
  for (int i = 0; i < this->cell_ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_ranges(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellRegion::ByteSize() const {
  int total_size = 0;
  
  // repeated .TST.CellRange cell_ranges = 1;
  total_size += 1 * this->cell_ranges_size();
  for (int i = 0; i < this->cell_ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_ranges(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellRegion::MergeFrom(const CellRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_ranges_.MergeFrom(from.cell_ranges_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRegion::CopyFrom(const CellRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRegion::IsInitialized() const {
  
  for (int i = 0; i < cell_ranges_size(); i++) {
    if (!this->cell_ranges(i).IsInitialized()) return false;
  }
  return true;
}

void CellRegion::Swap(CellRegion* other) {
  if (other != this) {
    cell_ranges_.Swap(&other->cell_ranges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellRegion_descriptor_;
  metadata.reflection = CellRegion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TST

// @@protoc_insertion_point(global_scope)
