// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTStylePropertyArchiving.proto

#ifndef PROTOBUF_TSTStylePropertyArchiving_2eproto__INCLUDED
#define PROTOBUF_TSTStylePropertyArchiving_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "TSPMessages.pb.h"
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSWPArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TST {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();

class Deprecated_TableStrokeArchive;
class CellStylePropertiesArchive;
class Deprecated_StrokePresetDataArchive;
class StrokePresetDataArchive;
class StrokePresetListArchive;
class TableStylePropertiesArchive;
class TableStylePresetArchive;
class TableStrokePresetArchive;
class ThemePresetsArchive;

// ===================================================================

class Deprecated_TableStrokeArchive : public ::google::protobuf::Message {
 public:
  Deprecated_TableStrokeArchive();
  virtual ~Deprecated_TableStrokeArchive();
  
  Deprecated_TableStrokeArchive(const Deprecated_TableStrokeArchive& from);
  
  inline Deprecated_TableStrokeArchive& operator=(const Deprecated_TableStrokeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Deprecated_TableStrokeArchive& default_instance();
  
  void Swap(Deprecated_TableStrokeArchive* other);
  
  // implements Message ----------------------------------------------
  
  Deprecated_TableStrokeArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Deprecated_TableStrokeArchive& from);
  void MergeFrom(const Deprecated_TableStrokeArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .TSD.StrokeArchive stroke = 1;
  inline bool has_stroke() const;
  inline void clear_stroke();
  static const int kStrokeFieldNumber = 1;
  inline const ::TSD::StrokeArchive& stroke() const;
  inline ::TSD::StrokeArchive* mutable_stroke();
  inline ::TSD::StrokeArchive* release_stroke();
  
  // optional bool background = 2 [deprecated = true];
  inline bool has_background() const PROTOBUF_DEPRECATED;
  inline void clear_background() PROTOBUF_DEPRECATED;
  static const int kBackgroundFieldNumber = 2;
  inline bool background() const PROTOBUF_DEPRECATED;
  inline void set_background(bool value) PROTOBUF_DEPRECATED;
  
  // optional float opacity = 3 [deprecated = true];
  inline bool has_opacity() const PROTOBUF_DEPRECATED;
  inline void clear_opacity() PROTOBUF_DEPRECATED;
  static const int kOpacityFieldNumber = 3;
  inline float opacity() const PROTOBUF_DEPRECATED;
  inline void set_opacity(float value) PROTOBUF_DEPRECATED;
  
  // optional bool empty = 4 [deprecated = true];
  inline bool has_empty() const PROTOBUF_DEPRECATED;
  inline void clear_empty() PROTOBUF_DEPRECATED;
  static const int kEmptyFieldNumber = 4;
  inline bool empty() const PROTOBUF_DEPRECATED;
  inline void set_empty(bool value) PROTOBUF_DEPRECATED;
  
  // @@protoc_insertion_point(class_scope:TST.Deprecated_TableStrokeArchive)
 private:
  inline void set_has_stroke();
  inline void clear_has_stroke();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_opacity();
  inline void clear_has_opacity();
  inline void set_has_empty();
  inline void clear_has_empty();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::TSD::StrokeArchive* stroke_;
  float opacity_;
  bool background_;
  bool empty_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static Deprecated_TableStrokeArchive* default_instance_;
};
// -------------------------------------------------------------------

class CellStylePropertiesArchive : public ::google::protobuf::Message {
 public:
  CellStylePropertiesArchive();
  virtual ~CellStylePropertiesArchive();
  
  CellStylePropertiesArchive(const CellStylePropertiesArchive& from);
  
  inline CellStylePropertiesArchive& operator=(const CellStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CellStylePropertiesArchive& default_instance();
  
  void Swap(CellStylePropertiesArchive* other);
  
  // implements Message ----------------------------------------------
  
  CellStylePropertiesArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CellStylePropertiesArchive& from);
  void MergeFrom(const CellStylePropertiesArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .TSD.FillArchive cell_fill = 1;
  inline bool has_cell_fill() const;
  inline void clear_cell_fill();
  static const int kCellFillFieldNumber = 1;
  inline const ::TSD::FillArchive& cell_fill() const;
  inline ::TSD::FillArchive* mutable_cell_fill();
  inline ::TSD::FillArchive* release_cell_fill();
  
  // optional bool text_wrap = 3;
  inline bool has_text_wrap() const;
  inline void clear_text_wrap();
  static const int kTextWrapFieldNumber = 3;
  inline bool text_wrap() const;
  inline void set_text_wrap(bool value);
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
  inline bool has_deprecated_top_stroke() const;
  inline void clear_deprecated_top_stroke();
  static const int kDeprecatedTopStrokeFieldNumber = 4;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_top_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_top_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_top_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
  inline bool has_deprecated_right_stroke() const;
  inline void clear_deprecated_right_stroke();
  static const int kDeprecatedRightStrokeFieldNumber = 5;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_right_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_right_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_right_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
  inline bool has_deprecated_bottom_stroke() const;
  inline void clear_deprecated_bottom_stroke();
  static const int kDeprecatedBottomStrokeFieldNumber = 6;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_bottom_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_bottom_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_bottom_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
  inline bool has_deprecated_left_stroke() const;
  inline void clear_deprecated_left_stroke();
  static const int kDeprecatedLeftStrokeFieldNumber = 7;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_left_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_left_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_left_stroke();
  
  // optional int32 vertical_alignment = 8;
  inline bool has_vertical_alignment() const;
  inline void clear_vertical_alignment();
  static const int kVerticalAlignmentFieldNumber = 8;
  inline ::google::protobuf::int32 vertical_alignment() const;
  inline void set_vertical_alignment(::google::protobuf::int32 value);
  
  // optional .TSWP.PaddingArchive padding = 9;
  inline bool has_padding() const;
  inline void clear_padding();
  static const int kPaddingFieldNumber = 9;
  inline const ::TSWP::PaddingArchive& padding() const;
  inline ::TSWP::PaddingArchive* mutable_padding();
  inline ::TSWP::PaddingArchive* release_padding();
  
  // optional .TSD.StrokeArchive top_stroke = 10;
  inline bool has_top_stroke() const;
  inline void clear_top_stroke();
  static const int kTopStrokeFieldNumber = 10;
  inline const ::TSD::StrokeArchive& top_stroke() const;
  inline ::TSD::StrokeArchive* mutable_top_stroke();
  inline ::TSD::StrokeArchive* release_top_stroke();
  
  // optional .TSD.StrokeArchive right_stroke = 11;
  inline bool has_right_stroke() const;
  inline void clear_right_stroke();
  static const int kRightStrokeFieldNumber = 11;
  inline const ::TSD::StrokeArchive& right_stroke() const;
  inline ::TSD::StrokeArchive* mutable_right_stroke();
  inline ::TSD::StrokeArchive* release_right_stroke();
  
  // optional .TSD.StrokeArchive bottom_stroke = 12;
  inline bool has_bottom_stroke() const;
  inline void clear_bottom_stroke();
  static const int kBottomStrokeFieldNumber = 12;
  inline const ::TSD::StrokeArchive& bottom_stroke() const;
  inline ::TSD::StrokeArchive* mutable_bottom_stroke();
  inline ::TSD::StrokeArchive* release_bottom_stroke();
  
  // optional .TSD.StrokeArchive left_stroke = 13;
  inline bool has_left_stroke() const;
  inline void clear_left_stroke();
  static const int kLeftStrokeFieldNumber = 13;
  inline const ::TSD::StrokeArchive& left_stroke() const;
  inline ::TSD::StrokeArchive* mutable_left_stroke();
  inline ::TSD::StrokeArchive* release_left_stroke();
  
  // @@protoc_insertion_point(class_scope:TST.CellStylePropertiesArchive)
 private:
  inline void set_has_cell_fill();
  inline void clear_has_cell_fill();
  inline void set_has_text_wrap();
  inline void clear_has_text_wrap();
  inline void set_has_deprecated_top_stroke();
  inline void clear_has_deprecated_top_stroke();
  inline void set_has_deprecated_right_stroke();
  inline void clear_has_deprecated_right_stroke();
  inline void set_has_deprecated_bottom_stroke();
  inline void clear_has_deprecated_bottom_stroke();
  inline void set_has_deprecated_left_stroke();
  inline void clear_has_deprecated_left_stroke();
  inline void set_has_vertical_alignment();
  inline void clear_has_vertical_alignment();
  inline void set_has_padding();
  inline void clear_has_padding();
  inline void set_has_top_stroke();
  inline void clear_has_top_stroke();
  inline void set_has_right_stroke();
  inline void clear_has_right_stroke();
  inline void set_has_bottom_stroke();
  inline void clear_has_bottom_stroke();
  inline void set_has_left_stroke();
  inline void clear_has_left_stroke();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::TSD::FillArchive* cell_fill_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_top_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_right_stroke_;
  bool text_wrap_;
  ::google::protobuf::int32 vertical_alignment_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_bottom_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_left_stroke_;
  ::TSWP::PaddingArchive* padding_;
  ::TSD::StrokeArchive* top_stroke_;
  ::TSD::StrokeArchive* right_stroke_;
  ::TSD::StrokeArchive* bottom_stroke_;
  ::TSD::StrokeArchive* left_stroke_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static CellStylePropertiesArchive* default_instance_;
};
// -------------------------------------------------------------------

class Deprecated_StrokePresetDataArchive : public ::google::protobuf::Message {
 public:
  Deprecated_StrokePresetDataArchive();
  virtual ~Deprecated_StrokePresetDataArchive();
  
  Deprecated_StrokePresetDataArchive(const Deprecated_StrokePresetDataArchive& from);
  
  inline Deprecated_StrokePresetDataArchive& operator=(const Deprecated_StrokePresetDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Deprecated_StrokePresetDataArchive& default_instance();
  
  void Swap(Deprecated_StrokePresetDataArchive* other);
  
  // implements Message ----------------------------------------------
  
  Deprecated_StrokePresetDataArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Deprecated_StrokePresetDataArchive& from);
  void MergeFrom(const Deprecated_StrokePresetDataArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
  inline bool has_deprecated_horizontal_stroke() const;
  inline void clear_deprecated_horizontal_stroke();
  static const int kDeprecatedHorizontalStrokeFieldNumber = 2;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_horizontal_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_horizontal_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_horizontal_stroke();
  
  // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
  inline bool has_deprecated_vertical_stroke() const;
  inline void clear_deprecated_vertical_stroke();
  static const int kDeprecatedVerticalStrokeFieldNumber = 1;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_vertical_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_vertical_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_vertical_stroke();
  
  // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
  inline bool has_deprecated_exterior_stroke() const;
  inline void clear_deprecated_exterior_stroke();
  static const int kDeprecatedExteriorStrokeFieldNumber = 3;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_exterior_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_exterior_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_exterior_stroke();
  
  // required int32 deprecated_visible_mask = 5;
  inline bool has_deprecated_visible_mask() const;
  inline void clear_deprecated_visible_mask();
  static const int kDeprecatedVisibleMaskFieldNumber = 5;
  inline ::google::protobuf::int32 deprecated_visible_mask() const;
  inline void set_deprecated_visible_mask(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:TST.Deprecated_StrokePresetDataArchive)
 private:
  inline void set_has_deprecated_horizontal_stroke();
  inline void clear_has_deprecated_horizontal_stroke();
  inline void set_has_deprecated_vertical_stroke();
  inline void clear_has_deprecated_vertical_stroke();
  inline void set_has_deprecated_exterior_stroke();
  inline void clear_has_deprecated_exterior_stroke();
  inline void set_has_deprecated_visible_mask();
  inline void clear_has_deprecated_visible_mask();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::TST::Deprecated_TableStrokeArchive* deprecated_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_vertical_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_exterior_stroke_;
  ::google::protobuf::int32 deprecated_visible_mask_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static Deprecated_StrokePresetDataArchive* default_instance_;
};
// -------------------------------------------------------------------

class StrokePresetDataArchive : public ::google::protobuf::Message {
 public:
  StrokePresetDataArchive();
  virtual ~StrokePresetDataArchive();
  
  StrokePresetDataArchive(const StrokePresetDataArchive& from);
  
  inline StrokePresetDataArchive& operator=(const StrokePresetDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StrokePresetDataArchive& default_instance();
  
  void Swap(StrokePresetDataArchive* other);
  
  // implements Message ----------------------------------------------
  
  StrokePresetDataArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrokePresetDataArchive& from);
  void MergeFrom(const StrokePresetDataArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .TSD.StrokeArchive horizontal_stroke = 1;
  inline bool has_horizontal_stroke() const;
  inline void clear_horizontal_stroke();
  static const int kHorizontalStrokeFieldNumber = 1;
  inline const ::TSD::StrokeArchive& horizontal_stroke() const;
  inline ::TSD::StrokeArchive* mutable_horizontal_stroke();
  inline ::TSD::StrokeArchive* release_horizontal_stroke();
  
  // optional .TSD.StrokeArchive vertical_stroke = 2;
  inline bool has_vertical_stroke() const;
  inline void clear_vertical_stroke();
  static const int kVerticalStrokeFieldNumber = 2;
  inline const ::TSD::StrokeArchive& vertical_stroke() const;
  inline ::TSD::StrokeArchive* mutable_vertical_stroke();
  inline ::TSD::StrokeArchive* release_vertical_stroke();
  
  // optional .TSD.StrokeArchive exterior_stroke = 3;
  inline bool has_exterior_stroke() const;
  inline void clear_exterior_stroke();
  static const int kExteriorStrokeFieldNumber = 3;
  inline const ::TSD::StrokeArchive& exterior_stroke() const;
  inline ::TSD::StrokeArchive* mutable_exterior_stroke();
  inline ::TSD::StrokeArchive* release_exterior_stroke();
  
  // optional int32 visible_mask = 4;
  inline bool has_visible_mask() const;
  inline void clear_visible_mask();
  static const int kVisibleMaskFieldNumber = 4;
  inline ::google::protobuf::int32 visible_mask() const;
  inline void set_visible_mask(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:TST.StrokePresetDataArchive)
 private:
  inline void set_has_horizontal_stroke();
  inline void clear_has_horizontal_stroke();
  inline void set_has_vertical_stroke();
  inline void clear_has_vertical_stroke();
  inline void set_has_exterior_stroke();
  inline void clear_has_exterior_stroke();
  inline void set_has_visible_mask();
  inline void clear_has_visible_mask();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::TSD::StrokeArchive* horizontal_stroke_;
  ::TSD::StrokeArchive* vertical_stroke_;
  ::TSD::StrokeArchive* exterior_stroke_;
  ::google::protobuf::int32 visible_mask_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static StrokePresetDataArchive* default_instance_;
};
// -------------------------------------------------------------------

class StrokePresetListArchive : public ::google::protobuf::Message {
 public:
  StrokePresetListArchive();
  virtual ~StrokePresetListArchive();
  
  StrokePresetListArchive(const StrokePresetListArchive& from);
  
  inline StrokePresetListArchive& operator=(const StrokePresetListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StrokePresetListArchive& default_instance();
  
  void Swap(StrokePresetListArchive* other);
  
  // implements Message ----------------------------------------------
  
  StrokePresetListArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrokePresetListArchive& from);
  void MergeFrom(const StrokePresetListArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
  inline int deprecated_preset_size() const;
  inline void clear_deprecated_preset();
  static const int kDeprecatedPresetFieldNumber = 2;
  inline const ::TST::Deprecated_StrokePresetDataArchive& deprecated_preset(int index) const;
  inline ::TST::Deprecated_StrokePresetDataArchive* mutable_deprecated_preset(int index);
  inline ::TST::Deprecated_StrokePresetDataArchive* add_deprecated_preset();
  inline const ::google::protobuf::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive >&
      deprecated_preset() const;
  inline ::google::protobuf::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive >*
      mutable_deprecated_preset();
  
  // repeated .TST.StrokePresetDataArchive preset = 3;
  inline int preset_size() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 3;
  inline const ::TST::StrokePresetDataArchive& preset(int index) const;
  inline ::TST::StrokePresetDataArchive* mutable_preset(int index);
  inline ::TST::StrokePresetDataArchive* add_preset();
  inline const ::google::protobuf::RepeatedPtrField< ::TST::StrokePresetDataArchive >&
      preset() const;
  inline ::google::protobuf::RepeatedPtrField< ::TST::StrokePresetDataArchive >*
      mutable_preset();
  
  // @@protoc_insertion_point(class_scope:TST.StrokePresetListArchive)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive > deprecated_preset_;
  ::google::protobuf::RepeatedPtrField< ::TST::StrokePresetDataArchive > preset_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static StrokePresetListArchive* default_instance_;
};
// -------------------------------------------------------------------

class TableStylePropertiesArchive : public ::google::protobuf::Message {
 public:
  TableStylePropertiesArchive();
  virtual ~TableStylePropertiesArchive();
  
  TableStylePropertiesArchive(const TableStylePropertiesArchive& from);
  
  inline TableStylePropertiesArchive& operator=(const TableStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableStylePropertiesArchive& default_instance();
  
  void Swap(TableStylePropertiesArchive* other);
  
  // implements Message ----------------------------------------------
  
  TableStylePropertiesArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableStylePropertiesArchive& from);
  void MergeFrom(const TableStylePropertiesArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool banded_rows = 1;
  inline bool has_banded_rows() const;
  inline void clear_banded_rows();
  static const int kBandedRowsFieldNumber = 1;
  inline bool banded_rows() const;
  inline void set_banded_rows(bool value);
  
  // optional .TSD.FillArchive banded_fill = 2;
  inline bool has_banded_fill() const;
  inline void clear_banded_fill();
  static const int kBandedFillFieldNumber = 2;
  inline const ::TSD::FillArchive& banded_fill() const;
  inline ::TSD::FillArchive* mutable_banded_fill();
  inline ::TSD::FillArchive* release_banded_fill();
  
  // optional bool behaves_like_spreadsheet = 21;
  inline bool has_behaves_like_spreadsheet() const;
  inline void clear_behaves_like_spreadsheet();
  static const int kBehavesLikeSpreadsheetFieldNumber = 21;
  inline bool behaves_like_spreadsheet() const;
  inline void set_behaves_like_spreadsheet(bool value);
  
  // optional bool auto_resize = 22;
  inline bool has_auto_resize() const;
  inline void clear_auto_resize();
  static const int kAutoResizeFieldNumber = 22;
  inline bool auto_resize() const;
  inline void set_auto_resize(bool value);
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
  inline bool has_deprecated_header_row_separator_stroke() const;
  inline void clear_deprecated_header_row_separator_stroke();
  static const int kDeprecatedHeaderRowSeparatorStrokeFieldNumber = 4;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_separator_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_row_separator_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_row_separator_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
  inline bool has_deprecated_header_row_border_stroke() const;
  inline void clear_deprecated_header_row_border_stroke();
  static const int kDeprecatedHeaderRowBorderStrokeFieldNumber = 5;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_border_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_row_border_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_row_border_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
  inline bool has_deprecated_header_row_horizontal_stroke() const;
  inline void clear_deprecated_header_row_horizontal_stroke();
  static const int kDeprecatedHeaderRowHorizontalStrokeFieldNumber = 23;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_horizontal_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_row_horizontal_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_row_horizontal_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
  inline bool has_deprecated_header_row_vertical_stroke() const;
  inline void clear_deprecated_header_row_vertical_stroke();
  static const int kDeprecatedHeaderRowVerticalStrokeFieldNumber = 24;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_vertical_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_row_vertical_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_row_vertical_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
  inline bool has_deprecated_header_column_border_stroke() const;
  inline void clear_deprecated_header_column_border_stroke();
  static const int kDeprecatedHeaderColumnBorderStrokeFieldNumber = 7;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_border_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_column_border_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_column_border_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
  inline bool has_deprecated_header_column_separator_stroke() const;
  inline void clear_deprecated_header_column_separator_stroke();
  static const int kDeprecatedHeaderColumnSeparatorStrokeFieldNumber = 8;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_separator_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_column_separator_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_column_separator_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
  inline bool has_deprecated_header_column_horizontal_stroke() const;
  inline void clear_deprecated_header_column_horizontal_stroke();
  static const int kDeprecatedHeaderColumnHorizontalStrokeFieldNumber = 25;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_horizontal_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_column_horizontal_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_column_horizontal_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
  inline bool has_deprecated_header_column_vertical_stroke() const;
  inline void clear_deprecated_header_column_vertical_stroke();
  static const int kDeprecatedHeaderColumnVerticalStrokeFieldNumber = 26;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_vertical_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_column_vertical_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_column_vertical_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
  inline bool has_deprecated_footer_row_separator_stroke() const;
  inline void clear_deprecated_footer_row_separator_stroke();
  static const int kDeprecatedFooterRowSeparatorStrokeFieldNumber = 10;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_separator_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_footer_row_separator_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_footer_row_separator_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
  inline bool has_deprecated_footer_row_border_stroke() const;
  inline void clear_deprecated_footer_row_border_stroke();
  static const int kDeprecatedFooterRowBorderStrokeFieldNumber = 11;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_border_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_footer_row_border_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_footer_row_border_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
  inline bool has_deprecated_footer_row_horizontal_stroke() const;
  inline void clear_deprecated_footer_row_horizontal_stroke();
  static const int kDeprecatedFooterRowHorizontalStrokeFieldNumber = 27;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_horizontal_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_footer_row_horizontal_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_footer_row_horizontal_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
  inline bool has_deprecated_footer_row_vertical_stroke() const;
  inline void clear_deprecated_footer_row_vertical_stroke();
  static const int kDeprecatedFooterRowVerticalStrokeFieldNumber = 28;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_vertical_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_footer_row_vertical_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_footer_row_vertical_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
  inline bool has_deprecated_table_body_horizontal_border_stroke() const;
  inline void clear_deprecated_table_body_horizontal_border_stroke();
  static const int kDeprecatedTableBodyHorizontalBorderStrokeFieldNumber = 12;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_horizontal_border_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_table_body_horizontal_border_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_table_body_horizontal_border_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
  inline bool has_deprecated_table_body_vertical_border_stroke() const;
  inline void clear_deprecated_table_body_vertical_border_stroke();
  static const int kDeprecatedTableBodyVerticalBorderStrokeFieldNumber = 29;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_vertical_border_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_table_body_vertical_border_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_table_body_vertical_border_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
  inline bool has_deprecated_table_body_horizontal_stroke() const;
  inline void clear_deprecated_table_body_horizontal_stroke();
  static const int kDeprecatedTableBodyHorizontalStrokeFieldNumber = 30;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_horizontal_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_table_body_horizontal_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_table_body_horizontal_stroke();
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
  inline bool has_deprecated_table_body_vertical_stroke() const;
  inline void clear_deprecated_table_body_vertical_stroke();
  static const int kDeprecatedTableBodyVerticalStrokeFieldNumber = 31;
  inline const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_vertical_stroke() const;
  inline ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_table_body_vertical_stroke();
  inline ::TST::Deprecated_TableStrokeArchive* release_deprecated_table_body_vertical_stroke();
  
  // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
  inline bool has_stroke_preset_list() const;
  inline void clear_stroke_preset_list();
  static const int kStrokePresetListFieldNumber = 32;
  inline const ::TST::StrokePresetListArchive& stroke_preset_list() const;
  inline ::TST::StrokePresetListArchive* mutable_stroke_preset_list();
  inline ::TST::StrokePresetListArchive* release_stroke_preset_list();
  
  // optional bool v_strokes_visible = 33;
  inline bool has_v_strokes_visible() const;
  inline void clear_v_strokes_visible();
  static const int kVStrokesVisibleFieldNumber = 33;
  inline bool v_strokes_visible() const;
  inline void set_v_strokes_visible(bool value);
  
  // optional bool h_strokes_visible = 34;
  inline bool has_h_strokes_visible() const;
  inline void clear_h_strokes_visible();
  static const int kHStrokesVisibleFieldNumber = 34;
  inline bool h_strokes_visible() const;
  inline void set_h_strokes_visible(bool value);
  
  // optional bool hr_separator_visible = 35;
  inline bool has_hr_separator_visible() const;
  inline void clear_hr_separator_visible();
  static const int kHrSeparatorVisibleFieldNumber = 35;
  inline bool hr_separator_visible() const;
  inline void set_hr_separator_visible(bool value);
  
  // optional bool hc_separator_visible = 36;
  inline bool has_hc_separator_visible() const;
  inline void clear_hc_separator_visible();
  static const int kHcSeparatorVisibleFieldNumber = 36;
  inline bool hc_separator_visible() const;
  inline void set_hc_separator_visible(bool value);
  
  // optional bool footer_separator_visible = 37;
  inline bool has_footer_separator_visible() const;
  inline void clear_footer_separator_visible();
  static const int kFooterSeparatorVisibleFieldNumber = 37;
  inline bool footer_separator_visible() const;
  inline void set_footer_separator_visible(bool value);
  
  // optional bool table_border_visible = 38;
  inline bool has_table_border_visible() const;
  inline void clear_table_border_visible();
  static const int kTableBorderVisibleFieldNumber = 38;
  inline bool table_border_visible() const;
  inline void set_table_border_visible(bool value);
  
  // optional bool table_header_border_visible = 39;
  inline bool has_table_header_border_visible() const;
  inline void clear_table_header_border_visible();
  static const int kTableHeaderBorderVisibleFieldNumber = 39;
  inline bool table_header_border_visible() const;
  inline void set_table_header_border_visible(bool value);
  
  // optional bool table_hc_divider_visible = 42;
  inline bool has_table_hc_divider_visible() const;
  inline void clear_table_hc_divider_visible();
  static const int kTableHcDividerVisibleFieldNumber = 42;
  inline bool table_hc_divider_visible() const;
  inline void set_table_hc_divider_visible(bool value);
  
  // optional bool table_hr_divider_visible = 43;
  inline bool has_table_hr_divider_visible() const;
  inline void clear_table_hr_divider_visible();
  static const int kTableHrDividerVisibleFieldNumber = 43;
  inline bool table_hr_divider_visible() const;
  inline void set_table_hr_divider_visible(bool value);
  
  // optional bool table_footer_divider_visible = 44;
  inline bool has_table_footer_divider_visible() const;
  inline void clear_table_footer_divider_visible();
  static const int kTableFooterDividerVisibleFieldNumber = 44;
  inline bool table_footer_divider_visible() const;
  inline void set_table_footer_divider_visible(bool value);
  
  // optional int32 OBSOLETE_master_font_size = 40;
  inline bool has_obsolete_master_font_size() const;
  inline void clear_obsolete_master_font_size();
  static const int kOBSOLETEMasterFontSizeFieldNumber = 40;
  inline ::google::protobuf::int32 obsolete_master_font_size() const;
  inline void set_obsolete_master_font_size(::google::protobuf::int32 value);
  
  // optional string master_font_family = 41;
  inline bool has_master_font_family() const;
  inline void clear_master_font_family();
  static const int kMasterFontFamilyFieldNumber = 41;
  inline const ::std::string& master_font_family() const;
  inline void set_master_font_family(const ::std::string& value);
  inline void set_master_font_family(const char* value);
  inline void set_master_font_family(const char* value, size_t size);
  inline ::std::string* mutable_master_font_family();
  inline ::std::string* release_master_font_family();
  
  // optional .TSWP.WritingDirectionType writing_direction = 45;
  inline bool has_writing_direction() const;
  inline void clear_writing_direction();
  static const int kWritingDirectionFieldNumber = 45;
  inline TSWP::WritingDirectionType writing_direction() const;
  inline void set_writing_direction(TSWP::WritingDirectionType value);
  
  // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
  inline bool has_header_row_separator_stroke() const;
  inline void clear_header_row_separator_stroke();
  static const int kHeaderRowSeparatorStrokeFieldNumber = 46;
  inline const ::TSD::StrokeArchive& header_row_separator_stroke() const;
  inline ::TSD::StrokeArchive* mutable_header_row_separator_stroke();
  inline ::TSD::StrokeArchive* release_header_row_separator_stroke();
  
  // optional .TSD.StrokeArchive header_row_border_stroke = 47;
  inline bool has_header_row_border_stroke() const;
  inline void clear_header_row_border_stroke();
  static const int kHeaderRowBorderStrokeFieldNumber = 47;
  inline const ::TSD::StrokeArchive& header_row_border_stroke() const;
  inline ::TSD::StrokeArchive* mutable_header_row_border_stroke();
  inline ::TSD::StrokeArchive* release_header_row_border_stroke();
  
  // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
  inline bool has_header_row_horizontal_stroke() const;
  inline void clear_header_row_horizontal_stroke();
  static const int kHeaderRowHorizontalStrokeFieldNumber = 48;
  inline const ::TSD::StrokeArchive& header_row_horizontal_stroke() const;
  inline ::TSD::StrokeArchive* mutable_header_row_horizontal_stroke();
  inline ::TSD::StrokeArchive* release_header_row_horizontal_stroke();
  
  // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
  inline bool has_header_row_vertical_stroke() const;
  inline void clear_header_row_vertical_stroke();
  static const int kHeaderRowVerticalStrokeFieldNumber = 49;
  inline const ::TSD::StrokeArchive& header_row_vertical_stroke() const;
  inline ::TSD::StrokeArchive* mutable_header_row_vertical_stroke();
  inline ::TSD::StrokeArchive* release_header_row_vertical_stroke();
  
  // optional .TSD.StrokeArchive header_column_border_stroke = 50;
  inline bool has_header_column_border_stroke() const;
  inline void clear_header_column_border_stroke();
  static const int kHeaderColumnBorderStrokeFieldNumber = 50;
  inline const ::TSD::StrokeArchive& header_column_border_stroke() const;
  inline ::TSD::StrokeArchive* mutable_header_column_border_stroke();
  inline ::TSD::StrokeArchive* release_header_column_border_stroke();
  
  // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
  inline bool has_header_column_separator_stroke() const;
  inline void clear_header_column_separator_stroke();
  static const int kHeaderColumnSeparatorStrokeFieldNumber = 51;
  inline const ::TSD::StrokeArchive& header_column_separator_stroke() const;
  inline ::TSD::StrokeArchive* mutable_header_column_separator_stroke();
  inline ::TSD::StrokeArchive* release_header_column_separator_stroke();
  
  // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
  inline bool has_header_column_horizontal_stroke() const;
  inline void clear_header_column_horizontal_stroke();
  static const int kHeaderColumnHorizontalStrokeFieldNumber = 52;
  inline const ::TSD::StrokeArchive& header_column_horizontal_stroke() const;
  inline ::TSD::StrokeArchive* mutable_header_column_horizontal_stroke();
  inline ::TSD::StrokeArchive* release_header_column_horizontal_stroke();
  
  // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
  inline bool has_header_column_vertical_stroke() const;
  inline void clear_header_column_vertical_stroke();
  static const int kHeaderColumnVerticalStrokeFieldNumber = 53;
  inline const ::TSD::StrokeArchive& header_column_vertical_stroke() const;
  inline ::TSD::StrokeArchive* mutable_header_column_vertical_stroke();
  inline ::TSD::StrokeArchive* release_header_column_vertical_stroke();
  
  // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
  inline bool has_footer_row_separator_stroke() const;
  inline void clear_footer_row_separator_stroke();
  static const int kFooterRowSeparatorStrokeFieldNumber = 54;
  inline const ::TSD::StrokeArchive& footer_row_separator_stroke() const;
  inline ::TSD::StrokeArchive* mutable_footer_row_separator_stroke();
  inline ::TSD::StrokeArchive* release_footer_row_separator_stroke();
  
  // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
  inline bool has_footer_row_border_stroke() const;
  inline void clear_footer_row_border_stroke();
  static const int kFooterRowBorderStrokeFieldNumber = 55;
  inline const ::TSD::StrokeArchive& footer_row_border_stroke() const;
  inline ::TSD::StrokeArchive* mutable_footer_row_border_stroke();
  inline ::TSD::StrokeArchive* release_footer_row_border_stroke();
  
  // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
  inline bool has_footer_row_horizontal_stroke() const;
  inline void clear_footer_row_horizontal_stroke();
  static const int kFooterRowHorizontalStrokeFieldNumber = 56;
  inline const ::TSD::StrokeArchive& footer_row_horizontal_stroke() const;
  inline ::TSD::StrokeArchive* mutable_footer_row_horizontal_stroke();
  inline ::TSD::StrokeArchive* release_footer_row_horizontal_stroke();
  
  // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
  inline bool has_footer_row_vertical_stroke() const;
  inline void clear_footer_row_vertical_stroke();
  static const int kFooterRowVerticalStrokeFieldNumber = 57;
  inline const ::TSD::StrokeArchive& footer_row_vertical_stroke() const;
  inline ::TSD::StrokeArchive* mutable_footer_row_vertical_stroke();
  inline ::TSD::StrokeArchive* release_footer_row_vertical_stroke();
  
  // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
  inline bool has_table_body_horizontal_border_stroke() const;
  inline void clear_table_body_horizontal_border_stroke();
  static const int kTableBodyHorizontalBorderStrokeFieldNumber = 58;
  inline const ::TSD::StrokeArchive& table_body_horizontal_border_stroke() const;
  inline ::TSD::StrokeArchive* mutable_table_body_horizontal_border_stroke();
  inline ::TSD::StrokeArchive* release_table_body_horizontal_border_stroke();
  
  // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
  inline bool has_table_body_vertical_border_stroke() const;
  inline void clear_table_body_vertical_border_stroke();
  static const int kTableBodyVerticalBorderStrokeFieldNumber = 59;
  inline const ::TSD::StrokeArchive& table_body_vertical_border_stroke() const;
  inline ::TSD::StrokeArchive* mutable_table_body_vertical_border_stroke();
  inline ::TSD::StrokeArchive* release_table_body_vertical_border_stroke();
  
  // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
  inline bool has_table_body_horizontal_stroke() const;
  inline void clear_table_body_horizontal_stroke();
  static const int kTableBodyHorizontalStrokeFieldNumber = 60;
  inline const ::TSD::StrokeArchive& table_body_horizontal_stroke() const;
  inline ::TSD::StrokeArchive* mutable_table_body_horizontal_stroke();
  inline ::TSD::StrokeArchive* release_table_body_horizontal_stroke();
  
  // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
  inline bool has_table_body_vertical_stroke() const;
  inline void clear_table_body_vertical_stroke();
  static const int kTableBodyVerticalStrokeFieldNumber = 61;
  inline const ::TSD::StrokeArchive& table_body_vertical_stroke() const;
  inline ::TSD::StrokeArchive* mutable_table_body_vertical_stroke();
  inline ::TSD::StrokeArchive* release_table_body_vertical_stroke();
  
  // @@protoc_insertion_point(class_scope:TST.TableStylePropertiesArchive)
 private:
  inline void set_has_banded_rows();
  inline void clear_has_banded_rows();
  inline void set_has_banded_fill();
  inline void clear_has_banded_fill();
  inline void set_has_behaves_like_spreadsheet();
  inline void clear_has_behaves_like_spreadsheet();
  inline void set_has_auto_resize();
  inline void clear_has_auto_resize();
  inline void set_has_deprecated_header_row_separator_stroke();
  inline void clear_has_deprecated_header_row_separator_stroke();
  inline void set_has_deprecated_header_row_border_stroke();
  inline void clear_has_deprecated_header_row_border_stroke();
  inline void set_has_deprecated_header_row_horizontal_stroke();
  inline void clear_has_deprecated_header_row_horizontal_stroke();
  inline void set_has_deprecated_header_row_vertical_stroke();
  inline void clear_has_deprecated_header_row_vertical_stroke();
  inline void set_has_deprecated_header_column_border_stroke();
  inline void clear_has_deprecated_header_column_border_stroke();
  inline void set_has_deprecated_header_column_separator_stroke();
  inline void clear_has_deprecated_header_column_separator_stroke();
  inline void set_has_deprecated_header_column_horizontal_stroke();
  inline void clear_has_deprecated_header_column_horizontal_stroke();
  inline void set_has_deprecated_header_column_vertical_stroke();
  inline void clear_has_deprecated_header_column_vertical_stroke();
  inline void set_has_deprecated_footer_row_separator_stroke();
  inline void clear_has_deprecated_footer_row_separator_stroke();
  inline void set_has_deprecated_footer_row_border_stroke();
  inline void clear_has_deprecated_footer_row_border_stroke();
  inline void set_has_deprecated_footer_row_horizontal_stroke();
  inline void clear_has_deprecated_footer_row_horizontal_stroke();
  inline void set_has_deprecated_footer_row_vertical_stroke();
  inline void clear_has_deprecated_footer_row_vertical_stroke();
  inline void set_has_deprecated_table_body_horizontal_border_stroke();
  inline void clear_has_deprecated_table_body_horizontal_border_stroke();
  inline void set_has_deprecated_table_body_vertical_border_stroke();
  inline void clear_has_deprecated_table_body_vertical_border_stroke();
  inline void set_has_deprecated_table_body_horizontal_stroke();
  inline void clear_has_deprecated_table_body_horizontal_stroke();
  inline void set_has_deprecated_table_body_vertical_stroke();
  inline void clear_has_deprecated_table_body_vertical_stroke();
  inline void set_has_stroke_preset_list();
  inline void clear_has_stroke_preset_list();
  inline void set_has_v_strokes_visible();
  inline void clear_has_v_strokes_visible();
  inline void set_has_h_strokes_visible();
  inline void clear_has_h_strokes_visible();
  inline void set_has_hr_separator_visible();
  inline void clear_has_hr_separator_visible();
  inline void set_has_hc_separator_visible();
  inline void clear_has_hc_separator_visible();
  inline void set_has_footer_separator_visible();
  inline void clear_has_footer_separator_visible();
  inline void set_has_table_border_visible();
  inline void clear_has_table_border_visible();
  inline void set_has_table_header_border_visible();
  inline void clear_has_table_header_border_visible();
  inline void set_has_table_hc_divider_visible();
  inline void clear_has_table_hc_divider_visible();
  inline void set_has_table_hr_divider_visible();
  inline void clear_has_table_hr_divider_visible();
  inline void set_has_table_footer_divider_visible();
  inline void clear_has_table_footer_divider_visible();
  inline void set_has_obsolete_master_font_size();
  inline void clear_has_obsolete_master_font_size();
  inline void set_has_master_font_family();
  inline void clear_has_master_font_family();
  inline void set_has_writing_direction();
  inline void clear_has_writing_direction();
  inline void set_has_header_row_separator_stroke();
  inline void clear_has_header_row_separator_stroke();
  inline void set_has_header_row_border_stroke();
  inline void clear_has_header_row_border_stroke();
  inline void set_has_header_row_horizontal_stroke();
  inline void clear_has_header_row_horizontal_stroke();
  inline void set_has_header_row_vertical_stroke();
  inline void clear_has_header_row_vertical_stroke();
  inline void set_has_header_column_border_stroke();
  inline void clear_has_header_column_border_stroke();
  inline void set_has_header_column_separator_stroke();
  inline void clear_has_header_column_separator_stroke();
  inline void set_has_header_column_horizontal_stroke();
  inline void clear_has_header_column_horizontal_stroke();
  inline void set_has_header_column_vertical_stroke();
  inline void clear_has_header_column_vertical_stroke();
  inline void set_has_footer_row_separator_stroke();
  inline void clear_has_footer_row_separator_stroke();
  inline void set_has_footer_row_border_stroke();
  inline void clear_has_footer_row_border_stroke();
  inline void set_has_footer_row_horizontal_stroke();
  inline void clear_has_footer_row_horizontal_stroke();
  inline void set_has_footer_row_vertical_stroke();
  inline void clear_has_footer_row_vertical_stroke();
  inline void set_has_table_body_horizontal_border_stroke();
  inline void clear_has_table_body_horizontal_border_stroke();
  inline void set_has_table_body_vertical_border_stroke();
  inline void clear_has_table_body_vertical_border_stroke();
  inline void set_has_table_body_horizontal_stroke();
  inline void clear_has_table_body_horizontal_stroke();
  inline void set_has_table_body_vertical_stroke();
  inline void clear_has_table_body_vertical_stroke();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::TSD::FillArchive* banded_fill_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_separator_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_vertical_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_separator_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_vertical_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_separator_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_vertical_stroke_;
  bool banded_rows_;
  bool behaves_like_spreadsheet_;
  bool auto_resize_;
  bool v_strokes_visible_;
  bool h_strokes_visible_;
  bool hr_separator_visible_;
  bool hc_separator_visible_;
  bool footer_separator_visible_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_stroke_;
  ::TST::StrokePresetListArchive* stroke_preset_list_;
  bool table_border_visible_;
  bool table_header_border_visible_;
  bool table_hc_divider_visible_;
  bool table_hr_divider_visible_;
  bool table_footer_divider_visible_;
  ::google::protobuf::int32 obsolete_master_font_size_;
  int writing_direction_;
  ::std::string* master_font_family_;
  ::TSD::StrokeArchive* header_row_separator_stroke_;
  ::TSD::StrokeArchive* header_row_border_stroke_;
  ::TSD::StrokeArchive* header_row_horizontal_stroke_;
  ::TSD::StrokeArchive* header_row_vertical_stroke_;
  ::TSD::StrokeArchive* header_column_border_stroke_;
  ::TSD::StrokeArchive* header_column_separator_stroke_;
  ::TSD::StrokeArchive* header_column_horizontal_stroke_;
  ::TSD::StrokeArchive* header_column_vertical_stroke_;
  ::TSD::StrokeArchive* footer_row_separator_stroke_;
  ::TSD::StrokeArchive* footer_row_border_stroke_;
  ::TSD::StrokeArchive* footer_row_horizontal_stroke_;
  ::TSD::StrokeArchive* footer_row_vertical_stroke_;
  ::TSD::StrokeArchive* table_body_horizontal_border_stroke_;
  ::TSD::StrokeArchive* table_body_vertical_border_stroke_;
  ::TSD::StrokeArchive* table_body_horizontal_stroke_;
  ::TSD::StrokeArchive* table_body_vertical_stroke_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(50 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static TableStylePropertiesArchive* default_instance_;
};
// -------------------------------------------------------------------

class TableStylePresetArchive : public ::google::protobuf::Message {
 public:
  TableStylePresetArchive();
  virtual ~TableStylePresetArchive();
  
  TableStylePresetArchive(const TableStylePresetArchive& from);
  
  inline TableStylePresetArchive& operator=(const TableStylePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableStylePresetArchive& default_instance();
  
  void Swap(TableStylePresetArchive* other);
  
  // implements Message ----------------------------------------------
  
  TableStylePresetArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableStylePresetArchive& from);
  void MergeFrom(const TableStylePresetArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional .TSP.Reference image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::TSP::Reference& image() const;
  inline ::TSP::Reference* mutable_image();
  inline ::TSP::Reference* release_image();
  
  // optional .TSP.Reference style_network = 3;
  inline bool has_style_network() const;
  inline void clear_style_network();
  static const int kStyleNetworkFieldNumber = 3;
  inline const ::TSP::Reference& style_network() const;
  inline ::TSP::Reference* mutable_style_network();
  inline ::TSP::Reference* release_style_network();
  
  // @@protoc_insertion_point(class_scope:TST.TableStylePresetArchive)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_style_network();
  inline void clear_has_style_network();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::TSP::Reference* image_;
  ::TSP::Reference* style_network_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static TableStylePresetArchive* default_instance_;
};
// -------------------------------------------------------------------

class TableStrokePresetArchive : public ::google::protobuf::Message {
 public:
  TableStrokePresetArchive();
  virtual ~TableStrokePresetArchive();
  
  TableStrokePresetArchive(const TableStrokePresetArchive& from);
  
  inline TableStrokePresetArchive& operator=(const TableStrokePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableStrokePresetArchive& default_instance();
  
  void Swap(TableStrokePresetArchive* other);
  
  // implements Message ----------------------------------------------
  
  TableStrokePresetArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableStrokePresetArchive& from);
  void MergeFrom(const TableStrokePresetArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:TST.TableStrokePresetArchive)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static TableStrokePresetArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemePresetsArchive : public ::google::protobuf::Message {
 public:
  ThemePresetsArchive();
  virtual ~ThemePresetsArchive();
  
  ThemePresetsArchive(const ThemePresetsArchive& from);
  
  inline ThemePresetsArchive& operator=(const ThemePresetsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemePresetsArchive& default_instance();
  
  void Swap(ThemePresetsArchive* other);
  
  // implements Message ----------------------------------------------
  
  ThemePresetsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemePresetsArchive& from);
  void MergeFrom(const ThemePresetsArchive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .TSP.Reference table_style_presets = 1;
  inline int table_style_presets_size() const;
  inline void clear_table_style_presets();
  static const int kTableStylePresetsFieldNumber = 1;
  inline const ::TSP::Reference& table_style_presets(int index) const;
  inline ::TSP::Reference* mutable_table_style_presets(int index);
  inline ::TSP::Reference* add_table_style_presets();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      table_style_presets() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_table_style_presets();
  
  // repeated .TSP.Reference table_cell_stroke_presets = 2;
  inline int table_cell_stroke_presets_size() const;
  inline void clear_table_cell_stroke_presets();
  static const int kTableCellStrokePresetsFieldNumber = 2;
  inline const ::TSP::Reference& table_cell_stroke_presets(int index) const;
  inline ::TSP::Reference* mutable_table_cell_stroke_presets(int index);
  inline ::TSP::Reference* add_table_cell_stroke_presets();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      table_cell_stroke_presets() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_table_cell_stroke_presets();
  
  static const int kExtensionFieldNumber = 200;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TST::ThemePresetsArchive >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:TST.ThemePresetsArchive)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > table_style_presets_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > table_cell_stroke_presets_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto();
  friend void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto();
  
  void InitAsDefaultInstance();
  static ThemePresetsArchive* default_instance_;
};
// ===================================================================


// ===================================================================

// Deprecated_TableStrokeArchive

// optional .TSD.StrokeArchive stroke = 1;
inline bool Deprecated_TableStrokeArchive::has_stroke() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Deprecated_TableStrokeArchive::set_has_stroke() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Deprecated_TableStrokeArchive::clear_has_stroke() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Deprecated_TableStrokeArchive::clear_stroke() {
  if (stroke_ != NULL) stroke_->::TSD::StrokeArchive::Clear();
  clear_has_stroke();
}
inline const ::TSD::StrokeArchive& Deprecated_TableStrokeArchive::stroke() const {
  return stroke_ != NULL ? *stroke_ : *default_instance_->stroke_;
}
inline ::TSD::StrokeArchive* Deprecated_TableStrokeArchive::mutable_stroke() {
  set_has_stroke();
  if (stroke_ == NULL) stroke_ = new ::TSD::StrokeArchive;
  return stroke_;
}
inline ::TSD::StrokeArchive* Deprecated_TableStrokeArchive::release_stroke() {
  clear_has_stroke();
  ::TSD::StrokeArchive* temp = stroke_;
  stroke_ = NULL;
  return temp;
}

// optional bool background = 2 [deprecated = true];
inline bool Deprecated_TableStrokeArchive::has_background() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Deprecated_TableStrokeArchive::set_has_background() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Deprecated_TableStrokeArchive::clear_has_background() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Deprecated_TableStrokeArchive::clear_background() {
  background_ = false;
  clear_has_background();
}
inline bool Deprecated_TableStrokeArchive::background() const {
  return background_;
}
inline void Deprecated_TableStrokeArchive::set_background(bool value) {
  set_has_background();
  background_ = value;
}

// optional float opacity = 3 [deprecated = true];
inline bool Deprecated_TableStrokeArchive::has_opacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Deprecated_TableStrokeArchive::set_has_opacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Deprecated_TableStrokeArchive::clear_has_opacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Deprecated_TableStrokeArchive::clear_opacity() {
  opacity_ = 0;
  clear_has_opacity();
}
inline float Deprecated_TableStrokeArchive::opacity() const {
  return opacity_;
}
inline void Deprecated_TableStrokeArchive::set_opacity(float value) {
  set_has_opacity();
  opacity_ = value;
}

// optional bool empty = 4 [deprecated = true];
inline bool Deprecated_TableStrokeArchive::has_empty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Deprecated_TableStrokeArchive::set_has_empty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Deprecated_TableStrokeArchive::clear_has_empty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Deprecated_TableStrokeArchive::clear_empty() {
  empty_ = false;
  clear_has_empty();
}
inline bool Deprecated_TableStrokeArchive::empty() const {
  return empty_;
}
inline void Deprecated_TableStrokeArchive::set_empty(bool value) {
  set_has_empty();
  empty_ = value;
}

// -------------------------------------------------------------------

// CellStylePropertiesArchive

// optional .TSD.FillArchive cell_fill = 1;
inline bool CellStylePropertiesArchive::has_cell_fill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CellStylePropertiesArchive::set_has_cell_fill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CellStylePropertiesArchive::clear_has_cell_fill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CellStylePropertiesArchive::clear_cell_fill() {
  if (cell_fill_ != NULL) cell_fill_->::TSD::FillArchive::Clear();
  clear_has_cell_fill();
}
inline const ::TSD::FillArchive& CellStylePropertiesArchive::cell_fill() const {
  return cell_fill_ != NULL ? *cell_fill_ : *default_instance_->cell_fill_;
}
inline ::TSD::FillArchive* CellStylePropertiesArchive::mutable_cell_fill() {
  set_has_cell_fill();
  if (cell_fill_ == NULL) cell_fill_ = new ::TSD::FillArchive;
  return cell_fill_;
}
inline ::TSD::FillArchive* CellStylePropertiesArchive::release_cell_fill() {
  clear_has_cell_fill();
  ::TSD::FillArchive* temp = cell_fill_;
  cell_fill_ = NULL;
  return temp;
}

// optional bool text_wrap = 3;
inline bool CellStylePropertiesArchive::has_text_wrap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CellStylePropertiesArchive::set_has_text_wrap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CellStylePropertiesArchive::clear_has_text_wrap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CellStylePropertiesArchive::clear_text_wrap() {
  text_wrap_ = false;
  clear_has_text_wrap();
}
inline bool CellStylePropertiesArchive::text_wrap() const {
  return text_wrap_;
}
inline void CellStylePropertiesArchive::set_text_wrap(bool value) {
  set_has_text_wrap();
  text_wrap_ = value;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
inline bool CellStylePropertiesArchive::has_deprecated_top_stroke() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CellStylePropertiesArchive::set_has_deprecated_top_stroke() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CellStylePropertiesArchive::clear_has_deprecated_top_stroke() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CellStylePropertiesArchive::clear_deprecated_top_stroke() {
  if (deprecated_top_stroke_ != NULL) deprecated_top_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_top_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::deprecated_top_stroke() const {
  return deprecated_top_stroke_ != NULL ? *deprecated_top_stroke_ : *default_instance_->deprecated_top_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::mutable_deprecated_top_stroke() {
  set_has_deprecated_top_stroke();
  if (deprecated_top_stroke_ == NULL) deprecated_top_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_top_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::release_deprecated_top_stroke() {
  clear_has_deprecated_top_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_top_stroke_;
  deprecated_top_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
inline bool CellStylePropertiesArchive::has_deprecated_right_stroke() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CellStylePropertiesArchive::set_has_deprecated_right_stroke() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CellStylePropertiesArchive::clear_has_deprecated_right_stroke() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CellStylePropertiesArchive::clear_deprecated_right_stroke() {
  if (deprecated_right_stroke_ != NULL) deprecated_right_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_right_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::deprecated_right_stroke() const {
  return deprecated_right_stroke_ != NULL ? *deprecated_right_stroke_ : *default_instance_->deprecated_right_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::mutable_deprecated_right_stroke() {
  set_has_deprecated_right_stroke();
  if (deprecated_right_stroke_ == NULL) deprecated_right_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_right_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::release_deprecated_right_stroke() {
  clear_has_deprecated_right_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_right_stroke_;
  deprecated_right_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
inline bool CellStylePropertiesArchive::has_deprecated_bottom_stroke() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CellStylePropertiesArchive::set_has_deprecated_bottom_stroke() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CellStylePropertiesArchive::clear_has_deprecated_bottom_stroke() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CellStylePropertiesArchive::clear_deprecated_bottom_stroke() {
  if (deprecated_bottom_stroke_ != NULL) deprecated_bottom_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_bottom_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::deprecated_bottom_stroke() const {
  return deprecated_bottom_stroke_ != NULL ? *deprecated_bottom_stroke_ : *default_instance_->deprecated_bottom_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::mutable_deprecated_bottom_stroke() {
  set_has_deprecated_bottom_stroke();
  if (deprecated_bottom_stroke_ == NULL) deprecated_bottom_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_bottom_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::release_deprecated_bottom_stroke() {
  clear_has_deprecated_bottom_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_bottom_stroke_;
  deprecated_bottom_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
inline bool CellStylePropertiesArchive::has_deprecated_left_stroke() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CellStylePropertiesArchive::set_has_deprecated_left_stroke() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CellStylePropertiesArchive::clear_has_deprecated_left_stroke() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CellStylePropertiesArchive::clear_deprecated_left_stroke() {
  if (deprecated_left_stroke_ != NULL) deprecated_left_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_left_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::deprecated_left_stroke() const {
  return deprecated_left_stroke_ != NULL ? *deprecated_left_stroke_ : *default_instance_->deprecated_left_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::mutable_deprecated_left_stroke() {
  set_has_deprecated_left_stroke();
  if (deprecated_left_stroke_ == NULL) deprecated_left_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_left_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::release_deprecated_left_stroke() {
  clear_has_deprecated_left_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_left_stroke_;
  deprecated_left_stroke_ = NULL;
  return temp;
}

// optional int32 vertical_alignment = 8;
inline bool CellStylePropertiesArchive::has_vertical_alignment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CellStylePropertiesArchive::set_has_vertical_alignment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CellStylePropertiesArchive::clear_has_vertical_alignment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CellStylePropertiesArchive::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  clear_has_vertical_alignment();
}
inline ::google::protobuf::int32 CellStylePropertiesArchive::vertical_alignment() const {
  return vertical_alignment_;
}
inline void CellStylePropertiesArchive::set_vertical_alignment(::google::protobuf::int32 value) {
  set_has_vertical_alignment();
  vertical_alignment_ = value;
}

// optional .TSWP.PaddingArchive padding = 9;
inline bool CellStylePropertiesArchive::has_padding() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CellStylePropertiesArchive::set_has_padding() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CellStylePropertiesArchive::clear_has_padding() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CellStylePropertiesArchive::clear_padding() {
  if (padding_ != NULL) padding_->::TSWP::PaddingArchive::Clear();
  clear_has_padding();
}
inline const ::TSWP::PaddingArchive& CellStylePropertiesArchive::padding() const {
  return padding_ != NULL ? *padding_ : *default_instance_->padding_;
}
inline ::TSWP::PaddingArchive* CellStylePropertiesArchive::mutable_padding() {
  set_has_padding();
  if (padding_ == NULL) padding_ = new ::TSWP::PaddingArchive;
  return padding_;
}
inline ::TSWP::PaddingArchive* CellStylePropertiesArchive::release_padding() {
  clear_has_padding();
  ::TSWP::PaddingArchive* temp = padding_;
  padding_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive top_stroke = 10;
inline bool CellStylePropertiesArchive::has_top_stroke() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CellStylePropertiesArchive::set_has_top_stroke() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CellStylePropertiesArchive::clear_has_top_stroke() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CellStylePropertiesArchive::clear_top_stroke() {
  if (top_stroke_ != NULL) top_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_top_stroke();
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::top_stroke() const {
  return top_stroke_ != NULL ? *top_stroke_ : *default_instance_->top_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::mutable_top_stroke() {
  set_has_top_stroke();
  if (top_stroke_ == NULL) top_stroke_ = new ::TSD::StrokeArchive;
  return top_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::release_top_stroke() {
  clear_has_top_stroke();
  ::TSD::StrokeArchive* temp = top_stroke_;
  top_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive right_stroke = 11;
inline bool CellStylePropertiesArchive::has_right_stroke() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CellStylePropertiesArchive::set_has_right_stroke() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CellStylePropertiesArchive::clear_has_right_stroke() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CellStylePropertiesArchive::clear_right_stroke() {
  if (right_stroke_ != NULL) right_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_right_stroke();
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::right_stroke() const {
  return right_stroke_ != NULL ? *right_stroke_ : *default_instance_->right_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::mutable_right_stroke() {
  set_has_right_stroke();
  if (right_stroke_ == NULL) right_stroke_ = new ::TSD::StrokeArchive;
  return right_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::release_right_stroke() {
  clear_has_right_stroke();
  ::TSD::StrokeArchive* temp = right_stroke_;
  right_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive bottom_stroke = 12;
inline bool CellStylePropertiesArchive::has_bottom_stroke() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CellStylePropertiesArchive::set_has_bottom_stroke() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CellStylePropertiesArchive::clear_has_bottom_stroke() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CellStylePropertiesArchive::clear_bottom_stroke() {
  if (bottom_stroke_ != NULL) bottom_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_bottom_stroke();
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::bottom_stroke() const {
  return bottom_stroke_ != NULL ? *bottom_stroke_ : *default_instance_->bottom_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::mutable_bottom_stroke() {
  set_has_bottom_stroke();
  if (bottom_stroke_ == NULL) bottom_stroke_ = new ::TSD::StrokeArchive;
  return bottom_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::release_bottom_stroke() {
  clear_has_bottom_stroke();
  ::TSD::StrokeArchive* temp = bottom_stroke_;
  bottom_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive left_stroke = 13;
inline bool CellStylePropertiesArchive::has_left_stroke() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CellStylePropertiesArchive::set_has_left_stroke() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CellStylePropertiesArchive::clear_has_left_stroke() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CellStylePropertiesArchive::clear_left_stroke() {
  if (left_stroke_ != NULL) left_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_left_stroke();
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::left_stroke() const {
  return left_stroke_ != NULL ? *left_stroke_ : *default_instance_->left_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::mutable_left_stroke() {
  set_has_left_stroke();
  if (left_stroke_ == NULL) left_stroke_ = new ::TSD::StrokeArchive;
  return left_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::release_left_stroke() {
  clear_has_left_stroke();
  ::TSD::StrokeArchive* temp = left_stroke_;
  left_stroke_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Deprecated_StrokePresetDataArchive

// required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
inline bool Deprecated_StrokePresetDataArchive::has_deprecated_horizontal_stroke() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Deprecated_StrokePresetDataArchive::set_has_deprecated_horizontal_stroke() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Deprecated_StrokePresetDataArchive::clear_has_deprecated_horizontal_stroke() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Deprecated_StrokePresetDataArchive::clear_deprecated_horizontal_stroke() {
  if (deprecated_horizontal_stroke_ != NULL) deprecated_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_horizontal_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::deprecated_horizontal_stroke() const {
  return deprecated_horizontal_stroke_ != NULL ? *deprecated_horizontal_stroke_ : *default_instance_->deprecated_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::mutable_deprecated_horizontal_stroke() {
  set_has_deprecated_horizontal_stroke();
  if (deprecated_horizontal_stroke_ == NULL) deprecated_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::release_deprecated_horizontal_stroke() {
  clear_has_deprecated_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_horizontal_stroke_;
  deprecated_horizontal_stroke_ = NULL;
  return temp;
}

// required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
inline bool Deprecated_StrokePresetDataArchive::has_deprecated_vertical_stroke() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Deprecated_StrokePresetDataArchive::set_has_deprecated_vertical_stroke() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Deprecated_StrokePresetDataArchive::clear_has_deprecated_vertical_stroke() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Deprecated_StrokePresetDataArchive::clear_deprecated_vertical_stroke() {
  if (deprecated_vertical_stroke_ != NULL) deprecated_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_vertical_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::deprecated_vertical_stroke() const {
  return deprecated_vertical_stroke_ != NULL ? *deprecated_vertical_stroke_ : *default_instance_->deprecated_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::mutable_deprecated_vertical_stroke() {
  set_has_deprecated_vertical_stroke();
  if (deprecated_vertical_stroke_ == NULL) deprecated_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::release_deprecated_vertical_stroke() {
  clear_has_deprecated_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_vertical_stroke_;
  deprecated_vertical_stroke_ = NULL;
  return temp;
}

// required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
inline bool Deprecated_StrokePresetDataArchive::has_deprecated_exterior_stroke() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Deprecated_StrokePresetDataArchive::set_has_deprecated_exterior_stroke() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Deprecated_StrokePresetDataArchive::clear_has_deprecated_exterior_stroke() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Deprecated_StrokePresetDataArchive::clear_deprecated_exterior_stroke() {
  if (deprecated_exterior_stroke_ != NULL) deprecated_exterior_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_exterior_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::deprecated_exterior_stroke() const {
  return deprecated_exterior_stroke_ != NULL ? *deprecated_exterior_stroke_ : *default_instance_->deprecated_exterior_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::mutable_deprecated_exterior_stroke() {
  set_has_deprecated_exterior_stroke();
  if (deprecated_exterior_stroke_ == NULL) deprecated_exterior_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_exterior_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::release_deprecated_exterior_stroke() {
  clear_has_deprecated_exterior_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_exterior_stroke_;
  deprecated_exterior_stroke_ = NULL;
  return temp;
}

// required int32 deprecated_visible_mask = 5;
inline bool Deprecated_StrokePresetDataArchive::has_deprecated_visible_mask() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Deprecated_StrokePresetDataArchive::set_has_deprecated_visible_mask() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Deprecated_StrokePresetDataArchive::clear_has_deprecated_visible_mask() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Deprecated_StrokePresetDataArchive::clear_deprecated_visible_mask() {
  deprecated_visible_mask_ = 0;
  clear_has_deprecated_visible_mask();
}
inline ::google::protobuf::int32 Deprecated_StrokePresetDataArchive::deprecated_visible_mask() const {
  return deprecated_visible_mask_;
}
inline void Deprecated_StrokePresetDataArchive::set_deprecated_visible_mask(::google::protobuf::int32 value) {
  set_has_deprecated_visible_mask();
  deprecated_visible_mask_ = value;
}

// -------------------------------------------------------------------

// StrokePresetDataArchive

// optional .TSD.StrokeArchive horizontal_stroke = 1;
inline bool StrokePresetDataArchive::has_horizontal_stroke() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StrokePresetDataArchive::set_has_horizontal_stroke() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StrokePresetDataArchive::clear_has_horizontal_stroke() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StrokePresetDataArchive::clear_horizontal_stroke() {
  if (horizontal_stroke_ != NULL) horizontal_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::horizontal_stroke() const {
  return horizontal_stroke_ != NULL ? *horizontal_stroke_ : *default_instance_->horizontal_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::mutable_horizontal_stroke() {
  set_has_horizontal_stroke();
  if (horizontal_stroke_ == NULL) horizontal_stroke_ = new ::TSD::StrokeArchive;
  return horizontal_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::release_horizontal_stroke() {
  clear_has_horizontal_stroke();
  ::TSD::StrokeArchive* temp = horizontal_stroke_;
  horizontal_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive vertical_stroke = 2;
inline bool StrokePresetDataArchive::has_vertical_stroke() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StrokePresetDataArchive::set_has_vertical_stroke() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StrokePresetDataArchive::clear_has_vertical_stroke() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StrokePresetDataArchive::clear_vertical_stroke() {
  if (vertical_stroke_ != NULL) vertical_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_vertical_stroke();
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::vertical_stroke() const {
  return vertical_stroke_ != NULL ? *vertical_stroke_ : *default_instance_->vertical_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::mutable_vertical_stroke() {
  set_has_vertical_stroke();
  if (vertical_stroke_ == NULL) vertical_stroke_ = new ::TSD::StrokeArchive;
  return vertical_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::release_vertical_stroke() {
  clear_has_vertical_stroke();
  ::TSD::StrokeArchive* temp = vertical_stroke_;
  vertical_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive exterior_stroke = 3;
inline bool StrokePresetDataArchive::has_exterior_stroke() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StrokePresetDataArchive::set_has_exterior_stroke() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StrokePresetDataArchive::clear_has_exterior_stroke() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StrokePresetDataArchive::clear_exterior_stroke() {
  if (exterior_stroke_ != NULL) exterior_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_exterior_stroke();
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::exterior_stroke() const {
  return exterior_stroke_ != NULL ? *exterior_stroke_ : *default_instance_->exterior_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::mutable_exterior_stroke() {
  set_has_exterior_stroke();
  if (exterior_stroke_ == NULL) exterior_stroke_ = new ::TSD::StrokeArchive;
  return exterior_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::release_exterior_stroke() {
  clear_has_exterior_stroke();
  ::TSD::StrokeArchive* temp = exterior_stroke_;
  exterior_stroke_ = NULL;
  return temp;
}

// optional int32 visible_mask = 4;
inline bool StrokePresetDataArchive::has_visible_mask() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StrokePresetDataArchive::set_has_visible_mask() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StrokePresetDataArchive::clear_has_visible_mask() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StrokePresetDataArchive::clear_visible_mask() {
  visible_mask_ = 0;
  clear_has_visible_mask();
}
inline ::google::protobuf::int32 StrokePresetDataArchive::visible_mask() const {
  return visible_mask_;
}
inline void StrokePresetDataArchive::set_visible_mask(::google::protobuf::int32 value) {
  set_has_visible_mask();
  visible_mask_ = value;
}

// -------------------------------------------------------------------

// StrokePresetListArchive

// required int32 count = 1;
inline bool StrokePresetListArchive::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StrokePresetListArchive::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StrokePresetListArchive::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StrokePresetListArchive::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 StrokePresetListArchive::count() const {
  return count_;
}
inline void StrokePresetListArchive::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
inline int StrokePresetListArchive::deprecated_preset_size() const {
  return deprecated_preset_.size();
}
inline void StrokePresetListArchive::clear_deprecated_preset() {
  deprecated_preset_.Clear();
}
inline const ::TST::Deprecated_StrokePresetDataArchive& StrokePresetListArchive::deprecated_preset(int index) const {
  return deprecated_preset_.Get(index);
}
inline ::TST::Deprecated_StrokePresetDataArchive* StrokePresetListArchive::mutable_deprecated_preset(int index) {
  return deprecated_preset_.Mutable(index);
}
inline ::TST::Deprecated_StrokePresetDataArchive* StrokePresetListArchive::add_deprecated_preset() {
  return deprecated_preset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive >&
StrokePresetListArchive::deprecated_preset() const {
  return deprecated_preset_;
}
inline ::google::protobuf::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive >*
StrokePresetListArchive::mutable_deprecated_preset() {
  return &deprecated_preset_;
}

// repeated .TST.StrokePresetDataArchive preset = 3;
inline int StrokePresetListArchive::preset_size() const {
  return preset_.size();
}
inline void StrokePresetListArchive::clear_preset() {
  preset_.Clear();
}
inline const ::TST::StrokePresetDataArchive& StrokePresetListArchive::preset(int index) const {
  return preset_.Get(index);
}
inline ::TST::StrokePresetDataArchive* StrokePresetListArchive::mutable_preset(int index) {
  return preset_.Mutable(index);
}
inline ::TST::StrokePresetDataArchive* StrokePresetListArchive::add_preset() {
  return preset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TST::StrokePresetDataArchive >&
StrokePresetListArchive::preset() const {
  return preset_;
}
inline ::google::protobuf::RepeatedPtrField< ::TST::StrokePresetDataArchive >*
StrokePresetListArchive::mutable_preset() {
  return &preset_;
}

// -------------------------------------------------------------------

// TableStylePropertiesArchive

// optional bool banded_rows = 1;
inline bool TableStylePropertiesArchive::has_banded_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableStylePropertiesArchive::set_has_banded_rows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableStylePropertiesArchive::clear_has_banded_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableStylePropertiesArchive::clear_banded_rows() {
  banded_rows_ = false;
  clear_has_banded_rows();
}
inline bool TableStylePropertiesArchive::banded_rows() const {
  return banded_rows_;
}
inline void TableStylePropertiesArchive::set_banded_rows(bool value) {
  set_has_banded_rows();
  banded_rows_ = value;
}

// optional .TSD.FillArchive banded_fill = 2;
inline bool TableStylePropertiesArchive::has_banded_fill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableStylePropertiesArchive::set_has_banded_fill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableStylePropertiesArchive::clear_has_banded_fill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableStylePropertiesArchive::clear_banded_fill() {
  if (banded_fill_ != NULL) banded_fill_->::TSD::FillArchive::Clear();
  clear_has_banded_fill();
}
inline const ::TSD::FillArchive& TableStylePropertiesArchive::banded_fill() const {
  return banded_fill_ != NULL ? *banded_fill_ : *default_instance_->banded_fill_;
}
inline ::TSD::FillArchive* TableStylePropertiesArchive::mutable_banded_fill() {
  set_has_banded_fill();
  if (banded_fill_ == NULL) banded_fill_ = new ::TSD::FillArchive;
  return banded_fill_;
}
inline ::TSD::FillArchive* TableStylePropertiesArchive::release_banded_fill() {
  clear_has_banded_fill();
  ::TSD::FillArchive* temp = banded_fill_;
  banded_fill_ = NULL;
  return temp;
}

// optional bool behaves_like_spreadsheet = 21;
inline bool TableStylePropertiesArchive::has_behaves_like_spreadsheet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableStylePropertiesArchive::set_has_behaves_like_spreadsheet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableStylePropertiesArchive::clear_has_behaves_like_spreadsheet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableStylePropertiesArchive::clear_behaves_like_spreadsheet() {
  behaves_like_spreadsheet_ = false;
  clear_has_behaves_like_spreadsheet();
}
inline bool TableStylePropertiesArchive::behaves_like_spreadsheet() const {
  return behaves_like_spreadsheet_;
}
inline void TableStylePropertiesArchive::set_behaves_like_spreadsheet(bool value) {
  set_has_behaves_like_spreadsheet();
  behaves_like_spreadsheet_ = value;
}

// optional bool auto_resize = 22;
inline bool TableStylePropertiesArchive::has_auto_resize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TableStylePropertiesArchive::set_has_auto_resize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TableStylePropertiesArchive::clear_has_auto_resize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TableStylePropertiesArchive::clear_auto_resize() {
  auto_resize_ = false;
  clear_has_auto_resize();
}
inline bool TableStylePropertiesArchive::auto_resize() const {
  return auto_resize_;
}
inline void TableStylePropertiesArchive::set_auto_resize(bool value) {
  set_has_auto_resize();
  auto_resize_ = value;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
inline bool TableStylePropertiesArchive::has_deprecated_header_row_separator_stroke() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_header_row_separator_stroke() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_header_row_separator_stroke() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TableStylePropertiesArchive::clear_deprecated_header_row_separator_stroke() {
  if (deprecated_header_row_separator_stroke_ != NULL) deprecated_header_row_separator_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_header_row_separator_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_row_separator_stroke() const {
  return deprecated_header_row_separator_stroke_ != NULL ? *deprecated_header_row_separator_stroke_ : *default_instance_->deprecated_header_row_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_row_separator_stroke() {
  set_has_deprecated_header_row_separator_stroke();
  if (deprecated_header_row_separator_stroke_ == NULL) deprecated_header_row_separator_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_header_row_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_row_separator_stroke() {
  clear_has_deprecated_header_row_separator_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_separator_stroke_;
  deprecated_header_row_separator_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
inline bool TableStylePropertiesArchive::has_deprecated_header_row_border_stroke() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_header_row_border_stroke() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_header_row_border_stroke() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TableStylePropertiesArchive::clear_deprecated_header_row_border_stroke() {
  if (deprecated_header_row_border_stroke_ != NULL) deprecated_header_row_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_header_row_border_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_row_border_stroke() const {
  return deprecated_header_row_border_stroke_ != NULL ? *deprecated_header_row_border_stroke_ : *default_instance_->deprecated_header_row_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_row_border_stroke() {
  set_has_deprecated_header_row_border_stroke();
  if (deprecated_header_row_border_stroke_ == NULL) deprecated_header_row_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_header_row_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_row_border_stroke() {
  clear_has_deprecated_header_row_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_border_stroke_;
  deprecated_header_row_border_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
inline bool TableStylePropertiesArchive::has_deprecated_header_row_horizontal_stroke() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_header_row_horizontal_stroke() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_header_row_horizontal_stroke() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TableStylePropertiesArchive::clear_deprecated_header_row_horizontal_stroke() {
  if (deprecated_header_row_horizontal_stroke_ != NULL) deprecated_header_row_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_header_row_horizontal_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_row_horizontal_stroke() const {
  return deprecated_header_row_horizontal_stroke_ != NULL ? *deprecated_header_row_horizontal_stroke_ : *default_instance_->deprecated_header_row_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_row_horizontal_stroke() {
  set_has_deprecated_header_row_horizontal_stroke();
  if (deprecated_header_row_horizontal_stroke_ == NULL) deprecated_header_row_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_header_row_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_row_horizontal_stroke() {
  clear_has_deprecated_header_row_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_horizontal_stroke_;
  deprecated_header_row_horizontal_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
inline bool TableStylePropertiesArchive::has_deprecated_header_row_vertical_stroke() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_header_row_vertical_stroke() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_header_row_vertical_stroke() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TableStylePropertiesArchive::clear_deprecated_header_row_vertical_stroke() {
  if (deprecated_header_row_vertical_stroke_ != NULL) deprecated_header_row_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_header_row_vertical_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_row_vertical_stroke() const {
  return deprecated_header_row_vertical_stroke_ != NULL ? *deprecated_header_row_vertical_stroke_ : *default_instance_->deprecated_header_row_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_row_vertical_stroke() {
  set_has_deprecated_header_row_vertical_stroke();
  if (deprecated_header_row_vertical_stroke_ == NULL) deprecated_header_row_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_header_row_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_row_vertical_stroke() {
  clear_has_deprecated_header_row_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_vertical_stroke_;
  deprecated_header_row_vertical_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
inline bool TableStylePropertiesArchive::has_deprecated_header_column_border_stroke() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_header_column_border_stroke() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_header_column_border_stroke() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TableStylePropertiesArchive::clear_deprecated_header_column_border_stroke() {
  if (deprecated_header_column_border_stroke_ != NULL) deprecated_header_column_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_header_column_border_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_column_border_stroke() const {
  return deprecated_header_column_border_stroke_ != NULL ? *deprecated_header_column_border_stroke_ : *default_instance_->deprecated_header_column_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_column_border_stroke() {
  set_has_deprecated_header_column_border_stroke();
  if (deprecated_header_column_border_stroke_ == NULL) deprecated_header_column_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_header_column_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_column_border_stroke() {
  clear_has_deprecated_header_column_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_border_stroke_;
  deprecated_header_column_border_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
inline bool TableStylePropertiesArchive::has_deprecated_header_column_separator_stroke() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_header_column_separator_stroke() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_header_column_separator_stroke() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TableStylePropertiesArchive::clear_deprecated_header_column_separator_stroke() {
  if (deprecated_header_column_separator_stroke_ != NULL) deprecated_header_column_separator_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_header_column_separator_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_column_separator_stroke() const {
  return deprecated_header_column_separator_stroke_ != NULL ? *deprecated_header_column_separator_stroke_ : *default_instance_->deprecated_header_column_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_column_separator_stroke() {
  set_has_deprecated_header_column_separator_stroke();
  if (deprecated_header_column_separator_stroke_ == NULL) deprecated_header_column_separator_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_header_column_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_column_separator_stroke() {
  clear_has_deprecated_header_column_separator_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_separator_stroke_;
  deprecated_header_column_separator_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
inline bool TableStylePropertiesArchive::has_deprecated_header_column_horizontal_stroke() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_header_column_horizontal_stroke() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_header_column_horizontal_stroke() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TableStylePropertiesArchive::clear_deprecated_header_column_horizontal_stroke() {
  if (deprecated_header_column_horizontal_stroke_ != NULL) deprecated_header_column_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_header_column_horizontal_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_column_horizontal_stroke() const {
  return deprecated_header_column_horizontal_stroke_ != NULL ? *deprecated_header_column_horizontal_stroke_ : *default_instance_->deprecated_header_column_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_column_horizontal_stroke() {
  set_has_deprecated_header_column_horizontal_stroke();
  if (deprecated_header_column_horizontal_stroke_ == NULL) deprecated_header_column_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_header_column_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_column_horizontal_stroke() {
  clear_has_deprecated_header_column_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_horizontal_stroke_;
  deprecated_header_column_horizontal_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
inline bool TableStylePropertiesArchive::has_deprecated_header_column_vertical_stroke() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_header_column_vertical_stroke() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_header_column_vertical_stroke() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TableStylePropertiesArchive::clear_deprecated_header_column_vertical_stroke() {
  if (deprecated_header_column_vertical_stroke_ != NULL) deprecated_header_column_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_header_column_vertical_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_column_vertical_stroke() const {
  return deprecated_header_column_vertical_stroke_ != NULL ? *deprecated_header_column_vertical_stroke_ : *default_instance_->deprecated_header_column_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_column_vertical_stroke() {
  set_has_deprecated_header_column_vertical_stroke();
  if (deprecated_header_column_vertical_stroke_ == NULL) deprecated_header_column_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_header_column_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_column_vertical_stroke() {
  clear_has_deprecated_header_column_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_vertical_stroke_;
  deprecated_header_column_vertical_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
inline bool TableStylePropertiesArchive::has_deprecated_footer_row_separator_stroke() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_footer_row_separator_stroke() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_footer_row_separator_stroke() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TableStylePropertiesArchive::clear_deprecated_footer_row_separator_stroke() {
  if (deprecated_footer_row_separator_stroke_ != NULL) deprecated_footer_row_separator_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_footer_row_separator_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_footer_row_separator_stroke() const {
  return deprecated_footer_row_separator_stroke_ != NULL ? *deprecated_footer_row_separator_stroke_ : *default_instance_->deprecated_footer_row_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_footer_row_separator_stroke() {
  set_has_deprecated_footer_row_separator_stroke();
  if (deprecated_footer_row_separator_stroke_ == NULL) deprecated_footer_row_separator_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_footer_row_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_footer_row_separator_stroke() {
  clear_has_deprecated_footer_row_separator_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_separator_stroke_;
  deprecated_footer_row_separator_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
inline bool TableStylePropertiesArchive::has_deprecated_footer_row_border_stroke() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_footer_row_border_stroke() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_footer_row_border_stroke() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TableStylePropertiesArchive::clear_deprecated_footer_row_border_stroke() {
  if (deprecated_footer_row_border_stroke_ != NULL) deprecated_footer_row_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_footer_row_border_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_footer_row_border_stroke() const {
  return deprecated_footer_row_border_stroke_ != NULL ? *deprecated_footer_row_border_stroke_ : *default_instance_->deprecated_footer_row_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_footer_row_border_stroke() {
  set_has_deprecated_footer_row_border_stroke();
  if (deprecated_footer_row_border_stroke_ == NULL) deprecated_footer_row_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_footer_row_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_footer_row_border_stroke() {
  clear_has_deprecated_footer_row_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_border_stroke_;
  deprecated_footer_row_border_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
inline bool TableStylePropertiesArchive::has_deprecated_footer_row_horizontal_stroke() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_footer_row_horizontal_stroke() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_footer_row_horizontal_stroke() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TableStylePropertiesArchive::clear_deprecated_footer_row_horizontal_stroke() {
  if (deprecated_footer_row_horizontal_stroke_ != NULL) deprecated_footer_row_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_footer_row_horizontal_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_footer_row_horizontal_stroke() const {
  return deprecated_footer_row_horizontal_stroke_ != NULL ? *deprecated_footer_row_horizontal_stroke_ : *default_instance_->deprecated_footer_row_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_footer_row_horizontal_stroke() {
  set_has_deprecated_footer_row_horizontal_stroke();
  if (deprecated_footer_row_horizontal_stroke_ == NULL) deprecated_footer_row_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_footer_row_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_footer_row_horizontal_stroke() {
  clear_has_deprecated_footer_row_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_horizontal_stroke_;
  deprecated_footer_row_horizontal_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
inline bool TableStylePropertiesArchive::has_deprecated_footer_row_vertical_stroke() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_footer_row_vertical_stroke() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_footer_row_vertical_stroke() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TableStylePropertiesArchive::clear_deprecated_footer_row_vertical_stroke() {
  if (deprecated_footer_row_vertical_stroke_ != NULL) deprecated_footer_row_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_footer_row_vertical_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_footer_row_vertical_stroke() const {
  return deprecated_footer_row_vertical_stroke_ != NULL ? *deprecated_footer_row_vertical_stroke_ : *default_instance_->deprecated_footer_row_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_footer_row_vertical_stroke() {
  set_has_deprecated_footer_row_vertical_stroke();
  if (deprecated_footer_row_vertical_stroke_ == NULL) deprecated_footer_row_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_footer_row_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_footer_row_vertical_stroke() {
  clear_has_deprecated_footer_row_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_vertical_stroke_;
  deprecated_footer_row_vertical_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
inline bool TableStylePropertiesArchive::has_deprecated_table_body_horizontal_border_stroke() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_table_body_horizontal_border_stroke() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_table_body_horizontal_border_stroke() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TableStylePropertiesArchive::clear_deprecated_table_body_horizontal_border_stroke() {
  if (deprecated_table_body_horizontal_border_stroke_ != NULL) deprecated_table_body_horizontal_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_table_body_horizontal_border_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_table_body_horizontal_border_stroke() const {
  return deprecated_table_body_horizontal_border_stroke_ != NULL ? *deprecated_table_body_horizontal_border_stroke_ : *default_instance_->deprecated_table_body_horizontal_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_table_body_horizontal_border_stroke() {
  set_has_deprecated_table_body_horizontal_border_stroke();
  if (deprecated_table_body_horizontal_border_stroke_ == NULL) deprecated_table_body_horizontal_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_table_body_horizontal_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_table_body_horizontal_border_stroke() {
  clear_has_deprecated_table_body_horizontal_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_horizontal_border_stroke_;
  deprecated_table_body_horizontal_border_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
inline bool TableStylePropertiesArchive::has_deprecated_table_body_vertical_border_stroke() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_table_body_vertical_border_stroke() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_table_body_vertical_border_stroke() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TableStylePropertiesArchive::clear_deprecated_table_body_vertical_border_stroke() {
  if (deprecated_table_body_vertical_border_stroke_ != NULL) deprecated_table_body_vertical_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_table_body_vertical_border_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_table_body_vertical_border_stroke() const {
  return deprecated_table_body_vertical_border_stroke_ != NULL ? *deprecated_table_body_vertical_border_stroke_ : *default_instance_->deprecated_table_body_vertical_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_table_body_vertical_border_stroke() {
  set_has_deprecated_table_body_vertical_border_stroke();
  if (deprecated_table_body_vertical_border_stroke_ == NULL) deprecated_table_body_vertical_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_table_body_vertical_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_table_body_vertical_border_stroke() {
  clear_has_deprecated_table_body_vertical_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_vertical_border_stroke_;
  deprecated_table_body_vertical_border_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
inline bool TableStylePropertiesArchive::has_deprecated_table_body_horizontal_stroke() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_table_body_horizontal_stroke() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_table_body_horizontal_stroke() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TableStylePropertiesArchive::clear_deprecated_table_body_horizontal_stroke() {
  if (deprecated_table_body_horizontal_stroke_ != NULL) deprecated_table_body_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_table_body_horizontal_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_table_body_horizontal_stroke() const {
  return deprecated_table_body_horizontal_stroke_ != NULL ? *deprecated_table_body_horizontal_stroke_ : *default_instance_->deprecated_table_body_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_table_body_horizontal_stroke() {
  set_has_deprecated_table_body_horizontal_stroke();
  if (deprecated_table_body_horizontal_stroke_ == NULL) deprecated_table_body_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_table_body_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_table_body_horizontal_stroke() {
  clear_has_deprecated_table_body_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_horizontal_stroke_;
  deprecated_table_body_horizontal_stroke_ = NULL;
  return temp;
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
inline bool TableStylePropertiesArchive::has_deprecated_table_body_vertical_stroke() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_deprecated_table_body_vertical_stroke() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TableStylePropertiesArchive::clear_has_deprecated_table_body_vertical_stroke() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TableStylePropertiesArchive::clear_deprecated_table_body_vertical_stroke() {
  if (deprecated_table_body_vertical_stroke_ != NULL) deprecated_table_body_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
  clear_has_deprecated_table_body_vertical_stroke();
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_table_body_vertical_stroke() const {
  return deprecated_table_body_vertical_stroke_ != NULL ? *deprecated_table_body_vertical_stroke_ : *default_instance_->deprecated_table_body_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_table_body_vertical_stroke() {
  set_has_deprecated_table_body_vertical_stroke();
  if (deprecated_table_body_vertical_stroke_ == NULL) deprecated_table_body_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive;
  return deprecated_table_body_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_table_body_vertical_stroke() {
  clear_has_deprecated_table_body_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_vertical_stroke_;
  deprecated_table_body_vertical_stroke_ = NULL;
  return temp;
}

// optional .TST.StrokePresetListArchive stroke_preset_list = 32;
inline bool TableStylePropertiesArchive::has_stroke_preset_list() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_stroke_preset_list() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TableStylePropertiesArchive::clear_has_stroke_preset_list() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TableStylePropertiesArchive::clear_stroke_preset_list() {
  if (stroke_preset_list_ != NULL) stroke_preset_list_->::TST::StrokePresetListArchive::Clear();
  clear_has_stroke_preset_list();
}
inline const ::TST::StrokePresetListArchive& TableStylePropertiesArchive::stroke_preset_list() const {
  return stroke_preset_list_ != NULL ? *stroke_preset_list_ : *default_instance_->stroke_preset_list_;
}
inline ::TST::StrokePresetListArchive* TableStylePropertiesArchive::mutable_stroke_preset_list() {
  set_has_stroke_preset_list();
  if (stroke_preset_list_ == NULL) stroke_preset_list_ = new ::TST::StrokePresetListArchive;
  return stroke_preset_list_;
}
inline ::TST::StrokePresetListArchive* TableStylePropertiesArchive::release_stroke_preset_list() {
  clear_has_stroke_preset_list();
  ::TST::StrokePresetListArchive* temp = stroke_preset_list_;
  stroke_preset_list_ = NULL;
  return temp;
}

// optional bool v_strokes_visible = 33;
inline bool TableStylePropertiesArchive::has_v_strokes_visible() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_v_strokes_visible() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TableStylePropertiesArchive::clear_has_v_strokes_visible() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TableStylePropertiesArchive::clear_v_strokes_visible() {
  v_strokes_visible_ = false;
  clear_has_v_strokes_visible();
}
inline bool TableStylePropertiesArchive::v_strokes_visible() const {
  return v_strokes_visible_;
}
inline void TableStylePropertiesArchive::set_v_strokes_visible(bool value) {
  set_has_v_strokes_visible();
  v_strokes_visible_ = value;
}

// optional bool h_strokes_visible = 34;
inline bool TableStylePropertiesArchive::has_h_strokes_visible() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_h_strokes_visible() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TableStylePropertiesArchive::clear_has_h_strokes_visible() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TableStylePropertiesArchive::clear_h_strokes_visible() {
  h_strokes_visible_ = false;
  clear_has_h_strokes_visible();
}
inline bool TableStylePropertiesArchive::h_strokes_visible() const {
  return h_strokes_visible_;
}
inline void TableStylePropertiesArchive::set_h_strokes_visible(bool value) {
  set_has_h_strokes_visible();
  h_strokes_visible_ = value;
}

// optional bool hr_separator_visible = 35;
inline bool TableStylePropertiesArchive::has_hr_separator_visible() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_hr_separator_visible() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TableStylePropertiesArchive::clear_has_hr_separator_visible() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TableStylePropertiesArchive::clear_hr_separator_visible() {
  hr_separator_visible_ = false;
  clear_has_hr_separator_visible();
}
inline bool TableStylePropertiesArchive::hr_separator_visible() const {
  return hr_separator_visible_;
}
inline void TableStylePropertiesArchive::set_hr_separator_visible(bool value) {
  set_has_hr_separator_visible();
  hr_separator_visible_ = value;
}

// optional bool hc_separator_visible = 36;
inline bool TableStylePropertiesArchive::has_hc_separator_visible() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_hc_separator_visible() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TableStylePropertiesArchive::clear_has_hc_separator_visible() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TableStylePropertiesArchive::clear_hc_separator_visible() {
  hc_separator_visible_ = false;
  clear_has_hc_separator_visible();
}
inline bool TableStylePropertiesArchive::hc_separator_visible() const {
  return hc_separator_visible_;
}
inline void TableStylePropertiesArchive::set_hc_separator_visible(bool value) {
  set_has_hc_separator_visible();
  hc_separator_visible_ = value;
}

// optional bool footer_separator_visible = 37;
inline bool TableStylePropertiesArchive::has_footer_separator_visible() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_footer_separator_visible() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TableStylePropertiesArchive::clear_has_footer_separator_visible() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TableStylePropertiesArchive::clear_footer_separator_visible() {
  footer_separator_visible_ = false;
  clear_has_footer_separator_visible();
}
inline bool TableStylePropertiesArchive::footer_separator_visible() const {
  return footer_separator_visible_;
}
inline void TableStylePropertiesArchive::set_footer_separator_visible(bool value) {
  set_has_footer_separator_visible();
  footer_separator_visible_ = value;
}

// optional bool table_border_visible = 38;
inline bool TableStylePropertiesArchive::has_table_border_visible() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_border_visible() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TableStylePropertiesArchive::clear_has_table_border_visible() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TableStylePropertiesArchive::clear_table_border_visible() {
  table_border_visible_ = false;
  clear_has_table_border_visible();
}
inline bool TableStylePropertiesArchive::table_border_visible() const {
  return table_border_visible_;
}
inline void TableStylePropertiesArchive::set_table_border_visible(bool value) {
  set_has_table_border_visible();
  table_border_visible_ = value;
}

// optional bool table_header_border_visible = 39;
inline bool TableStylePropertiesArchive::has_table_header_border_visible() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_header_border_visible() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TableStylePropertiesArchive::clear_has_table_header_border_visible() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TableStylePropertiesArchive::clear_table_header_border_visible() {
  table_header_border_visible_ = false;
  clear_has_table_header_border_visible();
}
inline bool TableStylePropertiesArchive::table_header_border_visible() const {
  return table_header_border_visible_;
}
inline void TableStylePropertiesArchive::set_table_header_border_visible(bool value) {
  set_has_table_header_border_visible();
  table_header_border_visible_ = value;
}

// optional bool table_hc_divider_visible = 42;
inline bool TableStylePropertiesArchive::has_table_hc_divider_visible() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_hc_divider_visible() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TableStylePropertiesArchive::clear_has_table_hc_divider_visible() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TableStylePropertiesArchive::clear_table_hc_divider_visible() {
  table_hc_divider_visible_ = false;
  clear_has_table_hc_divider_visible();
}
inline bool TableStylePropertiesArchive::table_hc_divider_visible() const {
  return table_hc_divider_visible_;
}
inline void TableStylePropertiesArchive::set_table_hc_divider_visible(bool value) {
  set_has_table_hc_divider_visible();
  table_hc_divider_visible_ = value;
}

// optional bool table_hr_divider_visible = 43;
inline bool TableStylePropertiesArchive::has_table_hr_divider_visible() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_hr_divider_visible() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TableStylePropertiesArchive::clear_has_table_hr_divider_visible() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TableStylePropertiesArchive::clear_table_hr_divider_visible() {
  table_hr_divider_visible_ = false;
  clear_has_table_hr_divider_visible();
}
inline bool TableStylePropertiesArchive::table_hr_divider_visible() const {
  return table_hr_divider_visible_;
}
inline void TableStylePropertiesArchive::set_table_hr_divider_visible(bool value) {
  set_has_table_hr_divider_visible();
  table_hr_divider_visible_ = value;
}

// optional bool table_footer_divider_visible = 44;
inline bool TableStylePropertiesArchive::has_table_footer_divider_visible() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_footer_divider_visible() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TableStylePropertiesArchive::clear_has_table_footer_divider_visible() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TableStylePropertiesArchive::clear_table_footer_divider_visible() {
  table_footer_divider_visible_ = false;
  clear_has_table_footer_divider_visible();
}
inline bool TableStylePropertiesArchive::table_footer_divider_visible() const {
  return table_footer_divider_visible_;
}
inline void TableStylePropertiesArchive::set_table_footer_divider_visible(bool value) {
  set_has_table_footer_divider_visible();
  table_footer_divider_visible_ = value;
}

// optional int32 OBSOLETE_master_font_size = 40;
inline bool TableStylePropertiesArchive::has_obsolete_master_font_size() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_obsolete_master_font_size() {
  _has_bits_[0] |= 0x80000000u;
}
inline void TableStylePropertiesArchive::clear_has_obsolete_master_font_size() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void TableStylePropertiesArchive::clear_obsolete_master_font_size() {
  obsolete_master_font_size_ = 0;
  clear_has_obsolete_master_font_size();
}
inline ::google::protobuf::int32 TableStylePropertiesArchive::obsolete_master_font_size() const {
  return obsolete_master_font_size_;
}
inline void TableStylePropertiesArchive::set_obsolete_master_font_size(::google::protobuf::int32 value) {
  set_has_obsolete_master_font_size();
  obsolete_master_font_size_ = value;
}

// optional string master_font_family = 41;
inline bool TableStylePropertiesArchive::has_master_font_family() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TableStylePropertiesArchive::set_has_master_font_family() {
  _has_bits_[1] |= 0x00000001u;
}
inline void TableStylePropertiesArchive::clear_has_master_font_family() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void TableStylePropertiesArchive::clear_master_font_family() {
  if (master_font_family_ != &::google::protobuf::internal::kEmptyString) {
    master_font_family_->clear();
  }
  clear_has_master_font_family();
}
inline const ::std::string& TableStylePropertiesArchive::master_font_family() const {
  return *master_font_family_;
}
inline void TableStylePropertiesArchive::set_master_font_family(const ::std::string& value) {
  set_has_master_font_family();
  if (master_font_family_ == &::google::protobuf::internal::kEmptyString) {
    master_font_family_ = new ::std::string;
  }
  master_font_family_->assign(value);
}
inline void TableStylePropertiesArchive::set_master_font_family(const char* value) {
  set_has_master_font_family();
  if (master_font_family_ == &::google::protobuf::internal::kEmptyString) {
    master_font_family_ = new ::std::string;
  }
  master_font_family_->assign(value);
}
inline void TableStylePropertiesArchive::set_master_font_family(const char* value, size_t size) {
  set_has_master_font_family();
  if (master_font_family_ == &::google::protobuf::internal::kEmptyString) {
    master_font_family_ = new ::std::string;
  }
  master_font_family_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableStylePropertiesArchive::mutable_master_font_family() {
  set_has_master_font_family();
  if (master_font_family_ == &::google::protobuf::internal::kEmptyString) {
    master_font_family_ = new ::std::string;
  }
  return master_font_family_;
}
inline ::std::string* TableStylePropertiesArchive::release_master_font_family() {
  clear_has_master_font_family();
  if (master_font_family_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_font_family_;
    master_font_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .TSWP.WritingDirectionType writing_direction = 45;
inline bool TableStylePropertiesArchive::has_writing_direction() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void TableStylePropertiesArchive::set_has_writing_direction() {
  _has_bits_[1] |= 0x00000002u;
}
inline void TableStylePropertiesArchive::clear_has_writing_direction() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void TableStylePropertiesArchive::clear_writing_direction() {
  writing_direction_ = -1;
  clear_has_writing_direction();
}
inline TSWP::WritingDirectionType TableStylePropertiesArchive::writing_direction() const {
  return static_cast< TSWP::WritingDirectionType >(writing_direction_);
}
inline void TableStylePropertiesArchive::set_writing_direction(TSWP::WritingDirectionType value) {
  GOOGLE_DCHECK(TSWP::WritingDirectionType_IsValid(value));
  set_has_writing_direction();
  writing_direction_ = value;
}

// optional .TSD.StrokeArchive header_row_separator_stroke = 46;
inline bool TableStylePropertiesArchive::has_header_row_separator_stroke() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void TableStylePropertiesArchive::set_has_header_row_separator_stroke() {
  _has_bits_[1] |= 0x00000004u;
}
inline void TableStylePropertiesArchive::clear_has_header_row_separator_stroke() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void TableStylePropertiesArchive::clear_header_row_separator_stroke() {
  if (header_row_separator_stroke_ != NULL) header_row_separator_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_header_row_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_row_separator_stroke() const {
  return header_row_separator_stroke_ != NULL ? *header_row_separator_stroke_ : *default_instance_->header_row_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_row_separator_stroke() {
  set_has_header_row_separator_stroke();
  if (header_row_separator_stroke_ == NULL) header_row_separator_stroke_ = new ::TSD::StrokeArchive;
  return header_row_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_row_separator_stroke() {
  clear_has_header_row_separator_stroke();
  ::TSD::StrokeArchive* temp = header_row_separator_stroke_;
  header_row_separator_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive header_row_border_stroke = 47;
inline bool TableStylePropertiesArchive::has_header_row_border_stroke() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void TableStylePropertiesArchive::set_has_header_row_border_stroke() {
  _has_bits_[1] |= 0x00000008u;
}
inline void TableStylePropertiesArchive::clear_has_header_row_border_stroke() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void TableStylePropertiesArchive::clear_header_row_border_stroke() {
  if (header_row_border_stroke_ != NULL) header_row_border_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_header_row_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_row_border_stroke() const {
  return header_row_border_stroke_ != NULL ? *header_row_border_stroke_ : *default_instance_->header_row_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_row_border_stroke() {
  set_has_header_row_border_stroke();
  if (header_row_border_stroke_ == NULL) header_row_border_stroke_ = new ::TSD::StrokeArchive;
  return header_row_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_row_border_stroke() {
  clear_has_header_row_border_stroke();
  ::TSD::StrokeArchive* temp = header_row_border_stroke_;
  header_row_border_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
inline bool TableStylePropertiesArchive::has_header_row_horizontal_stroke() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void TableStylePropertiesArchive::set_has_header_row_horizontal_stroke() {
  _has_bits_[1] |= 0x00000010u;
}
inline void TableStylePropertiesArchive::clear_has_header_row_horizontal_stroke() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void TableStylePropertiesArchive::clear_header_row_horizontal_stroke() {
  if (header_row_horizontal_stroke_ != NULL) header_row_horizontal_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_header_row_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_row_horizontal_stroke() const {
  return header_row_horizontal_stroke_ != NULL ? *header_row_horizontal_stroke_ : *default_instance_->header_row_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_row_horizontal_stroke() {
  set_has_header_row_horizontal_stroke();
  if (header_row_horizontal_stroke_ == NULL) header_row_horizontal_stroke_ = new ::TSD::StrokeArchive;
  return header_row_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_row_horizontal_stroke() {
  clear_has_header_row_horizontal_stroke();
  ::TSD::StrokeArchive* temp = header_row_horizontal_stroke_;
  header_row_horizontal_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
inline bool TableStylePropertiesArchive::has_header_row_vertical_stroke() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void TableStylePropertiesArchive::set_has_header_row_vertical_stroke() {
  _has_bits_[1] |= 0x00000020u;
}
inline void TableStylePropertiesArchive::clear_has_header_row_vertical_stroke() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void TableStylePropertiesArchive::clear_header_row_vertical_stroke() {
  if (header_row_vertical_stroke_ != NULL) header_row_vertical_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_header_row_vertical_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_row_vertical_stroke() const {
  return header_row_vertical_stroke_ != NULL ? *header_row_vertical_stroke_ : *default_instance_->header_row_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_row_vertical_stroke() {
  set_has_header_row_vertical_stroke();
  if (header_row_vertical_stroke_ == NULL) header_row_vertical_stroke_ = new ::TSD::StrokeArchive;
  return header_row_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_row_vertical_stroke() {
  clear_has_header_row_vertical_stroke();
  ::TSD::StrokeArchive* temp = header_row_vertical_stroke_;
  header_row_vertical_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive header_column_border_stroke = 50;
inline bool TableStylePropertiesArchive::has_header_column_border_stroke() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void TableStylePropertiesArchive::set_has_header_column_border_stroke() {
  _has_bits_[1] |= 0x00000040u;
}
inline void TableStylePropertiesArchive::clear_has_header_column_border_stroke() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void TableStylePropertiesArchive::clear_header_column_border_stroke() {
  if (header_column_border_stroke_ != NULL) header_column_border_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_header_column_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_column_border_stroke() const {
  return header_column_border_stroke_ != NULL ? *header_column_border_stroke_ : *default_instance_->header_column_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_column_border_stroke() {
  set_has_header_column_border_stroke();
  if (header_column_border_stroke_ == NULL) header_column_border_stroke_ = new ::TSD::StrokeArchive;
  return header_column_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_column_border_stroke() {
  clear_has_header_column_border_stroke();
  ::TSD::StrokeArchive* temp = header_column_border_stroke_;
  header_column_border_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive header_column_separator_stroke = 51;
inline bool TableStylePropertiesArchive::has_header_column_separator_stroke() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void TableStylePropertiesArchive::set_has_header_column_separator_stroke() {
  _has_bits_[1] |= 0x00000080u;
}
inline void TableStylePropertiesArchive::clear_has_header_column_separator_stroke() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void TableStylePropertiesArchive::clear_header_column_separator_stroke() {
  if (header_column_separator_stroke_ != NULL) header_column_separator_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_header_column_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_column_separator_stroke() const {
  return header_column_separator_stroke_ != NULL ? *header_column_separator_stroke_ : *default_instance_->header_column_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_column_separator_stroke() {
  set_has_header_column_separator_stroke();
  if (header_column_separator_stroke_ == NULL) header_column_separator_stroke_ = new ::TSD::StrokeArchive;
  return header_column_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_column_separator_stroke() {
  clear_has_header_column_separator_stroke();
  ::TSD::StrokeArchive* temp = header_column_separator_stroke_;
  header_column_separator_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
inline bool TableStylePropertiesArchive::has_header_column_horizontal_stroke() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void TableStylePropertiesArchive::set_has_header_column_horizontal_stroke() {
  _has_bits_[1] |= 0x00000100u;
}
inline void TableStylePropertiesArchive::clear_has_header_column_horizontal_stroke() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void TableStylePropertiesArchive::clear_header_column_horizontal_stroke() {
  if (header_column_horizontal_stroke_ != NULL) header_column_horizontal_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_header_column_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_column_horizontal_stroke() const {
  return header_column_horizontal_stroke_ != NULL ? *header_column_horizontal_stroke_ : *default_instance_->header_column_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_column_horizontal_stroke() {
  set_has_header_column_horizontal_stroke();
  if (header_column_horizontal_stroke_ == NULL) header_column_horizontal_stroke_ = new ::TSD::StrokeArchive;
  return header_column_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_column_horizontal_stroke() {
  clear_has_header_column_horizontal_stroke();
  ::TSD::StrokeArchive* temp = header_column_horizontal_stroke_;
  header_column_horizontal_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
inline bool TableStylePropertiesArchive::has_header_column_vertical_stroke() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void TableStylePropertiesArchive::set_has_header_column_vertical_stroke() {
  _has_bits_[1] |= 0x00000200u;
}
inline void TableStylePropertiesArchive::clear_has_header_column_vertical_stroke() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void TableStylePropertiesArchive::clear_header_column_vertical_stroke() {
  if (header_column_vertical_stroke_ != NULL) header_column_vertical_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_header_column_vertical_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_column_vertical_stroke() const {
  return header_column_vertical_stroke_ != NULL ? *header_column_vertical_stroke_ : *default_instance_->header_column_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_column_vertical_stroke() {
  set_has_header_column_vertical_stroke();
  if (header_column_vertical_stroke_ == NULL) header_column_vertical_stroke_ = new ::TSD::StrokeArchive;
  return header_column_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_column_vertical_stroke() {
  clear_has_header_column_vertical_stroke();
  ::TSD::StrokeArchive* temp = header_column_vertical_stroke_;
  header_column_vertical_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
inline bool TableStylePropertiesArchive::has_footer_row_separator_stroke() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void TableStylePropertiesArchive::set_has_footer_row_separator_stroke() {
  _has_bits_[1] |= 0x00000400u;
}
inline void TableStylePropertiesArchive::clear_has_footer_row_separator_stroke() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void TableStylePropertiesArchive::clear_footer_row_separator_stroke() {
  if (footer_row_separator_stroke_ != NULL) footer_row_separator_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_footer_row_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::footer_row_separator_stroke() const {
  return footer_row_separator_stroke_ != NULL ? *footer_row_separator_stroke_ : *default_instance_->footer_row_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_footer_row_separator_stroke() {
  set_has_footer_row_separator_stroke();
  if (footer_row_separator_stroke_ == NULL) footer_row_separator_stroke_ = new ::TSD::StrokeArchive;
  return footer_row_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_footer_row_separator_stroke() {
  clear_has_footer_row_separator_stroke();
  ::TSD::StrokeArchive* temp = footer_row_separator_stroke_;
  footer_row_separator_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive footer_row_border_stroke = 55;
inline bool TableStylePropertiesArchive::has_footer_row_border_stroke() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void TableStylePropertiesArchive::set_has_footer_row_border_stroke() {
  _has_bits_[1] |= 0x00000800u;
}
inline void TableStylePropertiesArchive::clear_has_footer_row_border_stroke() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void TableStylePropertiesArchive::clear_footer_row_border_stroke() {
  if (footer_row_border_stroke_ != NULL) footer_row_border_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_footer_row_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::footer_row_border_stroke() const {
  return footer_row_border_stroke_ != NULL ? *footer_row_border_stroke_ : *default_instance_->footer_row_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_footer_row_border_stroke() {
  set_has_footer_row_border_stroke();
  if (footer_row_border_stroke_ == NULL) footer_row_border_stroke_ = new ::TSD::StrokeArchive;
  return footer_row_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_footer_row_border_stroke() {
  clear_has_footer_row_border_stroke();
  ::TSD::StrokeArchive* temp = footer_row_border_stroke_;
  footer_row_border_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
inline bool TableStylePropertiesArchive::has_footer_row_horizontal_stroke() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_footer_row_horizontal_stroke() {
  _has_bits_[1] |= 0x00001000u;
}
inline void TableStylePropertiesArchive::clear_has_footer_row_horizontal_stroke() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void TableStylePropertiesArchive::clear_footer_row_horizontal_stroke() {
  if (footer_row_horizontal_stroke_ != NULL) footer_row_horizontal_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_footer_row_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::footer_row_horizontal_stroke() const {
  return footer_row_horizontal_stroke_ != NULL ? *footer_row_horizontal_stroke_ : *default_instance_->footer_row_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_footer_row_horizontal_stroke() {
  set_has_footer_row_horizontal_stroke();
  if (footer_row_horizontal_stroke_ == NULL) footer_row_horizontal_stroke_ = new ::TSD::StrokeArchive;
  return footer_row_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_footer_row_horizontal_stroke() {
  clear_has_footer_row_horizontal_stroke();
  ::TSD::StrokeArchive* temp = footer_row_horizontal_stroke_;
  footer_row_horizontal_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
inline bool TableStylePropertiesArchive::has_footer_row_vertical_stroke() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_footer_row_vertical_stroke() {
  _has_bits_[1] |= 0x00002000u;
}
inline void TableStylePropertiesArchive::clear_has_footer_row_vertical_stroke() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void TableStylePropertiesArchive::clear_footer_row_vertical_stroke() {
  if (footer_row_vertical_stroke_ != NULL) footer_row_vertical_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_footer_row_vertical_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::footer_row_vertical_stroke() const {
  return footer_row_vertical_stroke_ != NULL ? *footer_row_vertical_stroke_ : *default_instance_->footer_row_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_footer_row_vertical_stroke() {
  set_has_footer_row_vertical_stroke();
  if (footer_row_vertical_stroke_ == NULL) footer_row_vertical_stroke_ = new ::TSD::StrokeArchive;
  return footer_row_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_footer_row_vertical_stroke() {
  clear_has_footer_row_vertical_stroke();
  ::TSD::StrokeArchive* temp = footer_row_vertical_stroke_;
  footer_row_vertical_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
inline bool TableStylePropertiesArchive::has_table_body_horizontal_border_stroke() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_body_horizontal_border_stroke() {
  _has_bits_[1] |= 0x00004000u;
}
inline void TableStylePropertiesArchive::clear_has_table_body_horizontal_border_stroke() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void TableStylePropertiesArchive::clear_table_body_horizontal_border_stroke() {
  if (table_body_horizontal_border_stroke_ != NULL) table_body_horizontal_border_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_table_body_horizontal_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::table_body_horizontal_border_stroke() const {
  return table_body_horizontal_border_stroke_ != NULL ? *table_body_horizontal_border_stroke_ : *default_instance_->table_body_horizontal_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_table_body_horizontal_border_stroke() {
  set_has_table_body_horizontal_border_stroke();
  if (table_body_horizontal_border_stroke_ == NULL) table_body_horizontal_border_stroke_ = new ::TSD::StrokeArchive;
  return table_body_horizontal_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_table_body_horizontal_border_stroke() {
  clear_has_table_body_horizontal_border_stroke();
  ::TSD::StrokeArchive* temp = table_body_horizontal_border_stroke_;
  table_body_horizontal_border_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
inline bool TableStylePropertiesArchive::has_table_body_vertical_border_stroke() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_body_vertical_border_stroke() {
  _has_bits_[1] |= 0x00008000u;
}
inline void TableStylePropertiesArchive::clear_has_table_body_vertical_border_stroke() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void TableStylePropertiesArchive::clear_table_body_vertical_border_stroke() {
  if (table_body_vertical_border_stroke_ != NULL) table_body_vertical_border_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_table_body_vertical_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::table_body_vertical_border_stroke() const {
  return table_body_vertical_border_stroke_ != NULL ? *table_body_vertical_border_stroke_ : *default_instance_->table_body_vertical_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_table_body_vertical_border_stroke() {
  set_has_table_body_vertical_border_stroke();
  if (table_body_vertical_border_stroke_ == NULL) table_body_vertical_border_stroke_ = new ::TSD::StrokeArchive;
  return table_body_vertical_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_table_body_vertical_border_stroke() {
  clear_has_table_body_vertical_border_stroke();
  ::TSD::StrokeArchive* temp = table_body_vertical_border_stroke_;
  table_body_vertical_border_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
inline bool TableStylePropertiesArchive::has_table_body_horizontal_stroke() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_body_horizontal_stroke() {
  _has_bits_[1] |= 0x00010000u;
}
inline void TableStylePropertiesArchive::clear_has_table_body_horizontal_stroke() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void TableStylePropertiesArchive::clear_table_body_horizontal_stroke() {
  if (table_body_horizontal_stroke_ != NULL) table_body_horizontal_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_table_body_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::table_body_horizontal_stroke() const {
  return table_body_horizontal_stroke_ != NULL ? *table_body_horizontal_stroke_ : *default_instance_->table_body_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_table_body_horizontal_stroke() {
  set_has_table_body_horizontal_stroke();
  if (table_body_horizontal_stroke_ == NULL) table_body_horizontal_stroke_ = new ::TSD::StrokeArchive;
  return table_body_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_table_body_horizontal_stroke() {
  clear_has_table_body_horizontal_stroke();
  ::TSD::StrokeArchive* temp = table_body_horizontal_stroke_;
  table_body_horizontal_stroke_ = NULL;
  return temp;
}

// optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
inline bool TableStylePropertiesArchive::has_table_body_vertical_stroke() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void TableStylePropertiesArchive::set_has_table_body_vertical_stroke() {
  _has_bits_[1] |= 0x00020000u;
}
inline void TableStylePropertiesArchive::clear_has_table_body_vertical_stroke() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void TableStylePropertiesArchive::clear_table_body_vertical_stroke() {
  if (table_body_vertical_stroke_ != NULL) table_body_vertical_stroke_->::TSD::StrokeArchive::Clear();
  clear_has_table_body_vertical_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::table_body_vertical_stroke() const {
  return table_body_vertical_stroke_ != NULL ? *table_body_vertical_stroke_ : *default_instance_->table_body_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_table_body_vertical_stroke() {
  set_has_table_body_vertical_stroke();
  if (table_body_vertical_stroke_ == NULL) table_body_vertical_stroke_ = new ::TSD::StrokeArchive;
  return table_body_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_table_body_vertical_stroke() {
  clear_has_table_body_vertical_stroke();
  ::TSD::StrokeArchive* temp = table_body_vertical_stroke_;
  table_body_vertical_stroke_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TableStylePresetArchive

// optional int32 index = 1;
inline bool TableStylePresetArchive::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableStylePresetArchive::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableStylePresetArchive::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableStylePresetArchive::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 TableStylePresetArchive::index() const {
  return index_;
}
inline void TableStylePresetArchive::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional .TSP.Reference image = 2;
inline bool TableStylePresetArchive::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableStylePresetArchive::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableStylePresetArchive::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableStylePresetArchive::clear_image() {
  if (image_ != NULL) image_->::TSP::Reference::Clear();
  clear_has_image();
}
inline const ::TSP::Reference& TableStylePresetArchive::image() const {
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::TSP::Reference* TableStylePresetArchive::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::TSP::Reference;
  return image_;
}
inline ::TSP::Reference* TableStylePresetArchive::release_image() {
  clear_has_image();
  ::TSP::Reference* temp = image_;
  image_ = NULL;
  return temp;
}

// optional .TSP.Reference style_network = 3;
inline bool TableStylePresetArchive::has_style_network() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableStylePresetArchive::set_has_style_network() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableStylePresetArchive::clear_has_style_network() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableStylePresetArchive::clear_style_network() {
  if (style_network_ != NULL) style_network_->::TSP::Reference::Clear();
  clear_has_style_network();
}
inline const ::TSP::Reference& TableStylePresetArchive::style_network() const {
  return style_network_ != NULL ? *style_network_ : *default_instance_->style_network_;
}
inline ::TSP::Reference* TableStylePresetArchive::mutable_style_network() {
  set_has_style_network();
  if (style_network_ == NULL) style_network_ = new ::TSP::Reference;
  return style_network_;
}
inline ::TSP::Reference* TableStylePresetArchive::release_style_network() {
  clear_has_style_network();
  ::TSP::Reference* temp = style_network_;
  style_network_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TableStrokePresetArchive

// required int32 index = 1;
inline bool TableStrokePresetArchive::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableStrokePresetArchive::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableStrokePresetArchive::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableStrokePresetArchive::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 TableStrokePresetArchive::index() const {
  return index_;
}
inline void TableStrokePresetArchive::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// ThemePresetsArchive

// repeated .TSP.Reference table_style_presets = 1;
inline int ThemePresetsArchive::table_style_presets_size() const {
  return table_style_presets_.size();
}
inline void ThemePresetsArchive::clear_table_style_presets() {
  table_style_presets_.Clear();
}
inline const ::TSP::Reference& ThemePresetsArchive::table_style_presets(int index) const {
  return table_style_presets_.Get(index);
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_table_style_presets(int index) {
  return table_style_presets_.Mutable(index);
}
inline ::TSP::Reference* ThemePresetsArchive::add_table_style_presets() {
  return table_style_presets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::table_style_presets() const {
  return table_style_presets_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_table_style_presets() {
  return &table_style_presets_;
}

// repeated .TSP.Reference table_cell_stroke_presets = 2;
inline int ThemePresetsArchive::table_cell_stroke_presets_size() const {
  return table_cell_stroke_presets_.size();
}
inline void ThemePresetsArchive::clear_table_cell_stroke_presets() {
  table_cell_stroke_presets_.Clear();
}
inline const ::TSP::Reference& ThemePresetsArchive::table_cell_stroke_presets(int index) const {
  return table_cell_stroke_presets_.Get(index);
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_table_cell_stroke_presets(int index) {
  return table_cell_stroke_presets_.Mutable(index);
}
inline ::TSP::Reference* ThemePresetsArchive::add_table_cell_stroke_presets() {
  return table_cell_stroke_presets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::table_cell_stroke_presets() const {
  return table_cell_stroke_presets_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_table_cell_stroke_presets() {
  return &table_cell_stroke_presets_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TST

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSTStylePropertyArchiving_2eproto__INCLUDED
