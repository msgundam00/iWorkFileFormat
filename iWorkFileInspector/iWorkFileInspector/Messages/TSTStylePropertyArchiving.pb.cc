// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSTStylePropertyArchiving.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TST {

namespace {

const ::google::protobuf::Descriptor* Deprecated_TableStrokeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Deprecated_TableStrokeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Deprecated_StrokePresetDataArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Deprecated_StrokePresetDataArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrokePresetDataArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrokePresetDataArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrokePresetListArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrokePresetListArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableStylePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableStylePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableStrokePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableStrokePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemePresetsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemePresetsArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto() {
  protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSTStylePropertyArchiving.proto");
  GOOGLE_CHECK(file != NULL);
  Deprecated_TableStrokeArchive_descriptor_ = file->message_type(0);
  static const int Deprecated_TableStrokeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_TableStrokeArchive, stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_TableStrokeArchive, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_TableStrokeArchive, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_TableStrokeArchive, empty_),
  };
  Deprecated_TableStrokeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Deprecated_TableStrokeArchive_descriptor_,
      Deprecated_TableStrokeArchive::default_instance_,
      Deprecated_TableStrokeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_TableStrokeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_TableStrokeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Deprecated_TableStrokeArchive));
  CellStylePropertiesArchive_descriptor_ = file->message_type(1);
  static const int CellStylePropertiesArchive_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, cell_fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, text_wrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, deprecated_top_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, deprecated_right_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, deprecated_bottom_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, deprecated_left_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, vertical_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, top_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, right_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, bottom_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, left_stroke_),
  };
  CellStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellStylePropertiesArchive_descriptor_,
      CellStylePropertiesArchive::default_instance_,
      CellStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellStylePropertiesArchive));
  Deprecated_StrokePresetDataArchive_descriptor_ = file->message_type(2);
  static const int Deprecated_StrokePresetDataArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_StrokePresetDataArchive, deprecated_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_StrokePresetDataArchive, deprecated_vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_StrokePresetDataArchive, deprecated_exterior_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_StrokePresetDataArchive, deprecated_visible_mask_),
  };
  Deprecated_StrokePresetDataArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Deprecated_StrokePresetDataArchive_descriptor_,
      Deprecated_StrokePresetDataArchive::default_instance_,
      Deprecated_StrokePresetDataArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_StrokePresetDataArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Deprecated_StrokePresetDataArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Deprecated_StrokePresetDataArchive));
  StrokePresetDataArchive_descriptor_ = file->message_type(3);
  static const int StrokePresetDataArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetDataArchive, horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetDataArchive, vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetDataArchive, exterior_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetDataArchive, visible_mask_),
  };
  StrokePresetDataArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrokePresetDataArchive_descriptor_,
      StrokePresetDataArchive::default_instance_,
      StrokePresetDataArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetDataArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetDataArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrokePresetDataArchive));
  StrokePresetListArchive_descriptor_ = file->message_type(4);
  static const int StrokePresetListArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetListArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetListArchive, deprecated_preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetListArchive, preset_),
  };
  StrokePresetListArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrokePresetListArchive_descriptor_,
      StrokePresetListArchive::default_instance_,
      StrokePresetListArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetListArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePresetListArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrokePresetListArchive));
  TableStylePropertiesArchive_descriptor_ = file->message_type(5);
  static const int TableStylePropertiesArchive_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, banded_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, banded_fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, behaves_like_spreadsheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, auto_resize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_header_row_separator_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_header_row_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_header_row_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_header_row_vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_header_column_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_header_column_separator_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_header_column_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_header_column_vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_footer_row_separator_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_footer_row_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_footer_row_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_footer_row_vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_table_body_horizontal_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_table_body_vertical_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_table_body_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, deprecated_table_body_vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, stroke_preset_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, v_strokes_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, h_strokes_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, hr_separator_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, hc_separator_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, footer_separator_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_border_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_header_border_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_hc_divider_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_hr_divider_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_footer_divider_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, obsolete_master_font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, master_font_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, writing_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, header_row_separator_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, header_row_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, header_row_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, header_row_vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, header_column_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, header_column_separator_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, header_column_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, header_column_vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, footer_row_separator_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, footer_row_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, footer_row_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, footer_row_vertical_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_body_horizontal_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_body_vertical_border_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_body_horizontal_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, table_body_vertical_stroke_),
  };
  TableStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableStylePropertiesArchive_descriptor_,
      TableStylePropertiesArchive::default_instance_,
      TableStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableStylePropertiesArchive));
  TableStylePresetArchive_descriptor_ = file->message_type(6);
  static const int TableStylePresetArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePresetArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePresetArchive, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePresetArchive, style_network_),
  };
  TableStylePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableStylePresetArchive_descriptor_,
      TableStylePresetArchive::default_instance_,
      TableStylePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStylePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableStylePresetArchive));
  TableStrokePresetArchive_descriptor_ = file->message_type(7);
  static const int TableStrokePresetArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStrokePresetArchive, index_),
  };
  TableStrokePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableStrokePresetArchive_descriptor_,
      TableStrokePresetArchive::default_instance_,
      TableStrokePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStrokePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStrokePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableStrokePresetArchive));
  ThemePresetsArchive_descriptor_ = file->message_type(8);
  static const int ThemePresetsArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, table_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, table_cell_stroke_presets_),
  };
  ThemePresetsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemePresetsArchive_descriptor_,
      ThemePresetsArchive::default_instance_,
      ThemePresetsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemePresetsArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSTStylePropertyArchiving_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Deprecated_TableStrokeArchive_descriptor_, &Deprecated_TableStrokeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellStylePropertiesArchive_descriptor_, &CellStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Deprecated_StrokePresetDataArchive_descriptor_, &Deprecated_StrokePresetDataArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrokePresetDataArchive_descriptor_, &StrokePresetDataArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrokePresetListArchive_descriptor_, &StrokePresetListArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableStylePropertiesArchive_descriptor_, &TableStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableStylePresetArchive_descriptor_, &TableStylePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableStrokePresetArchive_descriptor_, &TableStrokePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemePresetsArchive_descriptor_, &ThemePresetsArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto() {
  delete Deprecated_TableStrokeArchive::default_instance_;
  delete Deprecated_TableStrokeArchive_reflection_;
  delete CellStylePropertiesArchive::default_instance_;
  delete CellStylePropertiesArchive_reflection_;
  delete Deprecated_StrokePresetDataArchive::default_instance_;
  delete Deprecated_StrokePresetDataArchive_reflection_;
  delete StrokePresetDataArchive::default_instance_;
  delete StrokePresetDataArchive_reflection_;
  delete StrokePresetListArchive::default_instance_;
  delete StrokePresetListArchive_reflection_;
  delete TableStylePropertiesArchive::default_instance_;
  delete TableStylePropertiesArchive_reflection_;
  delete TableStylePresetArchive::default_instance_;
  delete TableStylePresetArchive_reflection_;
  delete TableStrokePresetArchive::default_instance_;
  delete TableStrokePresetArchive_reflection_;
  delete ThemePresetsArchive::default_instance_;
  delete ThemePresetsArchive_reflection_;
}

void protobuf_AddDesc_TSTStylePropertyArchiving_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037TSTStylePropertyArchiving.proto\022\003TST\032\021"
    "TSPMessages.proto\032\021TSDArchives.proto\032\021TS"
    "KArchives.proto\032\021TSSArchives.proto\032\022TSWP"
    "Archives.proto\"\203\001\n\035Deprecated_TableStrok"
    "eArchive\022\"\n\006stroke\030\001 \001(\0132\022.TSD.StrokeArc"
    "hive\022\026\n\nbackground\030\002 \001(\010B\002\030\001\022\023\n\007opacity\030"
    "\003 \001(\002B\002\030\001\022\021\n\005empty\030\004 \001(\010B\002\030\001\"\317\004\n\032CellSty"
    "lePropertiesArchive\022#\n\tcell_fill\030\001 \001(\0132\020"
    ".TSD.FillArchive\022\021\n\ttext_wrap\030\003 \001(\010\022A\n\025d"
    "eprecated_top_stroke\030\004 \001(\0132\".TST.Depreca"
    "ted_TableStrokeArchive\022C\n\027deprecated_rig"
    "ht_stroke\030\005 \001(\0132\".TST.Deprecated_TableSt"
    "rokeArchive\022D\n\030deprecated_bottom_stroke\030"
    "\006 \001(\0132\".TST.Deprecated_TableStrokeArchiv"
    "e\022B\n\026deprecated_left_stroke\030\007 \001(\0132\".TST."
    "Deprecated_TableStrokeArchive\022\032\n\022vertica"
    "l_alignment\030\010 \001(\005\022%\n\007padding\030\t \001(\0132\024.TSW"
    "P.PaddingArchive\022&\n\ntop_stroke\030\n \001(\0132\022.T"
    "SD.StrokeArchive\022(\n\014right_stroke\030\013 \001(\0132\022"
    ".TSD.StrokeArchive\022)\n\rbottom_stroke\030\014 \001("
    "\0132\022.TSD.StrokeArchive\022\'\n\013left_stroke\030\r \001"
    "(\0132\022.TSD.StrokeArchive\"\237\002\n\"Deprecated_St"
    "rokePresetDataArchive\022H\n\034deprecated_hori"
    "zontal_stroke\030\002 \002(\0132\".TST.Deprecated_Tab"
    "leStrokeArchive\022F\n\032deprecated_vertical_s"
    "troke\030\001 \002(\0132\".TST.Deprecated_TableStroke"
    "Archive\022F\n\032deprecated_exterior_stroke\030\003 "
    "\002(\0132\".TST.Deprecated_TableStrokeArchive\022"
    "\037\n\027deprecated_visible_mask\030\005 \002(\005\"\270\001\n\027Str"
    "okePresetDataArchive\022-\n\021horizontal_strok"
    "e\030\001 \001(\0132\022.TSD.StrokeArchive\022+\n\017vertical_"
    "stroke\030\002 \001(\0132\022.TSD.StrokeArchive\022+\n\017exte"
    "rior_stroke\030\003 \001(\0132\022.TSD.StrokeArchive\022\024\n"
    "\014visible_mask\030\004 \001(\005\"\232\001\n\027StrokePresetList"
    "Archive\022\r\n\005count\030\001 \002(\005\022B\n\021deprecated_pre"
    "set\030\002 \003(\0132\'.TST.Deprecated_StrokePresetD"
    "ataArchive\022,\n\006preset\030\003 \003(\0132\034.TST.StrokeP"
    "resetDataArchive\"\363\026\n\033TableStylePropertie"
    "sArchive\022\023\n\013banded_rows\030\001 \001(\010\022%\n\013banded_"
    "fill\030\002 \001(\0132\020.TSD.FillArchive\022 \n\030behaves_"
    "like_spreadsheet\030\025 \001(\010\022\023\n\013auto_resize\030\026 "
    "\001(\010\022R\n&deprecated_header_row_separator_s"
    "troke\030\004 \001(\0132\".TST.Deprecated_TableStroke"
    "Archive\022O\n#deprecated_header_row_border_"
    "stroke\030\005 \001(\0132\".TST.Deprecated_TableStrok"
    "eArchive\022S\n\'deprecated_header_row_horizo"
    "ntal_stroke\030\027 \001(\0132\".TST.Deprecated_Table"
    "StrokeArchive\022Q\n%deprecated_header_row_v"
    "ertical_stroke\030\030 \001(\0132\".TST.Deprecated_Ta"
    "bleStrokeArchive\022R\n&deprecated_header_co"
    "lumn_border_stroke\030\007 \001(\0132\".TST.Deprecate"
    "d_TableStrokeArchive\022U\n)deprecated_heade"
    "r_column_separator_stroke\030\010 \001(\0132\".TST.De"
    "precated_TableStrokeArchive\022V\n*deprecate"
    "d_header_column_horizontal_stroke\030\031 \001(\0132"
    "\".TST.Deprecated_TableStrokeArchive\022T\n(d"
    "eprecated_header_column_vertical_stroke\030"
    "\032 \001(\0132\".TST.Deprecated_TableStrokeArchiv"
    "e\022R\n&deprecated_footer_row_separator_str"
    "oke\030\n \001(\0132\".TST.Deprecated_TableStrokeAr"
    "chive\022O\n#deprecated_footer_row_border_st"
    "roke\030\013 \001(\0132\".TST.Deprecated_TableStrokeA"
    "rchive\022S\n\'deprecated_footer_row_horizont"
    "al_stroke\030\033 \001(\0132\".TST.Deprecated_TableSt"
    "rokeArchive\022Q\n%deprecated_footer_row_ver"
    "tical_stroke\030\034 \001(\0132\".TST.Deprecated_Tabl"
    "eStrokeArchive\022Z\n.deprecated_table_body_"
    "horizontal_border_stroke\030\014 \001(\0132\".TST.Dep"
    "recated_TableStrokeArchive\022X\n,deprecated"
    "_table_body_vertical_border_stroke\030\035 \001(\013"
    "2\".TST.Deprecated_TableStrokeArchive\022S\n\'"
    "deprecated_table_body_horizontal_stroke\030"
    "\036 \001(\0132\".TST.Deprecated_TableStrokeArchiv"
    "e\022Q\n%deprecated_table_body_vertical_stro"
    "ke\030\037 \001(\0132\".TST.Deprecated_TableStrokeArc"
    "hive\0228\n\022stroke_preset_list\030  \001(\0132\034.TST.S"
    "trokePresetListArchive\022\031\n\021v_strokes_visi"
    "ble\030! \001(\010\022\031\n\021h_strokes_visible\030\" \001(\010\022\034\n\024"
    "hr_separator_visible\030# \001(\010\022\034\n\024hc_separat"
    "or_visible\030$ \001(\010\022 \n\030footer_separator_vis"
    "ible\030% \001(\010\022\034\n\024table_border_visible\030& \001(\010"
    "\022#\n\033table_header_border_visible\030\' \001(\010\022 \n"
    "\030table_hc_divider_visible\030* \001(\010\022 \n\030table"
    "_hr_divider_visible\030+ \001(\010\022$\n\034table_foote"
    "r_divider_visible\030, \001(\010\022!\n\031OBSOLETE_mast"
    "er_font_size\030( \001(\005\022\032\n\022master_font_family"
    "\030) \001(\t\0225\n\021writing_direction\030- \001(\0162\032.TSWP"
    ".WritingDirectionType\0227\n\033header_row_sepa"
    "rator_stroke\030. \001(\0132\022.TSD.StrokeArchive\0224"
    "\n\030header_row_border_stroke\030/ \001(\0132\022.TSD.S"
    "trokeArchive\0228\n\034header_row_horizontal_st"
    "roke\0300 \001(\0132\022.TSD.StrokeArchive\0226\n\032header"
    "_row_vertical_stroke\0301 \001(\0132\022.TSD.StrokeA"
    "rchive\0227\n\033header_column_border_stroke\0302 "
    "\001(\0132\022.TSD.StrokeArchive\022:\n\036header_column"
    "_separator_stroke\0303 \001(\0132\022.TSD.StrokeArch"
    "ive\022;\n\037header_column_horizontal_stroke\0304"
    " \001(\0132\022.TSD.StrokeArchive\0229\n\035header_colum"
    "n_vertical_stroke\0305 \001(\0132\022.TSD.StrokeArch"
    "ive\0227\n\033footer_row_separator_stroke\0306 \001(\013"
    "2\022.TSD.StrokeArchive\0224\n\030footer_row_borde"
    "r_stroke\0307 \001(\0132\022.TSD.StrokeArchive\0228\n\034fo"
    "oter_row_horizontal_stroke\0308 \001(\0132\022.TSD.S"
    "trokeArchive\0226\n\032footer_row_vertical_stro"
    "ke\0309 \001(\0132\022.TSD.StrokeArchive\022\?\n#table_bo"
    "dy_horizontal_border_stroke\030: \001(\0132\022.TSD."
    "StrokeArchive\022=\n!table_body_vertical_bor"
    "der_stroke\030; \001(\0132\022.TSD.StrokeArchive\0228\n\034"
    "table_body_horizontal_stroke\030< \001(\0132\022.TSD"
    ".StrokeArchive\0226\n\032table_body_vertical_st"
    "roke\030= \001(\0132\022.TSD.StrokeArchive\"n\n\027TableS"
    "tylePresetArchive\022\r\n\005index\030\001 \001(\005\022\035\n\005imag"
    "e\030\002 \001(\0132\016.TSP.Reference\022%\n\rstyle_network"
    "\030\003 \001(\0132\016.TSP.Reference\")\n\030TableStrokePre"
    "setArchive\022\r\n\005index\030\001 \002(\005\"\266\001\n\023ThemePrese"
    "tsArchive\022+\n\023table_style_presets\030\001 \003(\0132\016"
    ".TSP.Reference\0221\n\031table_cell_stroke_pres"
    "ets\030\002 \003(\0132\016.TSP.Reference2\?\n\textension\022\021"
    ".TSS.ThemeArchive\030\310\001 \002(\0132\030.TST.ThemePres"
    "etsArchive", 4770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSTStylePropertyArchiving.proto", &protobuf_RegisterTypes);
  Deprecated_TableStrokeArchive::default_instance_ = new Deprecated_TableStrokeArchive();
  CellStylePropertiesArchive::default_instance_ = new CellStylePropertiesArchive();
  Deprecated_StrokePresetDataArchive::default_instance_ = new Deprecated_StrokePresetDataArchive();
  StrokePresetDataArchive::default_instance_ = new StrokePresetDataArchive();
  StrokePresetListArchive::default_instance_ = new StrokePresetListArchive();
  TableStylePropertiesArchive::default_instance_ = new TableStylePropertiesArchive();
  TableStylePresetArchive::default_instance_ = new TableStylePresetArchive();
  TableStrokePresetArchive::default_instance_ = new TableStrokePresetArchive();
  ThemePresetsArchive::default_instance_ = new ThemePresetsArchive();
  Deprecated_TableStrokeArchive::default_instance_->InitAsDefaultInstance();
  CellStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  Deprecated_StrokePresetDataArchive::default_instance_->InitAsDefaultInstance();
  StrokePresetDataArchive::default_instance_->InitAsDefaultInstance();
  StrokePresetListArchive::default_instance_->InitAsDefaultInstance();
  TableStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  TableStylePresetArchive::default_instance_->InitAsDefaultInstance();
  TableStrokePresetArchive::default_instance_->InitAsDefaultInstance();
  ThemePresetsArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSS::ThemeArchive::default_instance(),
    200, 11, false, false,
    &::TST::ThemePresetsArchive::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSTStylePropertyArchiving_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSTStylePropertyArchiving_2eproto {
  StaticDescriptorInitializer_TSTStylePropertyArchiving_2eproto() {
    protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();
  }
} static_descriptor_initializer_TSTStylePropertyArchiving_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Deprecated_TableStrokeArchive::kStrokeFieldNumber;
const int Deprecated_TableStrokeArchive::kBackgroundFieldNumber;
const int Deprecated_TableStrokeArchive::kOpacityFieldNumber;
const int Deprecated_TableStrokeArchive::kEmptyFieldNumber;
#endif  // !_MSC_VER

Deprecated_TableStrokeArchive::Deprecated_TableStrokeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Deprecated_TableStrokeArchive::InitAsDefaultInstance() {
  stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

Deprecated_TableStrokeArchive::Deprecated_TableStrokeArchive(const Deprecated_TableStrokeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Deprecated_TableStrokeArchive::SharedCtor() {
  _cached_size_ = 0;
  stroke_ = NULL;
  background_ = false;
  opacity_ = 0;
  empty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Deprecated_TableStrokeArchive::~Deprecated_TableStrokeArchive() {
  SharedDtor();
}

void Deprecated_TableStrokeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete stroke_;
  }
}

void Deprecated_TableStrokeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Deprecated_TableStrokeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Deprecated_TableStrokeArchive_descriptor_;
}

const Deprecated_TableStrokeArchive& Deprecated_TableStrokeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

Deprecated_TableStrokeArchive* Deprecated_TableStrokeArchive::default_instance_ = NULL;

Deprecated_TableStrokeArchive* Deprecated_TableStrokeArchive::New() const {
  return new Deprecated_TableStrokeArchive;
}

void Deprecated_TableStrokeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroke()) {
      if (stroke_ != NULL) stroke_->::TSD::StrokeArchive::Clear();
    }
    background_ = false;
    opacity_ = 0;
    empty_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Deprecated_TableStrokeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.StrokeArchive stroke = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_background;
        break;
      }
      
      // optional bool background = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &background_)));
          set_has_background();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_opacity;
        break;
      }
      
      // optional float opacity = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_empty;
        break;
      }
      
      // optional bool empty = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Deprecated_TableStrokeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.StrokeArchive stroke = 1;
  if (has_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroke(), output);
  }
  
  // optional bool background = 2 [deprecated = true];
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->background(), output);
  }
  
  // optional float opacity = 3 [deprecated = true];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->opacity(), output);
  }
  
  // optional bool empty = 4 [deprecated = true];
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->empty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Deprecated_TableStrokeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.StrokeArchive stroke = 1;
  if (has_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroke(), target);
  }
  
  // optional bool background = 2 [deprecated = true];
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->background(), target);
  }
  
  // optional float opacity = 3 [deprecated = true];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->opacity(), target);
  }
  
  // optional bool empty = 4 [deprecated = true];
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->empty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Deprecated_TableStrokeArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.StrokeArchive stroke = 1;
    if (has_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroke());
    }
    
    // optional bool background = 2 [deprecated = true];
    if (has_background()) {
      total_size += 1 + 1;
    }
    
    // optional float opacity = 3 [deprecated = true];
    if (has_opacity()) {
      total_size += 1 + 4;
    }
    
    // optional bool empty = 4 [deprecated = true];
    if (has_empty()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Deprecated_TableStrokeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Deprecated_TableStrokeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Deprecated_TableStrokeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Deprecated_TableStrokeArchive::MergeFrom(const Deprecated_TableStrokeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroke()) {
      mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from.stroke());
    }
    if (from.has_background()) {
      set_background(from.background());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_empty()) {
      set_empty(from.empty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Deprecated_TableStrokeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deprecated_TableStrokeArchive::CopyFrom(const Deprecated_TableStrokeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deprecated_TableStrokeArchive::IsInitialized() const {
  
  if (has_stroke()) {
    if (!this->stroke().IsInitialized()) return false;
  }
  return true;
}

void Deprecated_TableStrokeArchive::Swap(Deprecated_TableStrokeArchive* other) {
  if (other != this) {
    std::swap(stroke_, other->stroke_);
    std::swap(background_, other->background_);
    std::swap(opacity_, other->opacity_);
    std::swap(empty_, other->empty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Deprecated_TableStrokeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Deprecated_TableStrokeArchive_descriptor_;
  metadata.reflection = Deprecated_TableStrokeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellStylePropertiesArchive::kCellFillFieldNumber;
const int CellStylePropertiesArchive::kTextWrapFieldNumber;
const int CellStylePropertiesArchive::kDeprecatedTopStrokeFieldNumber;
const int CellStylePropertiesArchive::kDeprecatedRightStrokeFieldNumber;
const int CellStylePropertiesArchive::kDeprecatedBottomStrokeFieldNumber;
const int CellStylePropertiesArchive::kDeprecatedLeftStrokeFieldNumber;
const int CellStylePropertiesArchive::kVerticalAlignmentFieldNumber;
const int CellStylePropertiesArchive::kPaddingFieldNumber;
const int CellStylePropertiesArchive::kTopStrokeFieldNumber;
const int CellStylePropertiesArchive::kRightStrokeFieldNumber;
const int CellStylePropertiesArchive::kBottomStrokeFieldNumber;
const int CellStylePropertiesArchive::kLeftStrokeFieldNumber;
#endif  // !_MSC_VER

CellStylePropertiesArchive::CellStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellStylePropertiesArchive::InitAsDefaultInstance() {
  cell_fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  deprecated_top_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_right_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_bottom_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_left_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  padding_ = const_cast< ::TSWP::PaddingArchive*>(&::TSWP::PaddingArchive::default_instance());
  top_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  right_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  bottom_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  left_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

CellStylePropertiesArchive::CellStylePropertiesArchive(const CellStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  cell_fill_ = NULL;
  text_wrap_ = false;
  deprecated_top_stroke_ = NULL;
  deprecated_right_stroke_ = NULL;
  deprecated_bottom_stroke_ = NULL;
  deprecated_left_stroke_ = NULL;
  vertical_alignment_ = 0;
  padding_ = NULL;
  top_stroke_ = NULL;
  right_stroke_ = NULL;
  bottom_stroke_ = NULL;
  left_stroke_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellStylePropertiesArchive::~CellStylePropertiesArchive() {
  SharedDtor();
}

void CellStylePropertiesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cell_fill_;
    delete deprecated_top_stroke_;
    delete deprecated_right_stroke_;
    delete deprecated_bottom_stroke_;
    delete deprecated_left_stroke_;
    delete padding_;
    delete top_stroke_;
    delete right_stroke_;
    delete bottom_stroke_;
    delete left_stroke_;
  }
}

void CellStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellStylePropertiesArchive_descriptor_;
}

const CellStylePropertiesArchive& CellStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

CellStylePropertiesArchive* CellStylePropertiesArchive::default_instance_ = NULL;

CellStylePropertiesArchive* CellStylePropertiesArchive::New() const {
  return new CellStylePropertiesArchive;
}

void CellStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cell_fill()) {
      if (cell_fill_ != NULL) cell_fill_->::TSD::FillArchive::Clear();
    }
    text_wrap_ = false;
    if (has_deprecated_top_stroke()) {
      if (deprecated_top_stroke_ != NULL) deprecated_top_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_right_stroke()) {
      if (deprecated_right_stroke_ != NULL) deprecated_right_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_bottom_stroke()) {
      if (deprecated_bottom_stroke_ != NULL) deprecated_bottom_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_left_stroke()) {
      if (deprecated_left_stroke_ != NULL) deprecated_left_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    vertical_alignment_ = 0;
    if (has_padding()) {
      if (padding_ != NULL) padding_->::TSWP::PaddingArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_top_stroke()) {
      if (top_stroke_ != NULL) top_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_right_stroke()) {
      if (right_stroke_ != NULL) right_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_bottom_stroke()) {
      if (bottom_stroke_ != NULL) bottom_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_left_stroke()) {
      if (left_stroke_ != NULL) left_stroke_->::TSD::StrokeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.FillArchive cell_fill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_text_wrap;
        break;
      }
      
      // optional bool text_wrap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_wrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &text_wrap_)));
          set_has_text_wrap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deprecated_top_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_top_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_top_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deprecated_right_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_right_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_right_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deprecated_bottom_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_bottom_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_bottom_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deprecated_left_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_left_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_left_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vertical_alignment;
        break;
      }
      
      // optional int32 vertical_alignment = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertical_alignment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_alignment_)));
          set_has_vertical_alignment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_padding;
        break;
      }
      
      // optional .TSWP.PaddingArchive padding = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_padding()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_top_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive top_stroke = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_right_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive right_stroke = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bottom_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive bottom_stroke = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottom_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_left_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive left_stroke = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.FillArchive cell_fill = 1;
  if (has_cell_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_fill(), output);
  }
  
  // optional bool text_wrap = 3;
  if (has_text_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->text_wrap(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
  if (has_deprecated_top_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->deprecated_top_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
  if (has_deprecated_right_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->deprecated_right_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
  if (has_deprecated_bottom_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deprecated_bottom_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
  if (has_deprecated_left_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deprecated_left_stroke(), output);
  }
  
  // optional int32 vertical_alignment = 8;
  if (has_vertical_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vertical_alignment(), output);
  }
  
  // optional .TSWP.PaddingArchive padding = 9;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->padding(), output);
  }
  
  // optional .TSD.StrokeArchive top_stroke = 10;
  if (has_top_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->top_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive right_stroke = 11;
  if (has_right_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->right_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive bottom_stroke = 12;
  if (has_bottom_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->bottom_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive left_stroke = 13;
  if (has_left_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->left_stroke(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.FillArchive cell_fill = 1;
  if (has_cell_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_fill(), target);
  }
  
  // optional bool text_wrap = 3;
  if (has_text_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->text_wrap(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
  if (has_deprecated_top_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->deprecated_top_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
  if (has_deprecated_right_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->deprecated_right_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
  if (has_deprecated_bottom_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deprecated_bottom_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
  if (has_deprecated_left_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deprecated_left_stroke(), target);
  }
  
  // optional int32 vertical_alignment = 8;
  if (has_vertical_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vertical_alignment(), target);
  }
  
  // optional .TSWP.PaddingArchive padding = 9;
  if (has_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->padding(), target);
  }
  
  // optional .TSD.StrokeArchive top_stroke = 10;
  if (has_top_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->top_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive right_stroke = 11;
  if (has_right_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->right_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive bottom_stroke = 12;
  if (has_bottom_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->bottom_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive left_stroke = 13;
  if (has_left_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->left_stroke(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellStylePropertiesArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.FillArchive cell_fill = 1;
    if (has_cell_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_fill());
    }
    
    // optional bool text_wrap = 3;
    if (has_text_wrap()) {
      total_size += 1 + 1;
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
    if (has_deprecated_top_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_top_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
    if (has_deprecated_right_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_right_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
    if (has_deprecated_bottom_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_bottom_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
    if (has_deprecated_left_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_left_stroke());
    }
    
    // optional int32 vertical_alignment = 8;
    if (has_vertical_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_alignment());
    }
    
    // optional .TSWP.PaddingArchive padding = 9;
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->padding());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSD.StrokeArchive top_stroke = 10;
    if (has_top_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_stroke());
    }
    
    // optional .TSD.StrokeArchive right_stroke = 11;
    if (has_right_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_stroke());
    }
    
    // optional .TSD.StrokeArchive bottom_stroke = 12;
    if (has_bottom_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_stroke());
    }
    
    // optional .TSD.StrokeArchive left_stroke = 13;
    if (has_left_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_stroke());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellStylePropertiesArchive::MergeFrom(const CellStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_fill()) {
      mutable_cell_fill()->::TSD::FillArchive::MergeFrom(from.cell_fill());
    }
    if (from.has_text_wrap()) {
      set_text_wrap(from.text_wrap());
    }
    if (from.has_deprecated_top_stroke()) {
      mutable_deprecated_top_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_top_stroke());
    }
    if (from.has_deprecated_right_stroke()) {
      mutable_deprecated_right_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_right_stroke());
    }
    if (from.has_deprecated_bottom_stroke()) {
      mutable_deprecated_bottom_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_bottom_stroke());
    }
    if (from.has_deprecated_left_stroke()) {
      mutable_deprecated_left_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_left_stroke());
    }
    if (from.has_vertical_alignment()) {
      set_vertical_alignment(from.vertical_alignment());
    }
    if (from.has_padding()) {
      mutable_padding()->::TSWP::PaddingArchive::MergeFrom(from.padding());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_top_stroke()) {
      mutable_top_stroke()->::TSD::StrokeArchive::MergeFrom(from.top_stroke());
    }
    if (from.has_right_stroke()) {
      mutable_right_stroke()->::TSD::StrokeArchive::MergeFrom(from.right_stroke());
    }
    if (from.has_bottom_stroke()) {
      mutable_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(from.bottom_stroke());
    }
    if (from.has_left_stroke()) {
      mutable_left_stroke()->::TSD::StrokeArchive::MergeFrom(from.left_stroke());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellStylePropertiesArchive::CopyFrom(const CellStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellStylePropertiesArchive::IsInitialized() const {
  
  if (has_cell_fill()) {
    if (!this->cell_fill().IsInitialized()) return false;
  }
  if (has_deprecated_top_stroke()) {
    if (!this->deprecated_top_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_right_stroke()) {
    if (!this->deprecated_right_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_bottom_stroke()) {
    if (!this->deprecated_bottom_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_left_stroke()) {
    if (!this->deprecated_left_stroke().IsInitialized()) return false;
  }
  if (has_top_stroke()) {
    if (!this->top_stroke().IsInitialized()) return false;
  }
  if (has_right_stroke()) {
    if (!this->right_stroke().IsInitialized()) return false;
  }
  if (has_bottom_stroke()) {
    if (!this->bottom_stroke().IsInitialized()) return false;
  }
  if (has_left_stroke()) {
    if (!this->left_stroke().IsInitialized()) return false;
  }
  return true;
}

void CellStylePropertiesArchive::Swap(CellStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(cell_fill_, other->cell_fill_);
    std::swap(text_wrap_, other->text_wrap_);
    std::swap(deprecated_top_stroke_, other->deprecated_top_stroke_);
    std::swap(deprecated_right_stroke_, other->deprecated_right_stroke_);
    std::swap(deprecated_bottom_stroke_, other->deprecated_bottom_stroke_);
    std::swap(deprecated_left_stroke_, other->deprecated_left_stroke_);
    std::swap(vertical_alignment_, other->vertical_alignment_);
    std::swap(padding_, other->padding_);
    std::swap(top_stroke_, other->top_stroke_);
    std::swap(right_stroke_, other->right_stroke_);
    std::swap(bottom_stroke_, other->bottom_stroke_);
    std::swap(left_stroke_, other->left_stroke_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellStylePropertiesArchive_descriptor_;
  metadata.reflection = CellStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Deprecated_StrokePresetDataArchive::kDeprecatedHorizontalStrokeFieldNumber;
const int Deprecated_StrokePresetDataArchive::kDeprecatedVerticalStrokeFieldNumber;
const int Deprecated_StrokePresetDataArchive::kDeprecatedExteriorStrokeFieldNumber;
const int Deprecated_StrokePresetDataArchive::kDeprecatedVisibleMaskFieldNumber;
#endif  // !_MSC_VER

Deprecated_StrokePresetDataArchive::Deprecated_StrokePresetDataArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Deprecated_StrokePresetDataArchive::InitAsDefaultInstance() {
  deprecated_horizontal_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_vertical_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_exterior_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
}

Deprecated_StrokePresetDataArchive::Deprecated_StrokePresetDataArchive(const Deprecated_StrokePresetDataArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Deprecated_StrokePresetDataArchive::SharedCtor() {
  _cached_size_ = 0;
  deprecated_horizontal_stroke_ = NULL;
  deprecated_vertical_stroke_ = NULL;
  deprecated_exterior_stroke_ = NULL;
  deprecated_visible_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Deprecated_StrokePresetDataArchive::~Deprecated_StrokePresetDataArchive() {
  SharedDtor();
}

void Deprecated_StrokePresetDataArchive::SharedDtor() {
  if (this != default_instance_) {
    delete deprecated_horizontal_stroke_;
    delete deprecated_vertical_stroke_;
    delete deprecated_exterior_stroke_;
  }
}

void Deprecated_StrokePresetDataArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Deprecated_StrokePresetDataArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Deprecated_StrokePresetDataArchive_descriptor_;
}

const Deprecated_StrokePresetDataArchive& Deprecated_StrokePresetDataArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

Deprecated_StrokePresetDataArchive* Deprecated_StrokePresetDataArchive::default_instance_ = NULL;

Deprecated_StrokePresetDataArchive* Deprecated_StrokePresetDataArchive::New() const {
  return new Deprecated_StrokePresetDataArchive;
}

void Deprecated_StrokePresetDataArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deprecated_horizontal_stroke()) {
      if (deprecated_horizontal_stroke_ != NULL) deprecated_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_vertical_stroke()) {
      if (deprecated_vertical_stroke_ != NULL) deprecated_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_exterior_stroke()) {
      if (deprecated_exterior_stroke_ != NULL) deprecated_exterior_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    deprecated_visible_mask_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Deprecated_StrokePresetDataArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deprecated_horizontal_stroke;
        break;
      }
      
      // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deprecated_exterior_stroke;
        break;
      }
      
      // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_exterior_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_exterior_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deprecated_visible_mask;
        break;
      }
      
      // required int32 deprecated_visible_mask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_visible_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_visible_mask_)));
          set_has_deprecated_visible_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Deprecated_StrokePresetDataArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
  if (has_deprecated_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deprecated_vertical_stroke(), output);
  }
  
  // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
  if (has_deprecated_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deprecated_horizontal_stroke(), output);
  }
  
  // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
  if (has_deprecated_exterior_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deprecated_exterior_stroke(), output);
  }
  
  // required int32 deprecated_visible_mask = 5;
  if (has_deprecated_visible_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deprecated_visible_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Deprecated_StrokePresetDataArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
  if (has_deprecated_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deprecated_vertical_stroke(), target);
  }
  
  // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
  if (has_deprecated_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deprecated_horizontal_stroke(), target);
  }
  
  // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
  if (has_deprecated_exterior_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deprecated_exterior_stroke(), target);
  }
  
  // required int32 deprecated_visible_mask = 5;
  if (has_deprecated_visible_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deprecated_visible_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Deprecated_StrokePresetDataArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
    if (has_deprecated_horizontal_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_horizontal_stroke());
    }
    
    // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
    if (has_deprecated_vertical_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_vertical_stroke());
    }
    
    // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
    if (has_deprecated_exterior_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_exterior_stroke());
    }
    
    // required int32 deprecated_visible_mask = 5;
    if (has_deprecated_visible_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_visible_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Deprecated_StrokePresetDataArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Deprecated_StrokePresetDataArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Deprecated_StrokePresetDataArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Deprecated_StrokePresetDataArchive::MergeFrom(const Deprecated_StrokePresetDataArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_horizontal_stroke()) {
      mutable_deprecated_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_horizontal_stroke());
    }
    if (from.has_deprecated_vertical_stroke()) {
      mutable_deprecated_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_vertical_stroke());
    }
    if (from.has_deprecated_exterior_stroke()) {
      mutable_deprecated_exterior_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_exterior_stroke());
    }
    if (from.has_deprecated_visible_mask()) {
      set_deprecated_visible_mask(from.deprecated_visible_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Deprecated_StrokePresetDataArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deprecated_StrokePresetDataArchive::CopyFrom(const Deprecated_StrokePresetDataArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deprecated_StrokePresetDataArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_deprecated_horizontal_stroke()) {
    if (!this->deprecated_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_vertical_stroke()) {
    if (!this->deprecated_vertical_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_exterior_stroke()) {
    if (!this->deprecated_exterior_stroke().IsInitialized()) return false;
  }
  return true;
}

void Deprecated_StrokePresetDataArchive::Swap(Deprecated_StrokePresetDataArchive* other) {
  if (other != this) {
    std::swap(deprecated_horizontal_stroke_, other->deprecated_horizontal_stroke_);
    std::swap(deprecated_vertical_stroke_, other->deprecated_vertical_stroke_);
    std::swap(deprecated_exterior_stroke_, other->deprecated_exterior_stroke_);
    std::swap(deprecated_visible_mask_, other->deprecated_visible_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Deprecated_StrokePresetDataArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Deprecated_StrokePresetDataArchive_descriptor_;
  metadata.reflection = Deprecated_StrokePresetDataArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrokePresetDataArchive::kHorizontalStrokeFieldNumber;
const int StrokePresetDataArchive::kVerticalStrokeFieldNumber;
const int StrokePresetDataArchive::kExteriorStrokeFieldNumber;
const int StrokePresetDataArchive::kVisibleMaskFieldNumber;
#endif  // !_MSC_VER

StrokePresetDataArchive::StrokePresetDataArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrokePresetDataArchive::InitAsDefaultInstance() {
  horizontal_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  vertical_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  exterior_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

StrokePresetDataArchive::StrokePresetDataArchive(const StrokePresetDataArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrokePresetDataArchive::SharedCtor() {
  _cached_size_ = 0;
  horizontal_stroke_ = NULL;
  vertical_stroke_ = NULL;
  exterior_stroke_ = NULL;
  visible_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrokePresetDataArchive::~StrokePresetDataArchive() {
  SharedDtor();
}

void StrokePresetDataArchive::SharedDtor() {
  if (this != default_instance_) {
    delete horizontal_stroke_;
    delete vertical_stroke_;
    delete exterior_stroke_;
  }
}

void StrokePresetDataArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrokePresetDataArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrokePresetDataArchive_descriptor_;
}

const StrokePresetDataArchive& StrokePresetDataArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

StrokePresetDataArchive* StrokePresetDataArchive::default_instance_ = NULL;

StrokePresetDataArchive* StrokePresetDataArchive::New() const {
  return new StrokePresetDataArchive;
}

void StrokePresetDataArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_horizontal_stroke()) {
      if (horizontal_stroke_ != NULL) horizontal_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_vertical_stroke()) {
      if (vertical_stroke_ != NULL) vertical_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_exterior_stroke()) {
      if (exterior_stroke_ != NULL) exterior_stroke_->::TSD::StrokeArchive::Clear();
    }
    visible_mask_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrokePresetDataArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.StrokeArchive horizontal_stroke = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vertical_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive vertical_stroke = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exterior_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive exterior_stroke = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exterior_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exterior_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_visible_mask;
        break;
      }
      
      // optional int32 visible_mask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visible_mask_)));
          set_has_visible_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrokePresetDataArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.StrokeArchive horizontal_stroke = 1;
  if (has_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->horizontal_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive vertical_stroke = 2;
  if (has_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertical_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive exterior_stroke = 3;
  if (has_exterior_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exterior_stroke(), output);
  }
  
  // optional int32 visible_mask = 4;
  if (has_visible_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->visible_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrokePresetDataArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.StrokeArchive horizontal_stroke = 1;
  if (has_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->horizontal_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive vertical_stroke = 2;
  if (has_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertical_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive exterior_stroke = 3;
  if (has_exterior_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exterior_stroke(), target);
  }
  
  // optional int32 visible_mask = 4;
  if (has_visible_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->visible_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrokePresetDataArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.StrokeArchive horizontal_stroke = 1;
    if (has_horizontal_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horizontal_stroke());
    }
    
    // optional .TSD.StrokeArchive vertical_stroke = 2;
    if (has_vertical_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertical_stroke());
    }
    
    // optional .TSD.StrokeArchive exterior_stroke = 3;
    if (has_exterior_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exterior_stroke());
    }
    
    // optional int32 visible_mask = 4;
    if (has_visible_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visible_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrokePresetDataArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrokePresetDataArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrokePresetDataArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrokePresetDataArchive::MergeFrom(const StrokePresetDataArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontal_stroke()) {
      mutable_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(from.horizontal_stroke());
    }
    if (from.has_vertical_stroke()) {
      mutable_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(from.vertical_stroke());
    }
    if (from.has_exterior_stroke()) {
      mutable_exterior_stroke()->::TSD::StrokeArchive::MergeFrom(from.exterior_stroke());
    }
    if (from.has_visible_mask()) {
      set_visible_mask(from.visible_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrokePresetDataArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrokePresetDataArchive::CopyFrom(const StrokePresetDataArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokePresetDataArchive::IsInitialized() const {
  
  if (has_horizontal_stroke()) {
    if (!this->horizontal_stroke().IsInitialized()) return false;
  }
  if (has_vertical_stroke()) {
    if (!this->vertical_stroke().IsInitialized()) return false;
  }
  if (has_exterior_stroke()) {
    if (!this->exterior_stroke().IsInitialized()) return false;
  }
  return true;
}

void StrokePresetDataArchive::Swap(StrokePresetDataArchive* other) {
  if (other != this) {
    std::swap(horizontal_stroke_, other->horizontal_stroke_);
    std::swap(vertical_stroke_, other->vertical_stroke_);
    std::swap(exterior_stroke_, other->exterior_stroke_);
    std::swap(visible_mask_, other->visible_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrokePresetDataArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrokePresetDataArchive_descriptor_;
  metadata.reflection = StrokePresetDataArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrokePresetListArchive::kCountFieldNumber;
const int StrokePresetListArchive::kDeprecatedPresetFieldNumber;
const int StrokePresetListArchive::kPresetFieldNumber;
#endif  // !_MSC_VER

StrokePresetListArchive::StrokePresetListArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrokePresetListArchive::InitAsDefaultInstance() {
}

StrokePresetListArchive::StrokePresetListArchive(const StrokePresetListArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrokePresetListArchive::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrokePresetListArchive::~StrokePresetListArchive() {
  SharedDtor();
}

void StrokePresetListArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrokePresetListArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrokePresetListArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrokePresetListArchive_descriptor_;
}

const StrokePresetListArchive& StrokePresetListArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

StrokePresetListArchive* StrokePresetListArchive::default_instance_ = NULL;

StrokePresetListArchive* StrokePresetListArchive::New() const {
  return new StrokePresetListArchive;
}

void StrokePresetListArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  deprecated_preset_.Clear();
  preset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrokePresetListArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deprecated_preset;
        break;
      }
      
      // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deprecated_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deprecated_preset;
        if (input->ExpectTag(26)) goto parse_preset;
        break;
      }
      
      // repeated .TST.StrokePresetDataArchive preset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_preset;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrokePresetListArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
  for (int i = 0; i < this->deprecated_preset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deprecated_preset(i), output);
  }
  
  // repeated .TST.StrokePresetDataArchive preset = 3;
  for (int i = 0; i < this->preset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->preset(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrokePresetListArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
  for (int i = 0; i < this->deprecated_preset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deprecated_preset(i), target);
  }
  
  // repeated .TST.StrokePresetDataArchive preset = 3;
  for (int i = 0; i < this->preset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->preset(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrokePresetListArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
  total_size += 1 * this->deprecated_preset_size();
  for (int i = 0; i < this->deprecated_preset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deprecated_preset(i));
  }
  
  // repeated .TST.StrokePresetDataArchive preset = 3;
  total_size += 1 * this->preset_size();
  for (int i = 0; i < this->preset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preset(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrokePresetListArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrokePresetListArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrokePresetListArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrokePresetListArchive::MergeFrom(const StrokePresetListArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  deprecated_preset_.MergeFrom(from.deprecated_preset_);
  preset_.MergeFrom(from.preset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrokePresetListArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrokePresetListArchive::CopyFrom(const StrokePresetListArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokePresetListArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < deprecated_preset_size(); i++) {
    if (!this->deprecated_preset(i).IsInitialized()) return false;
  }
  for (int i = 0; i < preset_size(); i++) {
    if (!this->preset(i).IsInitialized()) return false;
  }
  return true;
}

void StrokePresetListArchive::Swap(StrokePresetListArchive* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    deprecated_preset_.Swap(&other->deprecated_preset_);
    preset_.Swap(&other->preset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrokePresetListArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrokePresetListArchive_descriptor_;
  metadata.reflection = StrokePresetListArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableStylePropertiesArchive::kBandedRowsFieldNumber;
const int TableStylePropertiesArchive::kBandedFillFieldNumber;
const int TableStylePropertiesArchive::kBehavesLikeSpreadsheetFieldNumber;
const int TableStylePropertiesArchive::kAutoResizeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedHeaderRowSeparatorStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedHeaderRowBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedHeaderRowHorizontalStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedHeaderRowVerticalStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedHeaderColumnBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedHeaderColumnSeparatorStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedHeaderColumnHorizontalStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedHeaderColumnVerticalStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedFooterRowSeparatorStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedFooterRowBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedFooterRowHorizontalStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedFooterRowVerticalStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedTableBodyHorizontalBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedTableBodyVerticalBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedTableBodyHorizontalStrokeFieldNumber;
const int TableStylePropertiesArchive::kDeprecatedTableBodyVerticalStrokeFieldNumber;
const int TableStylePropertiesArchive::kStrokePresetListFieldNumber;
const int TableStylePropertiesArchive::kVStrokesVisibleFieldNumber;
const int TableStylePropertiesArchive::kHStrokesVisibleFieldNumber;
const int TableStylePropertiesArchive::kHrSeparatorVisibleFieldNumber;
const int TableStylePropertiesArchive::kHcSeparatorVisibleFieldNumber;
const int TableStylePropertiesArchive::kFooterSeparatorVisibleFieldNumber;
const int TableStylePropertiesArchive::kTableBorderVisibleFieldNumber;
const int TableStylePropertiesArchive::kTableHeaderBorderVisibleFieldNumber;
const int TableStylePropertiesArchive::kTableHcDividerVisibleFieldNumber;
const int TableStylePropertiesArchive::kTableHrDividerVisibleFieldNumber;
const int TableStylePropertiesArchive::kTableFooterDividerVisibleFieldNumber;
const int TableStylePropertiesArchive::kOBSOLETEMasterFontSizeFieldNumber;
const int TableStylePropertiesArchive::kMasterFontFamilyFieldNumber;
const int TableStylePropertiesArchive::kWritingDirectionFieldNumber;
const int TableStylePropertiesArchive::kHeaderRowSeparatorStrokeFieldNumber;
const int TableStylePropertiesArchive::kHeaderRowBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kHeaderRowHorizontalStrokeFieldNumber;
const int TableStylePropertiesArchive::kHeaderRowVerticalStrokeFieldNumber;
const int TableStylePropertiesArchive::kHeaderColumnBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kHeaderColumnSeparatorStrokeFieldNumber;
const int TableStylePropertiesArchive::kHeaderColumnHorizontalStrokeFieldNumber;
const int TableStylePropertiesArchive::kHeaderColumnVerticalStrokeFieldNumber;
const int TableStylePropertiesArchive::kFooterRowSeparatorStrokeFieldNumber;
const int TableStylePropertiesArchive::kFooterRowBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kFooterRowHorizontalStrokeFieldNumber;
const int TableStylePropertiesArchive::kFooterRowVerticalStrokeFieldNumber;
const int TableStylePropertiesArchive::kTableBodyHorizontalBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kTableBodyVerticalBorderStrokeFieldNumber;
const int TableStylePropertiesArchive::kTableBodyHorizontalStrokeFieldNumber;
const int TableStylePropertiesArchive::kTableBodyVerticalStrokeFieldNumber;
#endif  // !_MSC_VER

TableStylePropertiesArchive::TableStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableStylePropertiesArchive::InitAsDefaultInstance() {
  banded_fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  deprecated_header_row_separator_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_header_row_border_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_header_row_horizontal_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_header_row_vertical_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_header_column_border_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_header_column_separator_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_header_column_horizontal_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_header_column_vertical_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_footer_row_separator_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_footer_row_border_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_footer_row_horizontal_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_footer_row_vertical_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_table_body_horizontal_border_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_table_body_vertical_border_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_table_body_horizontal_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  deprecated_table_body_vertical_stroke_ = const_cast< ::TST::Deprecated_TableStrokeArchive*>(&::TST::Deprecated_TableStrokeArchive::default_instance());
  stroke_preset_list_ = const_cast< ::TST::StrokePresetListArchive*>(&::TST::StrokePresetListArchive::default_instance());
  header_row_separator_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  header_row_border_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  header_row_horizontal_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  header_row_vertical_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  header_column_border_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  header_column_separator_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  header_column_horizontal_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  header_column_vertical_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  footer_row_separator_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  footer_row_border_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  footer_row_horizontal_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  footer_row_vertical_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  table_body_horizontal_border_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  table_body_vertical_border_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  table_body_horizontal_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  table_body_vertical_stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

TableStylePropertiesArchive::TableStylePropertiesArchive(const TableStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  banded_rows_ = false;
  banded_fill_ = NULL;
  behaves_like_spreadsheet_ = false;
  auto_resize_ = false;
  deprecated_header_row_separator_stroke_ = NULL;
  deprecated_header_row_border_stroke_ = NULL;
  deprecated_header_row_horizontal_stroke_ = NULL;
  deprecated_header_row_vertical_stroke_ = NULL;
  deprecated_header_column_border_stroke_ = NULL;
  deprecated_header_column_separator_stroke_ = NULL;
  deprecated_header_column_horizontal_stroke_ = NULL;
  deprecated_header_column_vertical_stroke_ = NULL;
  deprecated_footer_row_separator_stroke_ = NULL;
  deprecated_footer_row_border_stroke_ = NULL;
  deprecated_footer_row_horizontal_stroke_ = NULL;
  deprecated_footer_row_vertical_stroke_ = NULL;
  deprecated_table_body_horizontal_border_stroke_ = NULL;
  deprecated_table_body_vertical_border_stroke_ = NULL;
  deprecated_table_body_horizontal_stroke_ = NULL;
  deprecated_table_body_vertical_stroke_ = NULL;
  stroke_preset_list_ = NULL;
  v_strokes_visible_ = false;
  h_strokes_visible_ = false;
  hr_separator_visible_ = false;
  hc_separator_visible_ = false;
  footer_separator_visible_ = false;
  table_border_visible_ = false;
  table_header_border_visible_ = false;
  table_hc_divider_visible_ = false;
  table_hr_divider_visible_ = false;
  table_footer_divider_visible_ = false;
  obsolete_master_font_size_ = 0;
  master_font_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writing_direction_ = -1;
  header_row_separator_stroke_ = NULL;
  header_row_border_stroke_ = NULL;
  header_row_horizontal_stroke_ = NULL;
  header_row_vertical_stroke_ = NULL;
  header_column_border_stroke_ = NULL;
  header_column_separator_stroke_ = NULL;
  header_column_horizontal_stroke_ = NULL;
  header_column_vertical_stroke_ = NULL;
  footer_row_separator_stroke_ = NULL;
  footer_row_border_stroke_ = NULL;
  footer_row_horizontal_stroke_ = NULL;
  footer_row_vertical_stroke_ = NULL;
  table_body_horizontal_border_stroke_ = NULL;
  table_body_vertical_border_stroke_ = NULL;
  table_body_horizontal_stroke_ = NULL;
  table_body_vertical_stroke_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableStylePropertiesArchive::~TableStylePropertiesArchive() {
  SharedDtor();
}

void TableStylePropertiesArchive::SharedDtor() {
  if (master_font_family_ != &::google::protobuf::internal::kEmptyString) {
    delete master_font_family_;
  }
  if (this != default_instance_) {
    delete banded_fill_;
    delete deprecated_header_row_separator_stroke_;
    delete deprecated_header_row_border_stroke_;
    delete deprecated_header_row_horizontal_stroke_;
    delete deprecated_header_row_vertical_stroke_;
    delete deprecated_header_column_border_stroke_;
    delete deprecated_header_column_separator_stroke_;
    delete deprecated_header_column_horizontal_stroke_;
    delete deprecated_header_column_vertical_stroke_;
    delete deprecated_footer_row_separator_stroke_;
    delete deprecated_footer_row_border_stroke_;
    delete deprecated_footer_row_horizontal_stroke_;
    delete deprecated_footer_row_vertical_stroke_;
    delete deprecated_table_body_horizontal_border_stroke_;
    delete deprecated_table_body_vertical_border_stroke_;
    delete deprecated_table_body_horizontal_stroke_;
    delete deprecated_table_body_vertical_stroke_;
    delete stroke_preset_list_;
    delete header_row_separator_stroke_;
    delete header_row_border_stroke_;
    delete header_row_horizontal_stroke_;
    delete header_row_vertical_stroke_;
    delete header_column_border_stroke_;
    delete header_column_separator_stroke_;
    delete header_column_horizontal_stroke_;
    delete header_column_vertical_stroke_;
    delete footer_row_separator_stroke_;
    delete footer_row_border_stroke_;
    delete footer_row_horizontal_stroke_;
    delete footer_row_vertical_stroke_;
    delete table_body_horizontal_border_stroke_;
    delete table_body_vertical_border_stroke_;
    delete table_body_horizontal_stroke_;
    delete table_body_vertical_stroke_;
  }
}

void TableStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableStylePropertiesArchive_descriptor_;
}

const TableStylePropertiesArchive& TableStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

TableStylePropertiesArchive* TableStylePropertiesArchive::default_instance_ = NULL;

TableStylePropertiesArchive* TableStylePropertiesArchive::New() const {
  return new TableStylePropertiesArchive;
}

void TableStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banded_rows_ = false;
    if (has_banded_fill()) {
      if (banded_fill_ != NULL) banded_fill_->::TSD::FillArchive::Clear();
    }
    behaves_like_spreadsheet_ = false;
    auto_resize_ = false;
    if (has_deprecated_header_row_separator_stroke()) {
      if (deprecated_header_row_separator_stroke_ != NULL) deprecated_header_row_separator_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_header_row_border_stroke()) {
      if (deprecated_header_row_border_stroke_ != NULL) deprecated_header_row_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_header_row_horizontal_stroke()) {
      if (deprecated_header_row_horizontal_stroke_ != NULL) deprecated_header_row_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_header_row_vertical_stroke()) {
      if (deprecated_header_row_vertical_stroke_ != NULL) deprecated_header_row_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_deprecated_header_column_border_stroke()) {
      if (deprecated_header_column_border_stroke_ != NULL) deprecated_header_column_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_header_column_separator_stroke()) {
      if (deprecated_header_column_separator_stroke_ != NULL) deprecated_header_column_separator_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_header_column_horizontal_stroke()) {
      if (deprecated_header_column_horizontal_stroke_ != NULL) deprecated_header_column_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_header_column_vertical_stroke()) {
      if (deprecated_header_column_vertical_stroke_ != NULL) deprecated_header_column_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_footer_row_separator_stroke()) {
      if (deprecated_footer_row_separator_stroke_ != NULL) deprecated_footer_row_separator_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_footer_row_border_stroke()) {
      if (deprecated_footer_row_border_stroke_ != NULL) deprecated_footer_row_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_footer_row_horizontal_stroke()) {
      if (deprecated_footer_row_horizontal_stroke_ != NULL) deprecated_footer_row_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_footer_row_vertical_stroke()) {
      if (deprecated_footer_row_vertical_stroke_ != NULL) deprecated_footer_row_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_deprecated_table_body_horizontal_border_stroke()) {
      if (deprecated_table_body_horizontal_border_stroke_ != NULL) deprecated_table_body_horizontal_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_table_body_vertical_border_stroke()) {
      if (deprecated_table_body_vertical_border_stroke_ != NULL) deprecated_table_body_vertical_border_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_table_body_horizontal_stroke()) {
      if (deprecated_table_body_horizontal_stroke_ != NULL) deprecated_table_body_horizontal_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_deprecated_table_body_vertical_stroke()) {
      if (deprecated_table_body_vertical_stroke_ != NULL) deprecated_table_body_vertical_stroke_->::TST::Deprecated_TableStrokeArchive::Clear();
    }
    if (has_stroke_preset_list()) {
      if (stroke_preset_list_ != NULL) stroke_preset_list_->::TST::StrokePresetListArchive::Clear();
    }
    v_strokes_visible_ = false;
    h_strokes_visible_ = false;
    hr_separator_visible_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    hc_separator_visible_ = false;
    footer_separator_visible_ = false;
    table_border_visible_ = false;
    table_header_border_visible_ = false;
    table_hc_divider_visible_ = false;
    table_hr_divider_visible_ = false;
    table_footer_divider_visible_ = false;
    obsolete_master_font_size_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_master_font_family()) {
      if (master_font_family_ != &::google::protobuf::internal::kEmptyString) {
        master_font_family_->clear();
      }
    }
    writing_direction_ = -1;
    if (has_header_row_separator_stroke()) {
      if (header_row_separator_stroke_ != NULL) header_row_separator_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_header_row_border_stroke()) {
      if (header_row_border_stroke_ != NULL) header_row_border_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_header_row_horizontal_stroke()) {
      if (header_row_horizontal_stroke_ != NULL) header_row_horizontal_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_header_row_vertical_stroke()) {
      if (header_row_vertical_stroke_ != NULL) header_row_vertical_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_header_column_border_stroke()) {
      if (header_column_border_stroke_ != NULL) header_column_border_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_header_column_separator_stroke()) {
      if (header_column_separator_stroke_ != NULL) header_column_separator_stroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_header_column_horizontal_stroke()) {
      if (header_column_horizontal_stroke_ != NULL) header_column_horizontal_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_header_column_vertical_stroke()) {
      if (header_column_vertical_stroke_ != NULL) header_column_vertical_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_footer_row_separator_stroke()) {
      if (footer_row_separator_stroke_ != NULL) footer_row_separator_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_footer_row_border_stroke()) {
      if (footer_row_border_stroke_ != NULL) footer_row_border_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_footer_row_horizontal_stroke()) {
      if (footer_row_horizontal_stroke_ != NULL) footer_row_horizontal_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_footer_row_vertical_stroke()) {
      if (footer_row_vertical_stroke_ != NULL) footer_row_vertical_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_table_body_horizontal_border_stroke()) {
      if (table_body_horizontal_border_stroke_ != NULL) table_body_horizontal_border_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_table_body_vertical_border_stroke()) {
      if (table_body_vertical_border_stroke_ != NULL) table_body_vertical_border_stroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_table_body_horizontal_stroke()) {
      if (table_body_horizontal_stroke_ != NULL) table_body_horizontal_stroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_table_body_vertical_stroke()) {
      if (table_body_vertical_stroke_ != NULL) table_body_vertical_stroke_->::TSD::StrokeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool banded_rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banded_rows_)));
          set_has_banded_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_banded_fill;
        break;
      }
      
      // optional .TSD.FillArchive banded_fill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banded_fill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banded_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deprecated_header_row_separator_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_header_row_separator_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_header_row_separator_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deprecated_header_row_border_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_header_row_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_header_row_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deprecated_header_column_border_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_header_column_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_header_column_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_deprecated_header_column_separator_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_header_column_separator_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_header_column_separator_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_deprecated_footer_row_separator_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_footer_row_separator_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_footer_row_separator_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_deprecated_footer_row_border_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_footer_row_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_footer_row_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_deprecated_table_body_horizontal_border_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_table_body_horizontal_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_table_body_horizontal_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_behaves_like_spreadsheet;
        break;
      }
      
      // optional bool behaves_like_spreadsheet = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_behaves_like_spreadsheet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &behaves_like_spreadsheet_)));
          set_has_behaves_like_spreadsheet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_auto_resize;
        break;
      }
      
      // optional bool auto_resize = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_resize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_resize_)));
          set_has_auto_resize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_deprecated_header_row_horizontal_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_header_row_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_header_row_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_deprecated_header_row_vertical_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_header_row_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_header_row_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_deprecated_header_column_horizontal_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_header_column_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_header_column_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_deprecated_header_column_vertical_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_header_column_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_header_column_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_deprecated_footer_row_horizontal_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_footer_row_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_footer_row_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_deprecated_footer_row_vertical_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_footer_row_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_footer_row_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_deprecated_table_body_vertical_border_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_table_body_vertical_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_table_body_vertical_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_deprecated_table_body_horizontal_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_table_body_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_table_body_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_deprecated_table_body_vertical_stroke;
        break;
      }
      
      // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_table_body_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_table_body_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_stroke_preset_list;
        break;
      }
      
      // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stroke_preset_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroke_preset_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_v_strokes_visible;
        break;
      }
      
      // optional bool v_strokes_visible = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_strokes_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v_strokes_visible_)));
          set_has_v_strokes_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_h_strokes_visible;
        break;
      }
      
      // optional bool h_strokes_visible = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_strokes_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &h_strokes_visible_)));
          set_has_h_strokes_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_hr_separator_visible;
        break;
      }
      
      // optional bool hr_separator_visible = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hr_separator_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hr_separator_visible_)));
          set_has_hr_separator_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_hc_separator_visible;
        break;
      }
      
      // optional bool hc_separator_visible = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hc_separator_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hc_separator_visible_)));
          set_has_hc_separator_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_footer_separator_visible;
        break;
      }
      
      // optional bool footer_separator_visible = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footer_separator_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &footer_separator_visible_)));
          set_has_footer_separator_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_table_border_visible;
        break;
      }
      
      // optional bool table_border_visible = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_border_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &table_border_visible_)));
          set_has_table_border_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_table_header_border_visible;
        break;
      }
      
      // optional bool table_header_border_visible = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_header_border_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &table_header_border_visible_)));
          set_has_table_header_border_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_OBSOLETE_master_font_size;
        break;
      }
      
      // optional int32 OBSOLETE_master_font_size = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OBSOLETE_master_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obsolete_master_font_size_)));
          set_has_obsolete_master_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_master_font_family;
        break;
      }
      
      // optional string master_font_family = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_font_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_font_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master_font_family().data(), this->master_font_family().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_table_hc_divider_visible;
        break;
      }
      
      // optional bool table_hc_divider_visible = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_hc_divider_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &table_hc_divider_visible_)));
          set_has_table_hc_divider_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_table_hr_divider_visible;
        break;
      }
      
      // optional bool table_hr_divider_visible = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_hr_divider_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &table_hr_divider_visible_)));
          set_has_table_hr_divider_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_table_footer_divider_visible;
        break;
      }
      
      // optional bool table_footer_divider_visible = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_footer_divider_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &table_footer_divider_visible_)));
          set_has_table_footer_divider_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_writing_direction;
        break;
      }
      
      // optional .TSWP.WritingDirectionType writing_direction = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writing_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TSWP::WritingDirectionType_IsValid(value)) {
            set_writing_direction(static_cast< TSWP::WritingDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(45, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_header_row_separator_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_row_separator_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_row_separator_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_header_row_border_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive header_row_border_stroke = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_row_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_row_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_header_row_horizontal_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_row_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_row_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_header_row_vertical_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_row_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_row_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_header_column_border_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive header_column_border_stroke = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_column_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_column_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_header_column_separator_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_column_separator_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_column_separator_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_header_column_horizontal_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_column_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_column_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_header_column_vertical_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_column_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_column_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_footer_row_separator_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_row_separator_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_row_separator_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_footer_row_border_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_row_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_row_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_footer_row_horizontal_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_row_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_row_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_footer_row_vertical_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer_row_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_row_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_table_body_horizontal_border_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_body_horizontal_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_body_horizontal_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_table_body_vertical_border_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_body_vertical_border_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_body_vertical_border_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_table_body_horizontal_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_body_horizontal_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_body_horizontal_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_table_body_vertical_stroke;
        break;
      }
      
      // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_body_vertical_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_body_vertical_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool banded_rows = 1;
  if (has_banded_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->banded_rows(), output);
  }
  
  // optional .TSD.FillArchive banded_fill = 2;
  if (has_banded_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banded_fill(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
  if (has_deprecated_header_row_separator_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->deprecated_header_row_separator_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
  if (has_deprecated_header_row_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->deprecated_header_row_border_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
  if (has_deprecated_header_column_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deprecated_header_column_border_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
  if (has_deprecated_header_column_separator_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->deprecated_header_column_separator_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
  if (has_deprecated_footer_row_separator_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->deprecated_footer_row_separator_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
  if (has_deprecated_footer_row_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->deprecated_footer_row_border_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
  if (has_deprecated_table_body_horizontal_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->deprecated_table_body_horizontal_border_stroke(), output);
  }
  
  // optional bool behaves_like_spreadsheet = 21;
  if (has_behaves_like_spreadsheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->behaves_like_spreadsheet(), output);
  }
  
  // optional bool auto_resize = 22;
  if (has_auto_resize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->auto_resize(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
  if (has_deprecated_header_row_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->deprecated_header_row_horizontal_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
  if (has_deprecated_header_row_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->deprecated_header_row_vertical_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
  if (has_deprecated_header_column_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->deprecated_header_column_horizontal_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
  if (has_deprecated_header_column_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->deprecated_header_column_vertical_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
  if (has_deprecated_footer_row_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->deprecated_footer_row_horizontal_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
  if (has_deprecated_footer_row_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->deprecated_footer_row_vertical_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
  if (has_deprecated_table_body_vertical_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->deprecated_table_body_vertical_border_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
  if (has_deprecated_table_body_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->deprecated_table_body_horizontal_stroke(), output);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
  if (has_deprecated_table_body_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->deprecated_table_body_vertical_stroke(), output);
  }
  
  // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
  if (has_stroke_preset_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->stroke_preset_list(), output);
  }
  
  // optional bool v_strokes_visible = 33;
  if (has_v_strokes_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->v_strokes_visible(), output);
  }
  
  // optional bool h_strokes_visible = 34;
  if (has_h_strokes_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->h_strokes_visible(), output);
  }
  
  // optional bool hr_separator_visible = 35;
  if (has_hr_separator_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->hr_separator_visible(), output);
  }
  
  // optional bool hc_separator_visible = 36;
  if (has_hc_separator_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->hc_separator_visible(), output);
  }
  
  // optional bool footer_separator_visible = 37;
  if (has_footer_separator_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->footer_separator_visible(), output);
  }
  
  // optional bool table_border_visible = 38;
  if (has_table_border_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->table_border_visible(), output);
  }
  
  // optional bool table_header_border_visible = 39;
  if (has_table_header_border_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->table_header_border_visible(), output);
  }
  
  // optional int32 OBSOLETE_master_font_size = 40;
  if (has_obsolete_master_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->obsolete_master_font_size(), output);
  }
  
  // optional string master_font_family = 41;
  if (has_master_font_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master_font_family().data(), this->master_font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->master_font_family(), output);
  }
  
  // optional bool table_hc_divider_visible = 42;
  if (has_table_hc_divider_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->table_hc_divider_visible(), output);
  }
  
  // optional bool table_hr_divider_visible = 43;
  if (has_table_hr_divider_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->table_hr_divider_visible(), output);
  }
  
  // optional bool table_footer_divider_visible = 44;
  if (has_table_footer_divider_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->table_footer_divider_visible(), output);
  }
  
  // optional .TSWP.WritingDirectionType writing_direction = 45;
  if (has_writing_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      45, this->writing_direction(), output);
  }
  
  // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
  if (has_header_row_separator_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->header_row_separator_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive header_row_border_stroke = 47;
  if (has_header_row_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->header_row_border_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
  if (has_header_row_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->header_row_horizontal_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
  if (has_header_row_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->header_row_vertical_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive header_column_border_stroke = 50;
  if (has_header_column_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->header_column_border_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
  if (has_header_column_separator_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->header_column_separator_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
  if (has_header_column_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->header_column_horizontal_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
  if (has_header_column_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->header_column_vertical_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
  if (has_footer_row_separator_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->footer_row_separator_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
  if (has_footer_row_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->footer_row_border_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
  if (has_footer_row_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->footer_row_horizontal_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
  if (has_footer_row_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->footer_row_vertical_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
  if (has_table_body_horizontal_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->table_body_horizontal_border_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
  if (has_table_body_vertical_border_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->table_body_vertical_border_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
  if (has_table_body_horizontal_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->table_body_horizontal_stroke(), output);
  }
  
  // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
  if (has_table_body_vertical_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->table_body_vertical_stroke(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool banded_rows = 1;
  if (has_banded_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->banded_rows(), target);
  }
  
  // optional .TSD.FillArchive banded_fill = 2;
  if (has_banded_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banded_fill(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
  if (has_deprecated_header_row_separator_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->deprecated_header_row_separator_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
  if (has_deprecated_header_row_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->deprecated_header_row_border_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
  if (has_deprecated_header_column_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deprecated_header_column_border_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
  if (has_deprecated_header_column_separator_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->deprecated_header_column_separator_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
  if (has_deprecated_footer_row_separator_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->deprecated_footer_row_separator_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
  if (has_deprecated_footer_row_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->deprecated_footer_row_border_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
  if (has_deprecated_table_body_horizontal_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->deprecated_table_body_horizontal_border_stroke(), target);
  }
  
  // optional bool behaves_like_spreadsheet = 21;
  if (has_behaves_like_spreadsheet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->behaves_like_spreadsheet(), target);
  }
  
  // optional bool auto_resize = 22;
  if (has_auto_resize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->auto_resize(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
  if (has_deprecated_header_row_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->deprecated_header_row_horizontal_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
  if (has_deprecated_header_row_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->deprecated_header_row_vertical_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
  if (has_deprecated_header_column_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->deprecated_header_column_horizontal_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
  if (has_deprecated_header_column_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->deprecated_header_column_vertical_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
  if (has_deprecated_footer_row_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->deprecated_footer_row_horizontal_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
  if (has_deprecated_footer_row_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->deprecated_footer_row_vertical_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
  if (has_deprecated_table_body_vertical_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->deprecated_table_body_vertical_border_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
  if (has_deprecated_table_body_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->deprecated_table_body_horizontal_stroke(), target);
  }
  
  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
  if (has_deprecated_table_body_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->deprecated_table_body_vertical_stroke(), target);
  }
  
  // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
  if (has_stroke_preset_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->stroke_preset_list(), target);
  }
  
  // optional bool v_strokes_visible = 33;
  if (has_v_strokes_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->v_strokes_visible(), target);
  }
  
  // optional bool h_strokes_visible = 34;
  if (has_h_strokes_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->h_strokes_visible(), target);
  }
  
  // optional bool hr_separator_visible = 35;
  if (has_hr_separator_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->hr_separator_visible(), target);
  }
  
  // optional bool hc_separator_visible = 36;
  if (has_hc_separator_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->hc_separator_visible(), target);
  }
  
  // optional bool footer_separator_visible = 37;
  if (has_footer_separator_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->footer_separator_visible(), target);
  }
  
  // optional bool table_border_visible = 38;
  if (has_table_border_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->table_border_visible(), target);
  }
  
  // optional bool table_header_border_visible = 39;
  if (has_table_header_border_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->table_header_border_visible(), target);
  }
  
  // optional int32 OBSOLETE_master_font_size = 40;
  if (has_obsolete_master_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->obsolete_master_font_size(), target);
  }
  
  // optional string master_font_family = 41;
  if (has_master_font_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master_font_family().data(), this->master_font_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->master_font_family(), target);
  }
  
  // optional bool table_hc_divider_visible = 42;
  if (has_table_hc_divider_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->table_hc_divider_visible(), target);
  }
  
  // optional bool table_hr_divider_visible = 43;
  if (has_table_hr_divider_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->table_hr_divider_visible(), target);
  }
  
  // optional bool table_footer_divider_visible = 44;
  if (has_table_footer_divider_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->table_footer_divider_visible(), target);
  }
  
  // optional .TSWP.WritingDirectionType writing_direction = 45;
  if (has_writing_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      45, this->writing_direction(), target);
  }
  
  // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
  if (has_header_row_separator_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->header_row_separator_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive header_row_border_stroke = 47;
  if (has_header_row_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->header_row_border_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
  if (has_header_row_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->header_row_horizontal_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
  if (has_header_row_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->header_row_vertical_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive header_column_border_stroke = 50;
  if (has_header_column_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->header_column_border_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
  if (has_header_column_separator_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->header_column_separator_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
  if (has_header_column_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->header_column_horizontal_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
  if (has_header_column_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->header_column_vertical_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
  if (has_footer_row_separator_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->footer_row_separator_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
  if (has_footer_row_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->footer_row_border_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
  if (has_footer_row_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->footer_row_horizontal_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
  if (has_footer_row_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->footer_row_vertical_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
  if (has_table_body_horizontal_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->table_body_horizontal_border_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
  if (has_table_body_vertical_border_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->table_body_vertical_border_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
  if (has_table_body_horizontal_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->table_body_horizontal_stroke(), target);
  }
  
  // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
  if (has_table_body_vertical_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->table_body_vertical_stroke(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableStylePropertiesArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool banded_rows = 1;
    if (has_banded_rows()) {
      total_size += 1 + 1;
    }
    
    // optional .TSD.FillArchive banded_fill = 2;
    if (has_banded_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banded_fill());
    }
    
    // optional bool behaves_like_spreadsheet = 21;
    if (has_behaves_like_spreadsheet()) {
      total_size += 2 + 1;
    }
    
    // optional bool auto_resize = 22;
    if (has_auto_resize()) {
      total_size += 2 + 1;
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
    if (has_deprecated_header_row_separator_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_header_row_separator_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
    if (has_deprecated_header_row_border_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_header_row_border_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
    if (has_deprecated_header_row_horizontal_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_header_row_horizontal_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
    if (has_deprecated_header_row_vertical_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_header_row_vertical_stroke());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
    if (has_deprecated_header_column_border_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_header_column_border_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
    if (has_deprecated_header_column_separator_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_header_column_separator_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
    if (has_deprecated_header_column_horizontal_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_header_column_horizontal_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
    if (has_deprecated_header_column_vertical_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_header_column_vertical_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
    if (has_deprecated_footer_row_separator_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_footer_row_separator_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
    if (has_deprecated_footer_row_border_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_footer_row_border_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
    if (has_deprecated_footer_row_horizontal_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_footer_row_horizontal_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
    if (has_deprecated_footer_row_vertical_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_footer_row_vertical_stroke());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
    if (has_deprecated_table_body_horizontal_border_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_table_body_horizontal_border_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
    if (has_deprecated_table_body_vertical_border_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_table_body_vertical_border_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
    if (has_deprecated_table_body_horizontal_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_table_body_horizontal_stroke());
    }
    
    // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
    if (has_deprecated_table_body_vertical_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_table_body_vertical_stroke());
    }
    
    // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
    if (has_stroke_preset_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroke_preset_list());
    }
    
    // optional bool v_strokes_visible = 33;
    if (has_v_strokes_visible()) {
      total_size += 2 + 1;
    }
    
    // optional bool h_strokes_visible = 34;
    if (has_h_strokes_visible()) {
      total_size += 2 + 1;
    }
    
    // optional bool hr_separator_visible = 35;
    if (has_hr_separator_visible()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool hc_separator_visible = 36;
    if (has_hc_separator_visible()) {
      total_size += 2 + 1;
    }
    
    // optional bool footer_separator_visible = 37;
    if (has_footer_separator_visible()) {
      total_size += 2 + 1;
    }
    
    // optional bool table_border_visible = 38;
    if (has_table_border_visible()) {
      total_size += 2 + 1;
    }
    
    // optional bool table_header_border_visible = 39;
    if (has_table_header_border_visible()) {
      total_size += 2 + 1;
    }
    
    // optional bool table_hc_divider_visible = 42;
    if (has_table_hc_divider_visible()) {
      total_size += 2 + 1;
    }
    
    // optional bool table_hr_divider_visible = 43;
    if (has_table_hr_divider_visible()) {
      total_size += 2 + 1;
    }
    
    // optional bool table_footer_divider_visible = 44;
    if (has_table_footer_divider_visible()) {
      total_size += 2 + 1;
    }
    
    // optional int32 OBSOLETE_master_font_size = 40;
    if (has_obsolete_master_font_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obsolete_master_font_size());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string master_font_family = 41;
    if (has_master_font_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_font_family());
    }
    
    // optional .TSWP.WritingDirectionType writing_direction = 45;
    if (has_writing_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->writing_direction());
    }
    
    // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
    if (has_header_row_separator_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_row_separator_stroke());
    }
    
    // optional .TSD.StrokeArchive header_row_border_stroke = 47;
    if (has_header_row_border_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_row_border_stroke());
    }
    
    // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
    if (has_header_row_horizontal_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_row_horizontal_stroke());
    }
    
    // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
    if (has_header_row_vertical_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_row_vertical_stroke());
    }
    
    // optional .TSD.StrokeArchive header_column_border_stroke = 50;
    if (has_header_column_border_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_column_border_stroke());
    }
    
    // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
    if (has_header_column_separator_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_column_separator_stroke());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
    if (has_header_column_horizontal_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_column_horizontal_stroke());
    }
    
    // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
    if (has_header_column_vertical_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_column_vertical_stroke());
    }
    
    // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
    if (has_footer_row_separator_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_row_separator_stroke());
    }
    
    // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
    if (has_footer_row_border_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_row_border_stroke());
    }
    
    // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
    if (has_footer_row_horizontal_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_row_horizontal_stroke());
    }
    
    // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
    if (has_footer_row_vertical_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer_row_vertical_stroke());
    }
    
    // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
    if (has_table_body_horizontal_border_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_body_horizontal_border_stroke());
    }
    
    // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
    if (has_table_body_vertical_border_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_body_vertical_border_stroke());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
    if (has_table_body_horizontal_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_body_horizontal_stroke());
    }
    
    // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
    if (has_table_body_vertical_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_body_vertical_stroke());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableStylePropertiesArchive::MergeFrom(const TableStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banded_rows()) {
      set_banded_rows(from.banded_rows());
    }
    if (from.has_banded_fill()) {
      mutable_banded_fill()->::TSD::FillArchive::MergeFrom(from.banded_fill());
    }
    if (from.has_behaves_like_spreadsheet()) {
      set_behaves_like_spreadsheet(from.behaves_like_spreadsheet());
    }
    if (from.has_auto_resize()) {
      set_auto_resize(from.auto_resize());
    }
    if (from.has_deprecated_header_row_separator_stroke()) {
      mutable_deprecated_header_row_separator_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_header_row_separator_stroke());
    }
    if (from.has_deprecated_header_row_border_stroke()) {
      mutable_deprecated_header_row_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_header_row_border_stroke());
    }
    if (from.has_deprecated_header_row_horizontal_stroke()) {
      mutable_deprecated_header_row_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_header_row_horizontal_stroke());
    }
    if (from.has_deprecated_header_row_vertical_stroke()) {
      mutable_deprecated_header_row_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_header_row_vertical_stroke());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deprecated_header_column_border_stroke()) {
      mutable_deprecated_header_column_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_header_column_border_stroke());
    }
    if (from.has_deprecated_header_column_separator_stroke()) {
      mutable_deprecated_header_column_separator_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_header_column_separator_stroke());
    }
    if (from.has_deprecated_header_column_horizontal_stroke()) {
      mutable_deprecated_header_column_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_header_column_horizontal_stroke());
    }
    if (from.has_deprecated_header_column_vertical_stroke()) {
      mutable_deprecated_header_column_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_header_column_vertical_stroke());
    }
    if (from.has_deprecated_footer_row_separator_stroke()) {
      mutable_deprecated_footer_row_separator_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_footer_row_separator_stroke());
    }
    if (from.has_deprecated_footer_row_border_stroke()) {
      mutable_deprecated_footer_row_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_footer_row_border_stroke());
    }
    if (from.has_deprecated_footer_row_horizontal_stroke()) {
      mutable_deprecated_footer_row_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_footer_row_horizontal_stroke());
    }
    if (from.has_deprecated_footer_row_vertical_stroke()) {
      mutable_deprecated_footer_row_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_footer_row_vertical_stroke());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_deprecated_table_body_horizontal_border_stroke()) {
      mutable_deprecated_table_body_horizontal_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_table_body_horizontal_border_stroke());
    }
    if (from.has_deprecated_table_body_vertical_border_stroke()) {
      mutable_deprecated_table_body_vertical_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_table_body_vertical_border_stroke());
    }
    if (from.has_deprecated_table_body_horizontal_stroke()) {
      mutable_deprecated_table_body_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_table_body_horizontal_stroke());
    }
    if (from.has_deprecated_table_body_vertical_stroke()) {
      mutable_deprecated_table_body_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(from.deprecated_table_body_vertical_stroke());
    }
    if (from.has_stroke_preset_list()) {
      mutable_stroke_preset_list()->::TST::StrokePresetListArchive::MergeFrom(from.stroke_preset_list());
    }
    if (from.has_v_strokes_visible()) {
      set_v_strokes_visible(from.v_strokes_visible());
    }
    if (from.has_h_strokes_visible()) {
      set_h_strokes_visible(from.h_strokes_visible());
    }
    if (from.has_hr_separator_visible()) {
      set_hr_separator_visible(from.hr_separator_visible());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_hc_separator_visible()) {
      set_hc_separator_visible(from.hc_separator_visible());
    }
    if (from.has_footer_separator_visible()) {
      set_footer_separator_visible(from.footer_separator_visible());
    }
    if (from.has_table_border_visible()) {
      set_table_border_visible(from.table_border_visible());
    }
    if (from.has_table_header_border_visible()) {
      set_table_header_border_visible(from.table_header_border_visible());
    }
    if (from.has_table_hc_divider_visible()) {
      set_table_hc_divider_visible(from.table_hc_divider_visible());
    }
    if (from.has_table_hr_divider_visible()) {
      set_table_hr_divider_visible(from.table_hr_divider_visible());
    }
    if (from.has_table_footer_divider_visible()) {
      set_table_footer_divider_visible(from.table_footer_divider_visible());
    }
    if (from.has_obsolete_master_font_size()) {
      set_obsolete_master_font_size(from.obsolete_master_font_size());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_master_font_family()) {
      set_master_font_family(from.master_font_family());
    }
    if (from.has_writing_direction()) {
      set_writing_direction(from.writing_direction());
    }
    if (from.has_header_row_separator_stroke()) {
      mutable_header_row_separator_stroke()->::TSD::StrokeArchive::MergeFrom(from.header_row_separator_stroke());
    }
    if (from.has_header_row_border_stroke()) {
      mutable_header_row_border_stroke()->::TSD::StrokeArchive::MergeFrom(from.header_row_border_stroke());
    }
    if (from.has_header_row_horizontal_stroke()) {
      mutable_header_row_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(from.header_row_horizontal_stroke());
    }
    if (from.has_header_row_vertical_stroke()) {
      mutable_header_row_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(from.header_row_vertical_stroke());
    }
    if (from.has_header_column_border_stroke()) {
      mutable_header_column_border_stroke()->::TSD::StrokeArchive::MergeFrom(from.header_column_border_stroke());
    }
    if (from.has_header_column_separator_stroke()) {
      mutable_header_column_separator_stroke()->::TSD::StrokeArchive::MergeFrom(from.header_column_separator_stroke());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_header_column_horizontal_stroke()) {
      mutable_header_column_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(from.header_column_horizontal_stroke());
    }
    if (from.has_header_column_vertical_stroke()) {
      mutable_header_column_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(from.header_column_vertical_stroke());
    }
    if (from.has_footer_row_separator_stroke()) {
      mutable_footer_row_separator_stroke()->::TSD::StrokeArchive::MergeFrom(from.footer_row_separator_stroke());
    }
    if (from.has_footer_row_border_stroke()) {
      mutable_footer_row_border_stroke()->::TSD::StrokeArchive::MergeFrom(from.footer_row_border_stroke());
    }
    if (from.has_footer_row_horizontal_stroke()) {
      mutable_footer_row_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(from.footer_row_horizontal_stroke());
    }
    if (from.has_footer_row_vertical_stroke()) {
      mutable_footer_row_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(from.footer_row_vertical_stroke());
    }
    if (from.has_table_body_horizontal_border_stroke()) {
      mutable_table_body_horizontal_border_stroke()->::TSD::StrokeArchive::MergeFrom(from.table_body_horizontal_border_stroke());
    }
    if (from.has_table_body_vertical_border_stroke()) {
      mutable_table_body_vertical_border_stroke()->::TSD::StrokeArchive::MergeFrom(from.table_body_vertical_border_stroke());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_table_body_horizontal_stroke()) {
      mutable_table_body_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(from.table_body_horizontal_stroke());
    }
    if (from.has_table_body_vertical_stroke()) {
      mutable_table_body_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(from.table_body_vertical_stroke());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableStylePropertiesArchive::CopyFrom(const TableStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStylePropertiesArchive::IsInitialized() const {
  
  if (has_banded_fill()) {
    if (!this->banded_fill().IsInitialized()) return false;
  }
  if (has_deprecated_header_row_separator_stroke()) {
    if (!this->deprecated_header_row_separator_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_header_row_border_stroke()) {
    if (!this->deprecated_header_row_border_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_header_row_horizontal_stroke()) {
    if (!this->deprecated_header_row_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_header_row_vertical_stroke()) {
    if (!this->deprecated_header_row_vertical_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_header_column_border_stroke()) {
    if (!this->deprecated_header_column_border_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_header_column_separator_stroke()) {
    if (!this->deprecated_header_column_separator_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_header_column_horizontal_stroke()) {
    if (!this->deprecated_header_column_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_header_column_vertical_stroke()) {
    if (!this->deprecated_header_column_vertical_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_footer_row_separator_stroke()) {
    if (!this->deprecated_footer_row_separator_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_footer_row_border_stroke()) {
    if (!this->deprecated_footer_row_border_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_footer_row_horizontal_stroke()) {
    if (!this->deprecated_footer_row_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_footer_row_vertical_stroke()) {
    if (!this->deprecated_footer_row_vertical_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_table_body_horizontal_border_stroke()) {
    if (!this->deprecated_table_body_horizontal_border_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_table_body_vertical_border_stroke()) {
    if (!this->deprecated_table_body_vertical_border_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_table_body_horizontal_stroke()) {
    if (!this->deprecated_table_body_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_deprecated_table_body_vertical_stroke()) {
    if (!this->deprecated_table_body_vertical_stroke().IsInitialized()) return false;
  }
  if (has_stroke_preset_list()) {
    if (!this->stroke_preset_list().IsInitialized()) return false;
  }
  if (has_header_row_separator_stroke()) {
    if (!this->header_row_separator_stroke().IsInitialized()) return false;
  }
  if (has_header_row_border_stroke()) {
    if (!this->header_row_border_stroke().IsInitialized()) return false;
  }
  if (has_header_row_horizontal_stroke()) {
    if (!this->header_row_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_header_row_vertical_stroke()) {
    if (!this->header_row_vertical_stroke().IsInitialized()) return false;
  }
  if (has_header_column_border_stroke()) {
    if (!this->header_column_border_stroke().IsInitialized()) return false;
  }
  if (has_header_column_separator_stroke()) {
    if (!this->header_column_separator_stroke().IsInitialized()) return false;
  }
  if (has_header_column_horizontal_stroke()) {
    if (!this->header_column_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_header_column_vertical_stroke()) {
    if (!this->header_column_vertical_stroke().IsInitialized()) return false;
  }
  if (has_footer_row_separator_stroke()) {
    if (!this->footer_row_separator_stroke().IsInitialized()) return false;
  }
  if (has_footer_row_border_stroke()) {
    if (!this->footer_row_border_stroke().IsInitialized()) return false;
  }
  if (has_footer_row_horizontal_stroke()) {
    if (!this->footer_row_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_footer_row_vertical_stroke()) {
    if (!this->footer_row_vertical_stroke().IsInitialized()) return false;
  }
  if (has_table_body_horizontal_border_stroke()) {
    if (!this->table_body_horizontal_border_stroke().IsInitialized()) return false;
  }
  if (has_table_body_vertical_border_stroke()) {
    if (!this->table_body_vertical_border_stroke().IsInitialized()) return false;
  }
  if (has_table_body_horizontal_stroke()) {
    if (!this->table_body_horizontal_stroke().IsInitialized()) return false;
  }
  if (has_table_body_vertical_stroke()) {
    if (!this->table_body_vertical_stroke().IsInitialized()) return false;
  }
  return true;
}

void TableStylePropertiesArchive::Swap(TableStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(banded_rows_, other->banded_rows_);
    std::swap(banded_fill_, other->banded_fill_);
    std::swap(behaves_like_spreadsheet_, other->behaves_like_spreadsheet_);
    std::swap(auto_resize_, other->auto_resize_);
    std::swap(deprecated_header_row_separator_stroke_, other->deprecated_header_row_separator_stroke_);
    std::swap(deprecated_header_row_border_stroke_, other->deprecated_header_row_border_stroke_);
    std::swap(deprecated_header_row_horizontal_stroke_, other->deprecated_header_row_horizontal_stroke_);
    std::swap(deprecated_header_row_vertical_stroke_, other->deprecated_header_row_vertical_stroke_);
    std::swap(deprecated_header_column_border_stroke_, other->deprecated_header_column_border_stroke_);
    std::swap(deprecated_header_column_separator_stroke_, other->deprecated_header_column_separator_stroke_);
    std::swap(deprecated_header_column_horizontal_stroke_, other->deprecated_header_column_horizontal_stroke_);
    std::swap(deprecated_header_column_vertical_stroke_, other->deprecated_header_column_vertical_stroke_);
    std::swap(deprecated_footer_row_separator_stroke_, other->deprecated_footer_row_separator_stroke_);
    std::swap(deprecated_footer_row_border_stroke_, other->deprecated_footer_row_border_stroke_);
    std::swap(deprecated_footer_row_horizontal_stroke_, other->deprecated_footer_row_horizontal_stroke_);
    std::swap(deprecated_footer_row_vertical_stroke_, other->deprecated_footer_row_vertical_stroke_);
    std::swap(deprecated_table_body_horizontal_border_stroke_, other->deprecated_table_body_horizontal_border_stroke_);
    std::swap(deprecated_table_body_vertical_border_stroke_, other->deprecated_table_body_vertical_border_stroke_);
    std::swap(deprecated_table_body_horizontal_stroke_, other->deprecated_table_body_horizontal_stroke_);
    std::swap(deprecated_table_body_vertical_stroke_, other->deprecated_table_body_vertical_stroke_);
    std::swap(stroke_preset_list_, other->stroke_preset_list_);
    std::swap(v_strokes_visible_, other->v_strokes_visible_);
    std::swap(h_strokes_visible_, other->h_strokes_visible_);
    std::swap(hr_separator_visible_, other->hr_separator_visible_);
    std::swap(hc_separator_visible_, other->hc_separator_visible_);
    std::swap(footer_separator_visible_, other->footer_separator_visible_);
    std::swap(table_border_visible_, other->table_border_visible_);
    std::swap(table_header_border_visible_, other->table_header_border_visible_);
    std::swap(table_hc_divider_visible_, other->table_hc_divider_visible_);
    std::swap(table_hr_divider_visible_, other->table_hr_divider_visible_);
    std::swap(table_footer_divider_visible_, other->table_footer_divider_visible_);
    std::swap(obsolete_master_font_size_, other->obsolete_master_font_size_);
    std::swap(master_font_family_, other->master_font_family_);
    std::swap(writing_direction_, other->writing_direction_);
    std::swap(header_row_separator_stroke_, other->header_row_separator_stroke_);
    std::swap(header_row_border_stroke_, other->header_row_border_stroke_);
    std::swap(header_row_horizontal_stroke_, other->header_row_horizontal_stroke_);
    std::swap(header_row_vertical_stroke_, other->header_row_vertical_stroke_);
    std::swap(header_column_border_stroke_, other->header_column_border_stroke_);
    std::swap(header_column_separator_stroke_, other->header_column_separator_stroke_);
    std::swap(header_column_horizontal_stroke_, other->header_column_horizontal_stroke_);
    std::swap(header_column_vertical_stroke_, other->header_column_vertical_stroke_);
    std::swap(footer_row_separator_stroke_, other->footer_row_separator_stroke_);
    std::swap(footer_row_border_stroke_, other->footer_row_border_stroke_);
    std::swap(footer_row_horizontal_stroke_, other->footer_row_horizontal_stroke_);
    std::swap(footer_row_vertical_stroke_, other->footer_row_vertical_stroke_);
    std::swap(table_body_horizontal_border_stroke_, other->table_body_horizontal_border_stroke_);
    std::swap(table_body_vertical_border_stroke_, other->table_body_vertical_border_stroke_);
    std::swap(table_body_horizontal_stroke_, other->table_body_horizontal_stroke_);
    std::swap(table_body_vertical_stroke_, other->table_body_vertical_stroke_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableStylePropertiesArchive_descriptor_;
  metadata.reflection = TableStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableStylePresetArchive::kIndexFieldNumber;
const int TableStylePresetArchive::kImageFieldNumber;
const int TableStylePresetArchive::kStyleNetworkFieldNumber;
#endif  // !_MSC_VER

TableStylePresetArchive::TableStylePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableStylePresetArchive::InitAsDefaultInstance() {
  image_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  style_network_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TableStylePresetArchive::TableStylePresetArchive(const TableStylePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableStylePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  image_ = NULL;
  style_network_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableStylePresetArchive::~TableStylePresetArchive() {
  SharedDtor();
}

void TableStylePresetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
    delete style_network_;
  }
}

void TableStylePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableStylePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableStylePresetArchive_descriptor_;
}

const TableStylePresetArchive& TableStylePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

TableStylePresetArchive* TableStylePresetArchive::default_instance_ = NULL;

TableStylePresetArchive* TableStylePresetArchive::New() const {
  return new TableStylePresetArchive;
}

void TableStylePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_image()) {
      if (image_ != NULL) image_->::TSP::Reference::Clear();
    }
    if (has_style_network()) {
      if (style_network_ != NULL) style_network_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableStylePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }
      
      // optional .TSP.Reference image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style_network;
        break;
      }
      
      // optional .TSP.Reference style_network = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style_network()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableStylePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional .TSP.Reference image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image(), output);
  }
  
  // optional .TSP.Reference style_network = 3;
  if (has_style_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style_network(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableStylePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional .TSP.Reference image = 2;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->image(), target);
  }
  
  // optional .TSP.Reference style_network = 3;
  if (has_style_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style_network(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableStylePresetArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional .TSP.Reference image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }
    
    // optional .TSP.Reference style_network = 3;
    if (has_style_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style_network());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableStylePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableStylePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableStylePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableStylePresetArchive::MergeFrom(const TableStylePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_image()) {
      mutable_image()->::TSP::Reference::MergeFrom(from.image());
    }
    if (from.has_style_network()) {
      mutable_style_network()->::TSP::Reference::MergeFrom(from.style_network());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableStylePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableStylePresetArchive::CopyFrom(const TableStylePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStylePresetArchive::IsInitialized() const {
  
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_style_network()) {
    if (!this->style_network().IsInitialized()) return false;
  }
  return true;
}

void TableStylePresetArchive::Swap(TableStylePresetArchive* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(image_, other->image_);
    std::swap(style_network_, other->style_network_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableStylePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableStylePresetArchive_descriptor_;
  metadata.reflection = TableStylePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableStrokePresetArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

TableStrokePresetArchive::TableStrokePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableStrokePresetArchive::InitAsDefaultInstance() {
}

TableStrokePresetArchive::TableStrokePresetArchive(const TableStrokePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableStrokePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableStrokePresetArchive::~TableStrokePresetArchive() {
  SharedDtor();
}

void TableStrokePresetArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableStrokePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableStrokePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableStrokePresetArchive_descriptor_;
}

const TableStrokePresetArchive& TableStrokePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

TableStrokePresetArchive* TableStrokePresetArchive::default_instance_ = NULL;

TableStrokePresetArchive* TableStrokePresetArchive::New() const {
  return new TableStrokePresetArchive;
}

void TableStrokePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableStrokePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableStrokePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableStrokePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableStrokePresetArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableStrokePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableStrokePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableStrokePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableStrokePresetArchive::MergeFrom(const TableStrokePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableStrokePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableStrokePresetArchive::CopyFrom(const TableStrokePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStrokePresetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TableStrokePresetArchive::Swap(TableStrokePresetArchive* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableStrokePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableStrokePresetArchive_descriptor_;
  metadata.reflection = TableStrokePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemePresetsArchive::kTableStylePresetsFieldNumber;
const int ThemePresetsArchive::kTableCellStrokePresetsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ThemePresetsArchive::kExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TST::ThemePresetsArchive >, 11, false >
  ThemePresetsArchive::extension(kExtensionFieldNumber, ::TST::ThemePresetsArchive::default_instance());
ThemePresetsArchive::ThemePresetsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemePresetsArchive::InitAsDefaultInstance() {
}

ThemePresetsArchive::ThemePresetsArchive(const ThemePresetsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemePresetsArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemePresetsArchive::~ThemePresetsArchive() {
  SharedDtor();
}

void ThemePresetsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThemePresetsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemePresetsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemePresetsArchive_descriptor_;
}

const ThemePresetsArchive& ThemePresetsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTStylePropertyArchiving_2eproto();  return *default_instance_;
}

ThemePresetsArchive* ThemePresetsArchive::default_instance_ = NULL;

ThemePresetsArchive* ThemePresetsArchive::New() const {
  return new ThemePresetsArchive;
}

void ThemePresetsArchive::Clear() {
  table_style_presets_.Clear();
  table_cell_stroke_presets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemePresetsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference table_style_presets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table_style_presets;
        if (input->ExpectTag(18)) goto parse_table_cell_stroke_presets;
        break;
      }
      
      // repeated .TSP.Reference table_cell_stroke_presets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_cell_stroke_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_cell_stroke_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cell_stroke_presets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemePresetsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference table_style_presets = 1;
  for (int i = 0; i < this->table_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_style_presets(i), output);
  }
  
  // repeated .TSP.Reference table_cell_stroke_presets = 2;
  for (int i = 0; i < this->table_cell_stroke_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_cell_stroke_presets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemePresetsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference table_style_presets = 1;
  for (int i = 0; i < this->table_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_style_presets(i), target);
  }
  
  // repeated .TSP.Reference table_cell_stroke_presets = 2;
  for (int i = 0; i < this->table_cell_stroke_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_cell_stroke_presets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemePresetsArchive::ByteSize() const {
  int total_size = 0;
  
  // repeated .TSP.Reference table_style_presets = 1;
  total_size += 1 * this->table_style_presets_size();
  for (int i = 0; i < this->table_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_style_presets(i));
  }
  
  // repeated .TSP.Reference table_cell_stroke_presets = 2;
  total_size += 1 * this->table_cell_stroke_presets_size();
  for (int i = 0; i < this->table_cell_stroke_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_cell_stroke_presets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemePresetsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemePresetsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemePresetsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemePresetsArchive::MergeFrom(const ThemePresetsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_style_presets_.MergeFrom(from.table_style_presets_);
  table_cell_stroke_presets_.MergeFrom(from.table_cell_stroke_presets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemePresetsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemePresetsArchive::CopyFrom(const ThemePresetsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemePresetsArchive::IsInitialized() const {
  
  for (int i = 0; i < table_style_presets_size(); i++) {
    if (!this->table_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < table_cell_stroke_presets_size(); i++) {
    if (!this->table_cell_stroke_presets(i).IsInitialized()) return false;
  }
  return true;
}

void ThemePresetsArchive::Swap(ThemePresetsArchive* other) {
  if (other != this) {
    table_style_presets_.Swap(&other->table_style_presets_);
    table_cell_stroke_presets_.Swap(&other->table_cell_stroke_presets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemePresetsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemePresetsArchive_descriptor_;
  metadata.reflection = ThemePresetsArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TST

// @@protoc_insertion_point(global_scope)
